#!/bin/bash
# –°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ HackRF QSA C –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è Python CFFI

set -e  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "üîß –°–±–æ—Ä–∫–∞ HackRF QSA C –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"
echo "=================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
check_dependencies() {
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º gcc
    if ! command -v gcc &> /dev/null; then
        echo "‚ùå gcc –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ build-essential:"
        echo "   sudo apt-get install build-essential"
        exit 1
    fi
    echo "‚úì gcc –Ω–∞–π–¥–µ–Ω: $(gcc --version | head -n1)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º make
    if ! command -v make &> /dev/null; then
        echo "‚ùå make –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ build-essential:"
        echo "   sudo apt-get install build-essential"
        exit 1
    fi
    echo "‚úì make –Ω–∞–π–¥–µ–Ω: $(make --version | head -n1)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pkg-config
    if ! command -v pkg-config &> /dev/null; then
        echo "‚ùå pkg-config –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:"
        echo "   sudo apt-get install pkg-config"
        exit 1
    fi
    echo "‚úì pkg-config –Ω–∞–π–¥–µ–Ω: $(pkg-config --version)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º libhackrf
    if ! pkg-config --exists libhackrf; then
        echo "‚ùå libhackrf –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:"
        echo "   sudo apt-get install libhackrf-dev"
        echo "   –∏–ª–∏ —Å–æ–±–µ—Ä–∏—Ç–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤: https://github.com/mossmann/hackrf"
        exit 1
    fi
    echo "‚úì libhackrf –Ω–∞–π–¥–µ–Ω: $(pkg-config --modversion libhackrf)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º FFTW3
    if ! pkg-config --exists fftw3f; then
        echo "‚ùå FFTW3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:"
        echo "   sudo apt-get install libfftw3-dev"
        exit 1
    fi
    echo "‚úì FFTW3 –Ω–∞–π–¥–µ–Ω: $(pkg-config --modversion fftw3f)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –∏ CFFI
    if ! python3 -c "import cffi" 2>/dev/null; then
        echo "‚ùå Python CFFI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:"
        echo "   pip3 install cffi"
        exit 1
    fi
    echo "‚úì Python CFFI –Ω–∞–π–¥–µ–Ω"
}

# –°–±–æ—Ä–∫–∞ C –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
build_c_library() {
    echo ""
    echo "üì¶ –°–±–æ—Ä–∫–∞ C –±–∏–±–ª–∏–æ—Ç–µ–∫–∏..."
    
    cd panorama/drivers/hackrf_master
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–±–æ—Ä–∫—É
    echo "  –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–±–æ—Ä–∫–∏..."
    make clean 2>/dev/null || true
    
    # –°–æ–±–∏—Ä–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    echo "  –ö–æ–º–ø–∏–ª—è—Ü–∏—è..."
    make all
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if [ -f "build/libhackrf_qsa.so" ]; then
        echo "‚úì C –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–∞"
        ls -la build/
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ C –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"
        exit 1
    fi
    
    cd ../../..
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
test_build() {
    echo ""
    echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    required_files=(
        "panorama/drivers/hackrf_master/build/libhackrf_qsa.so"
        "panorama/drivers/hrf_backend.py"
    )
    
    for file in "${required_files[@]}"; do
        if [ -f "$file" ]; then
            echo "‚úì $file –Ω–∞–π–¥–µ–Ω"
        else
            echo "‚ùå $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
        fi
    done
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Python –∏–º–ø–æ—Ä—Ç
    echo "  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python –∏–º–ø–æ—Ä—Ç–∞..."
    if python3 -c "
import sys
sys.path.insert(0, '.')
try:
    from panorama.drivers.hrf_backend import HackRFQSABackend
    print('‚úì Python –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}')
    exit(1)
"; then
        echo "‚úì Python –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Python –º–æ–¥—É–ª—è"
        exit 1
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
install_library() {
    echo ""
    echo "üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)..."
    
    read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≤ —Å–∏—Å—Ç–µ–º—É? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        cd panorama/drivers/hackrf_master
        sudo make install
        cd ../../..
        echo "‚úì –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
    else
        echo "  –ü—Ä–æ–ø—É—â–µ–Ω–æ"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É HackRF QSA C –±–∏–±–ª–∏–æ—Ç–µ–∫–∏..."
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    check_dependencies
    
    # –°–æ–±–∏—Ä–∞–µ–º C –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    build_c_library
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É
    test_build
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    install_library
    
    echo ""
    echo "üéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    echo "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HackRF QSA –≤ Python:"
    echo "  from panorama.drivers.hrf_backend import HackRFQSABackend"
    echo ""
    echo "–§–∞–π–ª—ã:"
    echo "  - C –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: panorama/drivers/hackrf_master/build/libhackrf_qsa.so"
    echo "  - Python backend: panorama/drivers/hrf_backend.py"
    echo ""
    echo "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"
    echo "  python3 run_rssi_panorama.py"
    echo ""
    echo "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:"
    echo "  - 4 –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ (A, B, C, D) –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è"
    echo "  - –ú–æ–¥—É–ª—å–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è FFT –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è '–¥—ã—Ä–æ–∫'"
    echo "  - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∏–∑ CSV —Ñ–∞–π–ª–æ–≤"
    echo "  - –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ FFI –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞)"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
trap 'echo "‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ $LINENO"; exit 1' ERR

# –ó–∞–ø—É—Å–∫
main "$@"
