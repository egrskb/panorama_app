#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ HackRF QSA backend
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

def test_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç backend."""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞...")
        from panorama.drivers.hrf_backend import HackRFQSABackend
        print("‚úÖ HackRFQSABackend –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–∞...")
        attrs = dir(HackRFQSABackend)
        required_attrs = ['start', 'stop', 'is_running', 'enumerate_devices']
        
        for attr in required_attrs:
            if attr in attrs:
                print(f"‚úÖ {attr} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå {attr} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_ffi_definitions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç FFI –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."""
    try:
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FFI –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π...")
        from panorama.drivers.hrf_backend import HackRFQSABackend
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä (–±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SDR)
        backend = HackRFQSABackend()
        print("‚úÖ FFI –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º FFI –∞—Ç—Ä–∏–±—É—Ç—ã
        if hasattr(backend, '_ffi'):
            print("‚úÖ FFI –æ–±—ä–µ–∫—Ç –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå FFI –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FFI: {e}")
        return False

def test_enumerate_devices():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    try:
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        from panorama.drivers.hrf_backend import HackRFQSABackend
        
        devices = HackRFQSABackend.enumerate_devices()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
        
        for i, device in enumerate(devices):
            print(f"  {i+1}. {device}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ –¢–µ—Å—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ HackRF QSA Backend")
    print("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç", test_import),
        ("FFI –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", test_ffi_definitions),
        ("–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", test_enumerate_devices),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        print("-" * 30)
        
        if test_func():
            passed += 1
            print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
        else:
            print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return 1

if __name__ == "__main__":
    exit(main())
