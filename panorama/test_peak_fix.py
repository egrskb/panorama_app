#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ 'DetectedPeak object is not subscriptable'
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–¥–µ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
"""

import os

def test_master_sweep_controller_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ MasterSweepController"""
    
    print("=== –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ MasterSweepController ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
        master_file = 'features/spectrum/master.py'
        
        if not os.path.exists(master_file):
            print(f"‚ùå –§–∞–π–ª {master_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        with open(master_file, 'r') as f:
            content = f.read()
            
        print(f"‚úÖ –§–∞–π–ª {master_file} –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ
        checks = [
            ('best_peak = max(peaks, key=lambda p: p.snr_db)', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ p.snr_db'),
            ('peak_freq = best_peak.freq_hz', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ best_peak.freq_hz'),
            ('peak_snr = best_peak.snr_db', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ best_peak.snr_db'),
            ('# –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–∏–∫–æ–≤ -> —Å–ø–∏—Å–æ–∫ DetectedPeak', '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
        ]
        
        all_passed = True
        for check_str, description in checks:
            if check_str in content:
                print(f"   ‚úÖ {description}: –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"   ‚ùå {description}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                all_passed = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ —É–¥–∞–ª–µ–Ω
        old_code_checks = [
            ('peak_freq, peak_snr = max(peaks, key=lambda t: t[1])', '–°—Ç–∞—Ä—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥'),
            ('# –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–∏–∫–æ–≤ -> (freq, snr)', '–°—Ç–∞—Ä—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
        ]
        
        for check_str, description in old_code_checks:
            if check_str in content:
                print(f"   ‚ùå {description}: –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                all_passed = False
            else:
                print(f"   ‚úÖ {description}: —É–¥–∞–ª–µ–Ω")
        
        return all_passed
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_detected_peak_class_definition():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ DetectedPeak"""
    
    print("\n=== –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ DetectedPeak ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞
        model_file = 'features/spectrum/model.py'
        
        if not os.path.exists(model_file):
            print(f"‚ùå –§–∞–π–ª {model_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        with open(model_file, 'r') as f:
            content = f.read()
            
        print(f"‚úÖ –§–∞–π–ª {model_file} –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        checks = [
            ('@dataclass(frozen=True)', 'Dataclass —Å frozen=True'),
            ('class DetectedPeak:', '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞'),
            ('freq_hz: float', '–ê—Ç—Ä–∏–±—É—Ç freq_hz'),
            ('snr_db: float', '–ê—Ç—Ä–∏–±—É—Ç snr_db'),
            ('power_dbm: float', '–ê—Ç—Ä–∏–±—É—Ç power_dbm'),
            ('band_hz: float', '–ê—Ç—Ä–∏–±—É—Ç band_hz'),
            ('idx: int', '–ê—Ç—Ä–∏–±—É—Ç idx')
        ]
        
        all_passed = True
        for check_str, description in checks:
            if check_str in content:
                print(f"   ‚úÖ {description}: –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"   ‚ùå {description}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                all_passed = False
        
        return all_passed
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_peak_detector_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã PeakDetector"""
    
    print("\n=== –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ PeakDetector ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        model_file = 'features/spectrum/model.py'
        
        if not os.path.exists(model_file):
            print(f"‚ùå –§–∞–π–ª {model_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        with open(model_file, 'r') as f:
            content = f.read()
            
        print(f"‚úÖ –§–∞–π–ª {model_file} –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        checks = [
            ('def detect_peaks(', '–ú–µ—Ç–æ–¥ detect_peaks'),
            ('-> List[DetectedPeak]:', '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–∏–ø List[DetectedPeak]'),
            ('def detect(', '–ú–µ—Ç–æ–¥ detect'),
            ('class PeakDetector:', '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ PeakDetector')
        ]
        
        all_passed = True
        for check_str, description in checks:
            if check_str in content:
                print(f"   ‚úÖ {description}: –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"   ‚ùå {description}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                all_passed = False
        
        return all_passed
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ 'DetectedPeak object is not subscriptable'")
    print("=" * 70)
    
    success = True
    success &= test_master_sweep_controller_fix()
    success &= test_detected_peak_class_definition()
    success &= test_peak_detector_methods()
    
    print("\n" + "=" * 70)
    if success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –û—à–∏–±–∫–∞ 'DetectedPeak object is not subscriptable' –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("\n–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("  ‚Ä¢ –ó–∞–º–µ–Ω–µ–Ω –∫–æ–¥ 'peak_freq, peak_snr = max(peaks, key=lambda t: t[1])'")
        print("  ‚Ä¢ –ù–∞ 'best_peak = max(peaks, key=lambda p: p.snr_db)'")
        print("  ‚Ä¢ –ò 'peak_freq = best_peak.freq_hz', 'peak_snr = best_peak.snr_db'")
        print("  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print("\n–¢–µ–ø–µ—Ä—å –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–∫–∏ 'DetectedPeak object is not subscriptable'")
