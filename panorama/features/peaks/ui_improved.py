# panorama/features/peaks/ui_improved.py
from __future__ import annotations
from typing import Optional, List, Deque
from collections import deque
from PyQt5 import QtWidgets, QtCore, QtGui
import numpy as np
import json
import time


class AdaptivePeaksWidget(QtWidgets.QWidget):
    """–í–∏–¥–∂–µ—Ç –ø–æ–∏—Å–∫–∞ –ø–∏–∫–æ–≤ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º baseline + N."""
    
    goToFreq = QtCore.pyqtSignal(float)  # freq_hz
    peakDetected = QtCore.pyqtSignal(dict)  # peak info
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        self._freqs: Optional[np.ndarray] = None
        self._row: Optional[np.ndarray] = None
        self._history: Deque[np.ndarray] = deque(maxlen=10)  # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è baseline
        self._baseline: Optional[np.ndarray] = None
        self._last_peaks: List[dict] = []
        self._peaks_history: List[dict] = []  # –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∏–∫–æ–≤
        
        self._build_ui()
        
    def _build_ui(self):
        layout = QtWidgets.QVBoxLayout(self)
        
        # –ü–∞–Ω–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params_group = QtWidgets.QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–ø–∏–∫–æ–≤")
        params_layout = QtWidgets.QFormLayout(params_group)
        
        # –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–∏–∫–æ–≤
        self.auto_peaks_enabled = QtWidgets.QCheckBox("–ê–≤—Ç–æ–ø–∏–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã")
        self.auto_peaks_enabled.setChecked(True)
        self.auto_peaks_enabled.setToolTip("–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–∏–∫–æ–≤")
        self.auto_peaks_enabled.toggled.connect(self._on_autopeaks_toggled)
        
        # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–∏–∫–æ–≤
        self.lbl_autopeaks_status = QtWidgets.QLabel("üü¢ –ê–≤—Ç–æ–ø–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã")
        self.lbl_autopeaks_status.setStyleSheet("""
            QLabel {
                color: #4CAF50;
                font-weight: bold;
                padding: 5px;
                border: 1px solid #4CAF50;
                border-radius: 3px;
                background-color: rgba(76, 175, 80, 0.1);
            }
        """)
        
        # –†–µ–∂–∏–º –ø–æ—Ä–æ–≥–∞
        self.threshold_mode = QtWidgets.QComboBox()
        self.threshold_mode.addItems(["–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π (baseline + N)", "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥"])
        self.threshold_mode.currentTextChanged.connect(self._on_threshold_mode_changed)
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é +20 –¥–ë)
        self.adaptive_offset = QtWidgets.QDoubleSpinBox()
        self.adaptive_offset.setRange(3, 50)
        self.adaptive_offset.setValue(20)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 20 –¥–ë
        self.adaptive_offset.setSuffix(" –¥–ë –Ω–∞–¥ —à—É–º–æ–º")
        self.adaptive_offset.setToolTip("–ü–æ—Ä–æ–≥ = baseline + —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ")
        
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥
        self.fixed_threshold = QtWidgets.QDoubleSpinBox()
        self.fixed_threshold.setRange(-160, 30)
        self.fixed_threshold.setValue(-70)
        self.fixed_threshold.setSuffix(" –¥–ë–º")
        self.fixed_threshold.setEnabled(False)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏
        self.min_distance = QtWidgets.QDoubleSpinBox()
        self.min_distance.setRange(0, 5000)
        self.min_distance.setValue(100)
        self.min_distance.setSuffix(" –∫–ì—Ü")
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –ø–∏–∫–∞
        self.min_width = QtWidgets.QSpinBox()
        self.min_width.setRange(1, 100)
        self.min_width.setValue(3)
        self.min_width.setSuffix(" –±–∏–Ω–æ–≤")
        
        # –û–∫–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ baseline
        self.baseline_window = QtWidgets.QSpinBox()
        self.baseline_window.setRange(3, 50)
        self.baseline_window.setValue(10)
        self.baseline_window.setSuffix(" —Å–≤–∏–ø–æ–≤")
        self.baseline_window.setToolTip("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–∏–ø–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —à—É–º–æ–≤–æ–≥–æ –ø–æ—Ä–æ–≥–∞")
        
        # –ú–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ baseline
        self.baseline_method = QtWidgets.QComboBox()
        self.baseline_method.addItems(["–ú–µ–¥–∏–∞–Ω–∞", "–°—Ä–µ–¥–Ω–µ–µ", "–ú–∏–Ω–∏–º—É–º", "–ü–µ—Ä—Å–µ–Ω—Ç–∏–ª—å"])
        
        # –ü–µ—Ä—Å–µ–Ω—Ç–∏–ª—å –¥–ª—è baseline
        self.baseline_percentile = QtWidgets.QSpinBox()
        self.baseline_percentile.setRange(1, 99)
        self.baseline_percentile.setValue(25)
        self.baseline_percentile.setSuffix(" %")
        self.baseline_percentile.setEnabled(False)
        
        # –ê–≤—Ç–æ–ø–æ–∏—Å–∫
        self.auto_search = QtWidgets.QCheckBox("–ê–≤—Ç–æ–ø–æ–∏—Å–∫")
        self.auto_search.setChecked(True)
        
        params_layout.addRow("–†–µ–∂–∏–º –ø–æ—Ä–æ–≥–∞:", self.threshold_mode)
        params_layout.addRow("–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥:", self.adaptive_offset)
        params_layout.addRow("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥:", self.fixed_threshold)
        params_layout.addRow("–ú–∏–Ω. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:", self.min_distance)
        params_layout.addRow("–ú–∏–Ω. —à–∏—Ä–∏–Ω–∞:", self.min_width)
        params_layout.addRow("–û–∫–Ω–æ baseline:", self.baseline_window)
        params_layout.addRow("–ú–µ—Ç–æ–¥ baseline:", self.baseline_method)
        params_layout.addRow("–ü–µ—Ä—Å–µ–Ω—Ç–∏–ª—å:", self.baseline_percentile)
        params_layout.addRow(self.auto_search)
        params_layout.addRow(self.auto_peaks_enabled)
        params_layout.addRow("–°—Ç–∞—Ç—É—Å:", self.lbl_autopeaks_status)
        
        layout.addWidget(params_group)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QtWidgets.QHBoxLayout()
        
        self.btn_find = QtWidgets.QPushButton("üîç –ù–∞–π—Ç–∏ –ø–∏–∫–∏")
        self.btn_find.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                font-weight: bold;
                padding: 8px;
            }
        """)
        
        self.btn_clear = QtWidgets.QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å")
        self.btn_history = QtWidgets.QPushButton("üìä –ò—Å—Ç–æ—Ä–∏—è")
        self.btn_export = QtWidgets.QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç")
        
        buttons_layout.addWidget(self.btn_find)
        buttons_layout.addWidget(self.btn_clear)
        buttons_layout.addWidget(self.btn_history)
        buttons_layout.addWidget(self.btn_export)
        
        layout.addLayout(buttons_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–∏–∫–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        self.table = QtWidgets.QTableWidget(0, 6)
        self.table.setHorizontalHeaderLabels([
            "–ß–∞—Å—Ç–æ—Ç–∞ (–ú–ì—Ü)", "–£—Ä–æ–≤–µ–Ω—å (–¥–ë–º)", "–ù–∞–¥ —à—É–º–æ–º (–¥–ë)", 
            "–®–∏—Ä–∏–Ω–∞ (–∫–ì—Ü)", "Q-—Ñ–∞–∫—Ç–æ—Ä", "–¢–∏–ø"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.table.setColumnWidth(0, 120)  # –ß–∞—Å—Ç–æ—Ç–∞
        self.table.setColumnWidth(1, 100)  # –£—Ä–æ–≤–µ–Ω—å
        self.table.setColumnWidth(2, 100)  # –ù–∞–¥ —à—É–º–æ–º
        self.table.setColumnWidth(3, 90)   # –®–∏—Ä–∏–Ω–∞
        self.table.setColumnWidth(4, 80)   # Q-—Ñ–∞–∫—Ç–æ—Ä
        self.table.setColumnWidth(5, 120)  # –¢–∏–ø
        
        self.table.horizontalHeader().setStretchLastSection(False)
        self.table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table.setAlternatingRowColors(True)
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        self.table.setStyleSheet("""
            QTableWidget {
                gridline-color: #555;
                font-size: 11px;
            }
            QTableWidget::item {
                padding: 2px;
            }
            QHeaderView::section {
                font-weight: bold;
                padding: 4px;
            }
        """)
        
        layout.addWidget(self.table)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_layout = QtWidgets.QHBoxLayout()
        
        self.lbl_peaks_count = QtWidgets.QLabel("–ü–∏–∫–æ–≤: 0")
        self.lbl_baseline = QtWidgets.QLabel("Baseline: ‚Äî")
        self.lbl_threshold = QtWidgets.QLabel("–ü–æ—Ä–æ–≥: ‚Äî")
        
        stats_layout.addWidget(self.lbl_peaks_count)
        stats_layout.addWidget(self.lbl_baseline)
        stats_layout.addWidget(self.lbl_threshold)
        stats_layout.addStretch()
        
        layout.addLayout(stats_layout)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.btn_find.clicked.connect(self._find_peaks)
        self.btn_clear.clicked.connect(self._clear_peaks)
        self.btn_history.clicked.connect(self._show_history)
        self.btn_export.clicked.connect(self._export_peaks)
        self.table.doubleClicked.connect(self._on_double_click)
        self.threshold_mode.currentTextChanged.connect(self._on_threshold_mode_changed)
        self.baseline_method.currentTextChanged.connect(self._on_baseline_method_changed)
        
        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.adaptive_offset.valueChanged.connect(self._on_params_changed)
        self.fixed_threshold.valueChanged.connect(self._on_params_changed)
        self.min_distance.valueChanged.connect(self._on_params_changed)
        self.min_width.valueChanged.connect(self._on_params_changed)
        
    def _on_threshold_mode_changed(self, text):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ—Ä–æ–≥–∞."""
        is_adaptive = "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π" in text
        self.adaptive_offset.setEnabled(is_adaptive)
        self.fixed_threshold.setEnabled(not is_adaptive)
        self.baseline_window.setEnabled(is_adaptive)
        self.baseline_method.setEnabled(is_adaptive)
        
        if self.auto_peaks_enabled.isChecked() and self._freqs is not None:
            self._find_peaks()
            
    def _on_baseline_method_changed(self, text):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ —Ä–∞—Å—á–µ—Ç–∞ baseline."""
        self.baseline_percentile.setEnabled("–ü–µ—Ä—Å–µ–Ω—Ç–∏–ª—å" in text)
        
        if self.auto_peaks_enabled.isChecked() and self._freqs is not None:
            self._find_peaks()
            
    def _on_params_changed(self):
        """–ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        if self.auto_peaks_enabled.isChecked() and self._freqs is not None:
            self._find_peaks()
            
    def clear_history(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏ baseline."""
        self._history.clear()
        self._baseline = None
        self._last_peaks = []
        self._peaks_history.clear()  # –û—á–∏—â–∞–µ–º —Ç–∞–∫–∂–µ –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
    def _on_autopeaks_toggled(self, enabled: bool):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø–∏–∫–æ–≤."""
        if enabled:
            self.lbl_autopeaks_status.setText("üü¢ –ê–≤—Ç–æ–ø–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã")
            self.lbl_autopeaks_status.setStyleSheet("""
                QLabel {
                    color: #4CAF50;
                    font-weight: bold;
                    padding: 5px;
                    border: 1px solid #4CAF50;
                    border-radius: 3px;
                    background-color: rgba(76, 175, 80, 0.1);
                }
            """)
        else:
            self.lbl_autopeaks_status.setText("üî¥ –ê–≤—Ç–æ–ø–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            self.lbl_autopeaks_status.setStyleSheet("""
                QLabel {
                    color: #f44336;
                    font-weight: bold;
                    padding: 5px;
                    border: 1px solid #f44336;
                    border-radius: 3px;
                    background-color: rgba(244, 67, 54, 0.1);
                }
            """)
        
        # –ï—Å–ª–∏ –∞–≤—Ç–æ–ø–∏–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, —Å—Ä–∞–∑—É –∏—â–µ–º –ø–∏–∫–∏
        if enabled and self._freqs is not None and self._row is not None:
            self._find_peaks()
        
    def update_from_row(self, freqs_hz, row_dbm):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–ø–µ–∫—Ç—Ä–∞."""
        freqs_hz = np.asarray(freqs_hz, dtype=float)
        row_dbm = np.asarray(row_dbm, dtype=float)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"–ê–≤—Ç–æ–ø–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ: freqs={freqs_hz.size}, row={row_dbm.size}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Ä–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if self._freqs is not None and self._freqs.size != freqs_hz.size:
            # –†–∞–∑–º–µ—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ baseline
            print(f"Warning: Frequency array size changed from {self._freqs.size} to {freqs_hz.size}, clearing history")
            self.clear_history()
            
        self._freqs = freqs_hz
        self._row = row_dbm
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É
        if self._freqs.size != self._row.size:
            print(f"Warning: Size mismatch - freqs: {self._freqs.size}, row: {self._row.size}")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è baseline —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if self._row.size > 0:
            self._history.append(self._row.copy())
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º baseline
            self._calculate_baseline()
            
            # –ê–≤—Ç–æ–ø–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
            if self.auto_peaks_enabled.isChecked():
                self._find_peaks()
            
    def _calculate_baseline(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç baseline –ø–æ –∏—Å—Ç–æ—Ä–∏–∏."""
        if len(self._history) < 3:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–∞—Å—Å–∏–≤—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É
        if self._freqs is None:
            return
            
        expected_size = self._freqs.size
        valid_history = []
        
        for hist_row in self._history:
            if hist_row.size == expected_size:
                valid_history.append(hist_row)
            else:
                print(f"Warning: Skipping history row with size {hist_row.size}, expected {expected_size}")
        
        if len(valid_history) < 3:
            return
            
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω—É–∂–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        window_size = min(self.baseline_window.value(), len(valid_history))
        history_array = np.array(valid_history[-window_size:])
        
        method = self.baseline_method.currentText()
        
        if method == "–ú–µ–¥–∏–∞–Ω–∞":
            self._baseline = np.median(history_array, axis=0)
        elif method == "–°—Ä–µ–¥–Ω–µ–µ":
            self._baseline = np.mean(history_array, axis=0)
        elif method == "–ú–∏–Ω–∏–º—É–º":
            self._baseline = np.min(history_array, axis=0)
        elif method == "–ü–µ—Ä—Å–µ–Ω—Ç–∏–ª—å":
            percentile = self.baseline_percentile.value()
            self._baseline = np.percentile(history_array, percentile, axis=0)
        else:
            self._baseline = np.median(history_array, axis=0)
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if self._baseline is not None:
            avg_baseline = np.mean(self._baseline)
            self.lbl_baseline.setText(f"Baseline: {avg_baseline:.1f} –¥–ë–º")
            
    def _get_threshold(self) -> np.ndarray:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∏–Ω–∞."""
        if self._row is None:
            return None
            
        if "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π" in self.threshold_mode.currentText():
            if self._baseline is None:
                # –ï—Å–ª–∏ baseline –µ—â–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                self._baseline = self._row - 10
            elif self._baseline.size != self._row.size:
                # –†–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º baseline
                print(f"Warning: Baseline size mismatch - baseline: {self._baseline.size}, row: {self._row.size}")
                self._baseline = self._row - 10
                
            threshold = self._baseline + self.adaptive_offset.value()
            avg_threshold = np.mean(threshold)
            self.lbl_threshold.setText(f"–ü–æ—Ä–æ–≥: {avg_threshold:.1f} –¥–ë–º")
            return threshold
        else:
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥
            threshold_value = self.fixed_threshold.value()
            self.lbl_threshold.setText(f"–ü–æ—Ä–æ–≥: {threshold_value:.1f} –¥–ë–º")
            return np.full_like(self._row, threshold_value)
            
    def _find_peaks(self):
        """–ü–æ–∏—Å–∫ –ø–∏–∫–æ–≤ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º."""
        if self._freqs is None or self._row is None:
            return
            
        threshold = self._get_threshold()
        if threshold is None:
            return
            
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–∫–∏ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞
        above_threshold = self._row > threshold
        
        if not np.any(above_threshold):
            self._last_peaks = []
            self._fill_table()
            return
            
        # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã
        peaks = []
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∞–∫—Å–∏–º—É–º–æ–≤
        for i in range(1, len(self._row) - 1):
            if above_threshold[i] and self._row[i] > self._row[i-1] and self._row[i] >= self._row[i+1]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É –ø–∏–∫–∞
                width = self._calculate_peak_width(i)
                
                if width >= self.min_width.value():
                    peak_info = self._analyze_peak(i, threshold[i])
                    peaks.append(peak_info)
                    
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        if len(self._freqs) > 1:
            bin_width_khz = (self._freqs[1] - self._freqs[0]) / 1000
            min_bins = int(self.min_distance.value() / bin_width_khz)
            peaks = self._filter_close_peaks(peaks, min_bins)
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é (—Å–∏–ª—å–Ω–µ–π—à–∏–µ —Å–≤–µ—Ä—Ö—É)
        peaks.sort(key=lambda x: x['level_dbm'], reverse=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–∏–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self._add_peaks_to_history(peaks)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∏–∫–∏
        self._last_peaks = peaks
        self._fill_table()
        
        # –≠–º–∏—Ç–∏–º —Å–∏–≥–Ω–∞–ª—ã –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∏–∫–∞—Ö
        for peak in peaks:
            self.peakDetected.emit(peak)
            
    def _add_peaks_to_history(self, new_peaks: List[dict]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–∏–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –æ–±–Ω–æ–≤–ª—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞ —Ç–æ–π –∂–µ —á–∞—Å—Ç–æ—Ç–µ."""
        if not new_peaks:
            return
            
        for new_peak in new_peaks:
            freq_mhz = new_peak['freq_mhz']
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∏–∫ –Ω–∞ —Ç–æ–π –∂–µ —á–∞—Å—Ç–æ—Ç–µ
            existing_peak = None
            for i, hist_peak in enumerate(self._peaks_history):
                if abs(hist_peak['freq_mhz'] - freq_mhz) < 0.001:  # –¢–æ—á–Ω–æ—Å—Ç—å 1 –∫–ì—Ü
                    existing_peak = i
                    break
            
            if existing_peak is not None:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∏–∫
                old_peak = self._peaks_history[existing_peak]
                self._peaks_history[existing_peak] = {
                    **old_peak,
                    'level_dbm': new_peak['level_dbm'],
                    'last_seen': time.time(),
                    'detection_count': old_peak.get('detection_count', 1) + 1,
                    'max_level_dbm': max(old_peak.get('max_level_dbm', old_peak['level_dbm']), new_peak['level_dbm']),
                    'min_level_dbm': min(old_peak.get('min_level_dbm', old_peak['level_dbm']), new_peak['level_dbm'])
                }
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–∏–∫
                new_peak['first_seen'] = time.time()
                new_peak['last_seen'] = time.time()
                new_peak['detection_count'] = 1
                new_peak['max_level_dbm'] = new_peak['level_dbm']
                new_peak['min_level_dbm'] = new_peak['level_dbm']
                self._peaks_history.append(new_peak)
            
    def _show_history(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∏–∫–æ–≤."""
        if not self._peaks_history:
            QtWidgets.QMessageBox.information(self, "–ò—Å—Ç–æ—Ä–∏—è", "–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—É—Å—Ç–∞")
            return
            
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        dialog = QtWidgets.QDialog(self)
        dialog.setWindowTitle("–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∏–∫–æ–≤")
        dialog.setModal(True)
        dialog.resize(800, 600)
        
        layout = QtWidgets.QVBoxLayout(dialog)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
        history_table = QtWidgets.QTableWidget(0, 8)
        history_table.setHorizontalHeaderLabels([
            "–ß–∞—Å—Ç–æ—Ç–∞ (–ú–ì—Ü)", "–£—Ä–æ–≤–µ–Ω—å (–¥–ë–º)", "–ú–∞–∫—Å (–¥–ë–º)", "–ú–∏–Ω (–¥–ë–º)",
            "–®–∏—Ä–∏–Ω–∞ (–∫–ì—Ü)", "–¢–∏–ø", "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        history_table.setColumnWidth(0, 100)  # –ß–∞—Å—Ç–æ—Ç–∞
        history_table.setColumnWidth(1, 80)   # –£—Ä–æ–≤–µ–Ω—å
        history_table.setColumnWidth(2, 80)   # –ú–∞–∫—Å
        history_table.setColumnWidth(3, 80)   # –ú–∏–Ω
        history_table.setColumnWidth(4, 80)   # –®–∏—Ä–∏–Ω–∞
        history_table.setColumnWidth(5, 100)  # –¢–∏–ø
        history_table.setColumnWidth(6, 80)   # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π
        history_table.setColumnWidth(7, 120)  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑
        
        history_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        history_table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        history_table.setAlternatingRowColors(True)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        history_table.setRowCount(len(self._peaks_history))
        for row, peak in enumerate(self._peaks_history):
            # –ß–∞—Å—Ç–æ—Ç–∞
            history_table.setItem(row, 0, QtWidgets.QTableWidgetItem(f"{peak['freq_mhz']:.3f}"))
            
            # –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            history_table.setItem(row, 1, QtWidgets.QTableWidgetItem(f"{peak['level_dbm']:.1f}"))
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            max_level = peak.get('max_level_dbm', peak['level_dbm'])
            history_table.setItem(row, 2, QtWidgets.QTableWidgetItem(f"{max_level:.1f}"))
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            min_level = peak.get('min_level_dbm', peak['level_dbm'])
            history_table.setItem(row, 3, QtWidgets.QTableWidgetItem(f"{min_level:.1f}"))
            
            # –®–∏—Ä–∏–Ω–∞
            history_table.setItem(row, 4, QtWidgets.QTableWidgetItem(f"{peak['width_khz']:.1f}"))
            
            # –¢–∏–ø
            history_table.setItem(row, 5, QtWidgets.QTableWidgetItem(peak['signal_type']))
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π
            count = peak.get('detection_count', 1)
            history_table.setItem(row, 6, QtWidgets.QTableWidgetItem(str(count)))
            
            # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
            last_seen = peak.get('last_seen', 0)
            if last_seen > 0:
                from datetime import datetime
                dt = datetime.fromtimestamp(last_seen)
                time_str = dt.strftime("%H:%M:%S")
            else:
                time_str = "‚Äî"
            history_table.setItem(row, 7, QtWidgets.QTableWidgetItem(time_str))
        
        layout.addWidget(history_table)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QtWidgets.QHBoxLayout()
        btn_export_history = QtWidgets.QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏")
        btn_clear_history = QtWidgets.QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        btn_close = QtWidgets.QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        
        btn_export_history.clicked.connect(lambda: self._export_history())
        btn_clear_history.clicked.connect(lambda: self._clear_history(dialog))
        btn_close.clicked.connect(dialog.accept)
        
        buttons_layout.addWidget(btn_export_history)
        buttons_layout.addWidget(btn_clear_history)
        buttons_layout.addStretch()
        buttons_layout.addWidget(btn_close)
        
        layout.addLayout(buttons_layout)
        
        dialog.exec_()
            
    def _export_history(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ CSV —Ñ–∞–π–ª."""
        if not self._peaks_history:
            QtWidgets.QMessageBox.warning(self, "–≠–∫—Å–ø–æ—Ä—Ç", "–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—É—Å—Ç–∞")
            return
            
        from PyQt5.QtWidgets import QFileDialog
        from PyQt5.QtCore import QDateTime
        
        default_name = f"peaks_history_{QDateTime.currentDateTime().toString('yyyyMMdd_HHmmss')}.csv"
        path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", default_name, "CSV files (*.csv)"
        )
        
        if not path:
            return
            
        try:
            with open(path, 'w', encoding='utf-8') as f:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                f.write("–ß–∞—Å—Ç–æ—Ç–∞ (–ú–ì—Ü),–£—Ä–æ–≤–µ–Ω—å (–¥–ë–º),–ú–∞–∫—Å (–¥–ë–º),–ú–∏–Ω (–¥–ë–º),"
                        "–®–∏—Ä–∏–Ω–∞ (–∫–ì—Ü),–¢–∏–ø,–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π,–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑\n")
                
                # –î–∞–Ω–Ω—ã–µ
                for peak in self._peaks_history:
                    last_seen = peak.get('last_seen', 0)
                    if last_seen > 0:
                        from datetime import datetime
                        dt = datetime.fromtimestamp(last_seen)
                        time_str = dt.strftime("%H:%M:%S")
                    else:
                        time_str = "‚Äî"
                        
                    f.write(f"{peak['freq_mhz']:.3f},{peak['level_dbm']:.1f},"
                           f"{peak.get('max_level_dbm', peak['level_dbm']):.1f},"
                           f"{peak.get('min_level_dbm', peak['level_dbm']):.1f},"
                           f"{peak['width_khz']:.1f},{peak['signal_type']},"
                           f"{peak.get('detection_count', 1)},{time_str}\n")
            
            QtWidgets.QMessageBox.information(
                self, "–≠–∫—Å–ø–æ—Ä—Ç", 
                f"–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤:\n{path}"
            )
        except Exception as e:
            QtWidgets.QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:\n{str(e)}"
            )
            
    def _clear_history(self, dialog=None):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        reply = QtWidgets.QMessageBox.question(
            self, "–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.No
        )
        
        if reply == QtWidgets.QMessageBox.Yes:
            self._peaks_history.clear()
            if dialog:
                dialog.accept()
            QtWidgets.QMessageBox.information(self, "–ò—Å—Ç–æ—Ä–∏—è", "–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω–∞")
            
    def _calculate_peak_width(self, peak_idx: int) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —à–∏—Ä–∏–Ω—É –ø–∏–∫–∞ –≤ –±–∏–Ω–∞—Ö."""
        if self._row is None or peak_idx < 0 or peak_idx >= len(self._row):
            return 0
            
        peak_level = self._row[peak_idx]
        threshold_3db = peak_level - 3.0
        
        # –ò—â–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ -3dB
        left = peak_idx
        while left > 0 and self._row[left] > threshold_3db:
            left -= 1
            
        right = peak_idx
        while right < len(self._row) - 1 and self._row[right] > threshold_3db:
            right += 1
            
        return right - left + 1
        
    def _analyze_peak(self, peak_idx: int, threshold: float) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–∏–∫–∞."""
        freq_mhz = self._freqs[peak_idx] / 1e6
        level_dbm = self._row[peak_idx]
        
        # –®–∏—Ä–∏–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ -3dB
        peak_level = self._row[peak_idx]
        threshold_3db = peak_level - 3.0
        
        left = peak_idx
        while left > 0 and self._row[left] > threshold_3db:
            left -= 1
            
        right = peak_idx
        while right < len(self._row) - 1 and self._row[right] > threshold_3db:
            right += 1
            
        if len(self._freqs) > 1:
            width_hz = self._freqs[right] - self._freqs[left]
            width_khz = width_hz / 1000
        else:
            width_khz = 0
            
        # Q-—Ñ–∞–∫—Ç–æ—Ä (–¥–æ–±—Ä–æ—Ç–Ω–æ—Å—Ç—å)
        q_factor = (freq_mhz * 1000) / width_khz if width_khz > 0 else 0
        
        # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–¥ –ø–æ—Ä–æ–≥–æ–º
        snr = level_dbm - threshold
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —à–∏—Ä–∏–Ω–µ –ø–æ–ª–æ—Å—ã
        if width_khz < 25:
            signal_type = "–£–∑–∫–æ–ø–æ–ª–æ—Å–Ω—ã–π"
        elif width_khz < 200:
            signal_type = "–°—Ä–µ–¥–Ω–µ–ø–æ–ª–æ—Å–Ω—ã–π"
        else:
            signal_type = "–®–∏—Ä–æ–∫–æ–ø–æ–ª–æ—Å–Ω—ã–π"
            
        return {
            'index': peak_idx,
            'freq_mhz': float(freq_mhz),
            'level_dbm': float(level_dbm),
            'snr_db': float(snr),
            'width_khz': float(width_khz),
            'q_factor': float(q_factor),
            'type': signal_type
        }
        
    def _filter_close_peaks(self, peaks: List[dict], min_distance_bins: int) -> List[dict]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –±–ª–∏–∑–∫–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∏–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è —Å–∏–ª—å–Ω–µ–π—à–∏–µ."""
        if not peaks or min_distance_bins <= 1:
            return peaks
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é (—Å–∏–ª—å–Ω–µ–π—à–∏–µ –ø–µ—Ä–≤—ã–µ)
        sorted_peaks = sorted(peaks, key=lambda x: x['level_dbm'], reverse=True)
        
        filtered = []
        used_indices = set()
        
        for peak in sorted_peaks:
            idx = peak['index']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±–ª–∏–∑–∫–æ –∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
            too_close = False
            for used_idx in used_indices:
                if abs(idx - used_idx) < min_distance_bins:
                    too_close = True
                    break
                    
            if not too_close:
                filtered.append(peak)
                used_indices.add(idx)
                
        return filtered
        
    def _fill_table(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø–∏–∫–∞–º–∏."""
        self.table.setRowCount(len(self._last_peaks))
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ü–≤–µ—Ç–∞
        colors = {
        'very_strong': QtGui.QColor(255, 100, 100),  # –ö—Ä–∞—Å–Ω—ã–π
        'strong': QtGui.QColor(255, 200, 100),       # –û—Ä–∞–Ω–∂–µ–≤—ã–π  
        'medium': QtGui.QColor(100, 255, 100),       # –ó–µ–ª–µ–Ω—ã–π
        'weak': QtGui.QColor(100, 150, 255)          # –ì–æ–ª—É–±–æ–π
        }
    
        
        for row, peak in enumerate(self._last_peaks):
            # –ß–∞—Å—Ç–æ—Ç–∞
            freq_item = QtWidgets.QTableWidgetItem(f"{peak['freq_mhz']:.6f}")
            freq_item.setTextAlignment(QtCore.Qt.AlignCenter)
            self.table.setItem(row, 0, freq_item)
            
            # –£—Ä–æ–≤–µ–Ω—å
            level_item = QtWidgets.QTableWidgetItem(f"{peak['level_dbm']:.1f}")
            level_item.setTextAlignment(QtCore.Qt.AlignCenter)
            
            # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—é
            level = peak['level_dbm']
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –ø–æ —É—Ä–æ–≤–Ω—é
            level = peak['level_dbm']
            if level >= -30:
                color = colors['very_strong']
            elif level >= -50:
                color = colors['strong']
            elif level >= -70:
                color = colors['medium']
            else:
                color = colors['weak']

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Å —É—á–µ—Ç–æ–º —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            level_item.setBackground(QtGui.QBrush(color))
            level_item.setForeground(QtGui.QBrush(QtCore.Qt.white))
            self.table.setItem(row, 1, level_item)
            
            # SNR (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–¥ –ø–æ—Ä–æ–≥–æ–º)
            snr_item = QtWidgets.QTableWidgetItem(f"+{peak['snr_db']:.1f}")
            snr_item.setTextAlignment(QtCore.Qt.AlignCenter)
            
            # –¶–≤–µ—Ç –ø–æ SNR
            if peak['snr_db'] > 20:
                snr_item.setForeground(QtGui.QBrush(QtGui.QColor(0, 200, 0)))
            elif peak['snr_db'] > 10:
                snr_item.setForeground(QtGui.QBrush(QtGui.QColor(200, 200, 0)))
            else:
                snr_item.setForeground(QtGui.QBrush(QtGui.QColor(200, 0, 0)))
                
            self.table.setItem(row, 2, snr_item)
            
            # –®–∏—Ä–∏–Ω–∞
            width_item = QtWidgets.QTableWidgetItem(f"{peak['width_khz']:.1f}")
            width_item.setTextAlignment(QtCore.Qt.AlignCenter)
            self.table.setItem(row, 3, width_item)
            
            # Q-—Ñ–∞–∫—Ç–æ—Ä
            q_item = QtWidgets.QTableWidgetItem(f"{peak['q_factor']:.0f}")
            q_item.setTextAlignment(QtCore.Qt.AlignCenter)
            self.table.setItem(row, 4, q_item)
            
            # –¢–∏–ø
            type_item = QtWidgets.QTableWidgetItem(peak['type'])
            type_item.setTextAlignment(QtCore.Qt.AlignCenter)
            self.table.setItem(row, 5, type_item)
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.lbl_peaks_count.setText(f"–ü–∏–∫–æ–≤: {len(self._last_peaks)}")
        
    def _on_double_click(self, index):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —á–∞—Å—Ç–æ—Ç–µ –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É."""
        row = index.row()
        if 0 <= row < len(self._last_peaks):
            peak = self._last_peaks[row]
            self.goToFreq.emit(peak['freq_mhz'] * 1e6)
            
    def _clear_peaks(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∏–∫–æ–≤."""
        self._last_peaks = []
        self.table.setRowCount(0)
        self.lbl_peaks_count.setText("–ü–∏–∫–æ–≤: 0")
        
    def _export_peaks(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–∏–∫–æ–≤ –≤ CSV."""
        if not self._last_peaks:
            QtWidgets.QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", "–ù–µ—Ç –ø–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
            
        from PyQt5.QtCore import QDateTime
        default_name = f"peaks_{QDateTime.currentDateTime().toString('yyyyMMdd_HHmmss')}.csv"
        
        path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∏–∫–∏", default_name, "CSV files (*.csv)"
        )
        if not path:
            return
            
        try:
            import csv
            with open(path, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow(['freq_mhz', 'level_dbm', 'snr_db', 'width_khz', 'q_factor', 'type'])
                
                for peak in self._last_peaks:
                    writer.writerow([
                        f"{peak['freq_mhz']:.6f}",
                        f"{peak['level_dbm']:.2f}",
                        f"{peak['snr_db']:.2f}",
                        f"{peak['width_khz']:.1f}",
                        f"{peak['q_factor']:.0f}",
                        peak['type']
                    ])
                    
            QtWidgets.QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", 
                f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self._last_peaks)} –ø–∏–∫–æ–≤ –≤:\n{path}")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")