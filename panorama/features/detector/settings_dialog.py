#!/usr/bin/env python3
"""
–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Master sweep.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Ä–æ–≥–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã watchlist –¥–ª—è Slave.
"""

from __future__ import annotations

import json
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, List, Optional, Tuple

from PyQt5 import QtCore, QtGui, QtWidgets


@dataclass
class DetectorSettings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞."""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    enabled: bool = True
    auto_start: bool = True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ Master

    # –ü–æ—Ä–æ–≥–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
    threshold_mode: str = "adaptive"  # "adaptive" –∏–ª–∏ "fixed"
    baseline_offset_db: float = 20.0  # –î–ª—è adaptive: baseline + offset
    fixed_threshold_dbm: float = -70.0  # –î–ª—è fixed —Ä–µ–∂–∏–º–∞

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
    min_snr_db: float = 10.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π SNR –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
    min_peak_width_bins: int = 3  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –ø–∏–∫–∞
    min_peak_distance_bins: int = 5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ (–≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å –∏ –≥—Ä–∞–Ω–∏—Ü—ã)
    hysteresis_high_db: float = 10.0
    hysteresis_low_db: float = 5.0
    bridge_gap_bins: int = 4
    boundary_end_delta_db: float = 1.2
    edge_min_run_bins: int = 3
    prefilter_median_bins: int = 5
    min_region_occupancy: float = 0.40
    min_region_area: float = 3.0

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Slave watchlist –∏ RMS —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
    watchlist_dwell_ms: int = 150  # –í—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
    max_watchlist_size: int = 20  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞

    # RMS –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏ (–µ–¥–∏–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
    rms_halfspan_mhz: float = 2.5  # –ü–æ–ª—É—à–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å—ã –¥–ª—è RMS —Ä–∞—Å—á–µ—Ç–∞
    center_mode: str = "fmax"  # "fmax" | "centroid"

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    peak_timeout_sec: float = 5.0  # –¢–∞–π–º–∞—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫–æ–≤
    measurement_interval_sec: float = 1.0  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏
    min_confirmation_sweeps: int = 3  # –ú–∏–Ω–∏–º—É–º —Å–≤–∏–ø–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∏–∫–∞

    # –§–∏–ª—å—Ç—Ä—ã —á–∞—Å—Ç–æ—Ç
    frequency_ranges: List[Tuple[float, float]] = None  # –°–ø–∏—Å–æ–∫ (start_mhz, stop_mhz)
    exclude_ranges: List[Tuple[float, float]] = None  # –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã

    def __post_init__(self):
        if self.frequency_ranges is None:
            self.frequency_ranges = []
        if self.exclude_ranges is None:
            self.exclude_ranges = []

    def to_dict(self) -> dict:
        return {
            'enabled': self.enabled,
            'auto_start': self.auto_start,
            'threshold_mode': self.threshold_mode,
            'baseline_offset_db': self.baseline_offset_db,
            'fixed_threshold_dbm': self.fixed_threshold_dbm,
            'min_snr_db': self.min_snr_db,
            'min_peak_width_bins': self.min_peak_width_bins,
            'min_peak_distance_bins': self.min_peak_distance_bins,
            'hysteresis_high_db': self.hysteresis_high_db,
            'hysteresis_low_db': self.hysteresis_low_db,
            'bridge_gap_bins': self.bridge_gap_bins,
            'boundary_end_delta_db': self.boundary_end_delta_db,
            'edge_min_run_bins': self.edge_min_run_bins,
            'prefilter_median_bins': self.prefilter_median_bins,
            'min_region_occupancy': self.min_region_occupancy,
            'min_region_area': self.min_region_area,
            'watchlist_dwell_ms': self.watchlist_dwell_ms,
            'max_watchlist_size': self.max_watchlist_size,
            'rms_halfspan_mhz': self.rms_halfspan_mhz,
            'center_mode': self.center_mode,
            'peak_timeout_sec': self.peak_timeout_sec,
            'measurement_interval_sec': self.measurement_interval_sec,
            'min_confirmation_sweeps': self.min_confirmation_sweeps,
            'frequency_ranges': self.frequency_ranges,
            'exclude_ranges': self.exclude_ranges
        }

    @classmethod
    def from_dict(cls, data: dict):
        return cls(**{k: v for k, v in data.items() if k in cls.__dataclass_fields__})


class DetectorSettingsDialog(QtWidgets.QDialog):
    """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞."""

    settingsChanged = QtCore.pyqtSignal(object)  # DetectorSettings

    def __init__(self, parent=None, current_settings: DetectorSettings = None):
        super().__init__(parent)
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞")
        self.resize(800, 600)

        self._settings_path = Path.home() / ".panorama" / "signal_processing_settings.json"
        self.settings = current_settings or self._load_from_disk() or DetectorSettings()

        self._build_ui()
        self._load_settings()
        self._connect_signals()

    def _build_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        layout = QtWidgets.QVBoxLayout(self)

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        tabs = QtWidgets.QTabWidget()

        # –í–∫–ª–∞–¥–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        basic_tab = self._create_basic_tab()
        tabs.addTab(basic_tab, "–û—Å–Ω–æ–≤–Ω—ã–µ")

        # –í–∫–ª–∞–¥–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ä–∞–Ω–µ–µ: –ü–æ—Ä–æ–≥–∏)
        threshold_tab = self._create_threshold_tab()
        tabs.addTab(threshold_tab, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")

        # –í–∫–ª–∞–¥–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è Slave
        slave_tab = self._create_slave_tab()
        tabs.addTab(slave_tab, "Slave Watchlist")

        # –£–¥–∞–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–∞—Å—Ç–æ—Ç (—Å–∫–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å –º–∞—Å—Ç–µ—Ä-–¥–∏–∞–ø–∞–∑–æ–Ω)

        layout.addWidget(tabs)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.Ok |
            QtWidgets.QDialogButtonBox.Cancel |
            QtWidgets.QDialogButtonBox.Apply
        )
        buttons.accepted.connect(self._save_and_close)
        buttons.rejected.connect(self.reject)
        buttons.button(QtWidgets.QDialogButtonBox.Apply).clicked.connect(self._apply_settings)

        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤
        preset_layout = QtWidgets.QHBoxLayout()
        btn_preset_sensitive = QtWidgets.QPushButton("üì° –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π")
        btn_preset_sensitive.clicked.connect(lambda: self._load_preset("sensitive"))
        btn_preset_normal = QtWidgets.QPushButton("‚öñÔ∏è –ù–æ—Ä–º–∞–ª—å–Ω—ã–π")
        btn_preset_normal.clicked.connect(lambda: self._load_preset("normal"))
        btn_preset_robust = QtWidgets.QPushButton("üõ°Ô∏è –£—Å—Ç–æ–π—á–∏–≤—ã–π")
        btn_preset_robust.clicked.connect(lambda: self._load_preset("robust"))

        preset_layout.addWidget(QtWidgets.QLabel("–ü—Ä–µ—Å–µ—Ç—ã:"))
        preset_layout.addWidget(btn_preset_sensitive)
        preset_layout.addWidget(btn_preset_normal)
        preset_layout.addWidget(btn_preset_robust)
        preset_layout.addStretch()

        layout.addLayout(preset_layout)
        layout.addWidget(buttons)

    def _create_basic_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        widget = QtWidgets.QWidget()
        layout = QtWidgets.QFormLayout(widget)

        # –í–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        self.chk_enabled = QtWidgets.QCheckBox("–î–µ—Ç–µ–∫—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω")
        self.chk_enabled.setChecked(self.settings.enabled)
        layout.addRow(self.chk_enabled)

        # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
        self.chk_auto_start = QtWidgets.QCheckBox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ Master sweep")
        self.chk_auto_start.setChecked(self.settings.auto_start)
        layout.addRow(self.chk_auto_start)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        layout.addRow(QtWidgets.QLabel())

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QtWidgets.QLabel(
            "<i>–î–µ—Ç–µ–∫—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø–∏–∫–∏ –≤ —Å–ø–µ–∫—Ç—Ä–µ –æ—Ç Master sweep "
            "–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ Slave watchlist –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è RSSI –∏ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏.</i>"
        )
        info_label.setWordWrap(True)
        layout.addRow(info_label)

        return widget

    def _create_threshold_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π layout —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π)."""
        content = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(content)
        layout.setContentsMargins(12, 12, 12, 12)
        layout.setSpacing(10)

        # –†–µ–∂–∏–º –ø–æ—Ä–æ–≥–∞
        mode_group = QtWidgets.QGroupBox("–†–µ–∂–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞")
        mode_layout = QtWidgets.QVBoxLayout(mode_group)

        self.radio_adaptive = QtWidgets.QRadioButton("–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π (baseline + offset)")
        self.radio_fixed = QtWidgets.QRadioButton("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥")

        if self.settings.threshold_mode == "adaptive":
            self.radio_adaptive.setChecked(True)
        else:
            self.radio_fixed.setChecked(True)

        mode_layout.addWidget(self.radio_adaptive)
        mode_layout.addWidget(self.radio_fixed)
        layout.addWidget(mode_group)
        # –ü–æ—è—Å–Ω–µ–Ω–∏–µ
        mode_info = QtWidgets.QLabel(
            "<i>–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π: –ø–æ—Ä–æ–≥ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ baseline + offset. \n"
            "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–ë–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è.</i>"
        )
        mode_info.setWordWrap(True)
        layout.addWidget(mode_info)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
        adaptive_group = QtWidgets.QGroupBox("–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥")
        adaptive_layout = QtWidgets.QFormLayout(adaptive_group)
        adaptive_layout.setRowWrapPolicy(QtWidgets.QFormLayout.WrapAllRows)
        adaptive_layout.setFieldGrowthPolicy(QtWidgets.QFormLayout.AllNonFixedFieldsGrow)
        adaptive_layout.setLabelAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        adaptive_layout.setFormAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)

        self.spin_baseline_offset = QtWidgets.QDoubleSpinBox()
        self.spin_baseline_offset.setRange(5.0, 50.0)
        self.spin_baseline_offset.setValue(self.settings.baseline_offset_db)
        self.spin_baseline_offset.setSuffix(" –¥–ë")
        self.spin_baseline_offset.setMaximumWidth(180)
        self.spin_baseline_offset.setToolTip("–ü–æ—Ä–æ–≥ = baseline + —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ")
        adaptive_layout.addRow("Offset –Ω–∞–¥ baseline:", self.spin_baseline_offset)
        adaptive_expl = QtWidgets.QLabel("<i>–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã—à–µ —à—É–º–æ–≤–æ–≥–æ –ø–æ–ª–∞ (baseline) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∏–≥–Ω–∞–ª, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º.</i>")
        adaptive_expl.setWordWrap(True)
        adaptive_expl.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        adaptive_layout.addRow("", adaptive_expl)

        adaptive_info = QtWidgets.QLabel(
            "<i>Baseline –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ –º–µ–¥–∏–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å–≤–∏–ø–æ–≤. "
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 15-25 –¥–ë –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π, "
            "10-15 –¥–ë –¥–ª—è —Å–ª–∞–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.</i>"
        )
        adaptive_info.setWordWrap(True)
        adaptive_layout.addRow(adaptive_info)

        layout.addWidget(adaptive_group)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
        fixed_group = QtWidgets.QGroupBox("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥")
        fixed_layout = QtWidgets.QFormLayout(fixed_group)
        fixed_layout.setRowWrapPolicy(QtWidgets.QFormLayout.WrapAllRows)
        fixed_layout.setFieldGrowthPolicy(QtWidgets.QFormLayout.AllNonFixedFieldsGrow)
        fixed_layout.setLabelAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        fixed_layout.setFormAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)

        self.spin_fixed_threshold = QtWidgets.QDoubleSpinBox()
        self.spin_fixed_threshold.setRange(-120.0, 0.0)
        self.spin_fixed_threshold.setValue(self.settings.fixed_threshold_dbm)
        self.spin_fixed_threshold.setSuffix(" –¥–ë–º")
        self.spin_fixed_threshold.setMaximumWidth(180)
        fixed_layout.addRow("–ü–æ—Ä–æ–≥:", self.spin_fixed_threshold)
        fixed_expl = QtWidgets.QLabel("<i>–ê–±—Å–æ–ª—é—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –º–æ—â–Ω–æ—Å—Ç–∏, –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª.</i>")
        fixed_expl.setWordWrap(True)
        fixed_expl.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        fixed_layout.addRow("", fixed_expl)

        layout.addWidget(fixed_group)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–∏–∫–æ–≤
        detection_group = QtWidgets.QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–∏–∫–æ–≤")
        detection_layout = QtWidgets.QFormLayout(detection_group)
        detection_layout.setRowWrapPolicy(QtWidgets.QFormLayout.WrapAllRows)
        detection_layout.setFieldGrowthPolicy(QtWidgets.QFormLayout.AllNonFixedFieldsGrow)
        detection_layout.setLabelAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        detection_layout.setFormAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)

        self.spin_min_snr = QtWidgets.QDoubleSpinBox()
        self.spin_min_snr.setRange(3.0, 50.0)
        self.spin_min_snr.setValue(self.settings.min_snr_db)
        self.spin_min_snr.setSuffix(" –¥–ë")
        self.spin_min_snr.setMaximumWidth(180)
        self.spin_min_snr.setToolTip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª/—à—É–º –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏")
        detection_layout.addRow("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π SNR:", self.spin_min_snr)
        lbl_snr = QtWidgets.QLabel("<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–∏–∫–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º –∏ baseline –¥–ª—è —É—á–µ—Ç–∞ –ø–∏–∫–∞ (–≤ –¥–ë).</i>")
        lbl_snr.setWordWrap(True)
        lbl_snr.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        detection_layout.addRow("", lbl_snr)

        self.spin_min_width = QtWidgets.QSpinBox()
        self.spin_min_width.setRange(1, 20)
        self.spin_min_width.setValue(self.settings.min_peak_width_bins)
        self.spin_min_width.setSuffix(" –±–∏–Ω–æ–≤")
        self.spin_min_width.setMaximumWidth(180)
        self.spin_min_width.setToolTip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –ø–∏–∫–∞ –≤ –±–∏–Ω–∞—Ö")
        detection_layout.addRow("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞:", self.spin_min_width)
        lbl_width = QtWidgets.QLabel("<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ—Å–µ–¥–Ω–∏—Ö –±–∏–Ω–æ–≤ –Ω–∞–¥ –ø–æ—Ä–æ–≥–æ–º, —á—Ç–æ–±—ã —Ä–µ–≥–∏–æ–Ω —Å—á–∏—Ç–∞–ª—Å—è —Å–∏–≥–Ω–∞–ª–æ–º.</i>")
        lbl_width.setWordWrap(True)
        detection_layout.addRow("", lbl_width)

        self.spin_min_distance = QtWidgets.QSpinBox()
        self.spin_min_distance.setRange(1, 50)
        self.spin_min_distance.setValue(self.settings.min_peak_distance_bins)
        self.spin_min_distance.setSuffix(" –±–∏–Ω–æ–≤")
        self.spin_min_distance.setMaximumWidth(180)
        self.spin_min_distance.setToolTip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏")
        detection_layout.addRow("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:", self.spin_min_distance)
        lbl_dist = QtWidgets.QLabel("<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∑–æ—Ä –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏ (–≤ –±–∏–Ω–∞—Ö), —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ —Å–ª–∏–≤–∞–ª–∏—Å—å –≤ –æ–¥–∏–Ω.</i>")
        lbl_dist.setWordWrap(True)
        detection_layout.addRow("", lbl_dist)

        # –ì–∏—Å—Ç–µ—Ä–µ–∑–∏—Å (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        self.spin_hyst_high = QtWidgets.QDoubleSpinBox()
        self.spin_hyst_high.setRange(5.0, 30.0)
        self.spin_hyst_high.setValue(self.settings.hysteresis_high_db)
        self.spin_hyst_high.setSuffix(" –¥–ë")
        self.spin_hyst_high.setMaximumWidth(180)
        detection_layout.addRow("–ì–∏—Å—Ç–µ—Ä–µ–∑–∏—Å ‚Äî –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥:", self.spin_hyst_high)

        self.spin_hyst_low = QtWidgets.QDoubleSpinBox()
        self.spin_hyst_low.setRange(1.0, 25.0)
        self.spin_hyst_low.setValue(self.settings.hysteresis_low_db)
        self.spin_hyst_low.setSuffix(" –¥–ë")
        self.spin_hyst_low.setMaximumWidth(180)
        detection_layout.addRow("–ì–∏—Å—Ç–µ—Ä–µ–∑–∏—Å ‚Äî –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥:", self.spin_hyst_low)

        self.spin_bridge = QtWidgets.QSpinBox()
        self.spin_bridge.setRange(0, 20)
        self.spin_bridge.setValue(self.settings.bridge_gap_bins)
        self.spin_bridge.setSuffix(" –±–∏–Ω–æ–≤")
        self.spin_bridge.setMaximumWidth(180)
        detection_layout.addRow("–î–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑—Ä—ã–≤ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–æ—Å—ã:", self.spin_bridge)

        self.spin_boundary_delta = QtWidgets.QDoubleSpinBox()
        self.spin_boundary_delta.setRange(0.1, 5.0)
        self.spin_boundary_delta.setSingleStep(0.1)
        self.spin_boundary_delta.setValue(self.settings.boundary_end_delta_db)
        self.spin_boundary_delta.setSuffix(" –¥–ë")
        self.spin_boundary_delta.setMaximumWidth(180)
        detection_layout.addRow("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ baseline ¬±:", self.spin_boundary_delta)

        self.spin_edge_run = QtWidgets.QSpinBox()
        self.spin_edge_run.setRange(1, 20)
        self.spin_edge_run.setValue(self.settings.edge_min_run_bins)
        self.spin_edge_run.setSuffix(" –±–∏–Ω–æ–≤")
        self.spin_edge_run.setMaximumWidth(180)
        detection_layout.addRow("–ü–æ–¥—Ä—è–¥ –±–∏–Ω–æ–≤ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∫—Ä–∞—è:", self.spin_edge_run)

        # –ê–Ω—Ç–∏‚Äë–≤—ã–±—Ä–æ—Å—ã
        self.spin_pref_median = QtWidgets.QSpinBox()
        self.spin_pref_median.setRange(0, 99)
        self.spin_pref_median.setValue(self.settings.prefilter_median_bins)
        self.spin_pref_median.setSuffix(" –±–∏–Ω–æ–≤")
        self.spin_pref_median.setMaximumWidth(180)
        detection_layout.addRow("–°–∫–æ–ª—å–∑—è—â–∞—è –º–µ–¥–∏–∞–Ω–∞ (–ø—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä):", self.spin_pref_median)

        self.spin_occupancy = QtWidgets.QDoubleSpinBox()
        self.spin_occupancy.setRange(0.0, 1.0)
        self.spin_occupancy.setSingleStep(0.05)
        self.spin_occupancy.setValue(self.settings.min_region_occupancy)
        self.spin_occupancy.setSuffix(" –¥–æ–ª—è")
        self.spin_occupancy.setMaximumWidth(180)
        detection_layout.addRow("–ú–∏–Ω. –∑–∞–Ω—è—Ç–æ—Å—Ç—å —Ä–µ–≥–∏–æ–Ω–∞ (0..1):", self.spin_occupancy)

        self.spin_area = QtWidgets.QDoubleSpinBox()
        self.spin_area.setRange(0.0, 1000.0)
        self.spin_area.setSingleStep(0.5)
        self.spin_area.setValue(self.settings.min_region_area)
        self.spin_area.setSuffix(" –¥–ë¬∑–±–∏–Ω")
        self.spin_area.setMaximumWidth(180)
        detection_layout.addRow("–ú–∏–Ω. –ø–ª–æ—â–∞–¥—å SNR:", self.spin_area)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Å—é–¥–∞ –∏–∑ –û—Å–Ω–æ–≤–Ω—ã—Ö)
        confirm_group = QtWidgets.QGroupBox("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
        confirm_layout = QtWidgets.QFormLayout(confirm_group)
        confirm_layout.setRowWrapPolicy(QtWidgets.QFormLayout.WrapAllRows)
        confirm_layout.setFieldGrowthPolicy(QtWidgets.QFormLayout.AllNonFixedFieldsGrow)
        confirm_layout.setLabelAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        confirm_layout.setFormAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.spin_confirmation_sweeps = QtWidgets.QSpinBox()
        self.spin_confirmation_sweeps.setRange(1, 10)
        self.spin_confirmation_sweeps.setValue(self.settings.min_confirmation_sweeps)
        self.spin_confirmation_sweeps.setSuffix(" —Å–≤–∏–ø–æ–≤")
        self.spin_confirmation_sweeps.setMaximumWidth(180)
        self.spin_confirmation_sweeps.setToolTip("–°–∫–æ–ª—å–∫–æ —Å–≤–∏–ø–æ–≤ –ø–æ–¥—Ä—è–¥ —Å–∏–≥–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –Ω–∞–±–ª—é–¥–∞—Ç—å—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        confirm_layout.addRow("–°–≤–∏–ø–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", self.spin_confirmation_sweeps)
        lbl_conf = QtWidgets.QLabel("<i>–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≤—ã—à–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏, —É–º–µ–Ω—å—à–∞—è –ª–æ–∂–Ω—ã–µ –ø—É—Å–∫–∏.</i>")
        lbl_conf.setWordWrap(True)
        confirm_layout.addRow("", lbl_conf)
        layout.addWidget(confirm_group)

        layout.addWidget(detection_group)
        layout.addStretch()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤
        self._update_threshold_widgets()

        scroll = QtWidgets.QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setFrameShape(QtWidgets.QFrame.NoFrame)
        scroll.setWidget(content)
        return scroll

    def _create_slave_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è Slave watchlist (—Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏)."""
        content = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(content)
        layout.setContentsMargins(12, 12, 12, 12)
        layout.setSpacing(10)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã watchlist
        watchlist_group = QtWidgets.QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã Watchlist")
        watchlist_layout = QtWidgets.QFormLayout(watchlist_group)
        watchlist_layout.setRowWrapPolicy(QtWidgets.QFormLayout.WrapAllRows)
        watchlist_layout.setFieldGrowthPolicy(QtWidgets.QFormLayout.AllNonFixedFieldsGrow)
        watchlist_layout.setLabelAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        watchlist_layout.setFormAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)

        # RMS Halfspan parameter (–µ–¥–∏–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤—Å–µ—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π)
        self.spin_rms_halfspan = QtWidgets.QDoubleSpinBox()
        self.spin_rms_halfspan.setRange(1.0, 10.0)
        self.spin_rms_halfspan.setSingleStep(0.1)
        self.spin_rms_halfspan.setValue(getattr(self.settings, 'rms_halfspan_mhz', 2.5))
        self.spin_rms_halfspan.setSuffix(" –ú–ì—Ü")
        self.spin_rms_halfspan.setToolTip("–ü–æ–ª—É—à–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RMS –≤ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏ (–æ—Ç F_max ¬± halfspan)")
        self.spin_rms_halfspan.setMaximumWidth(180)
        watchlist_layout.addRow("RMS –ø–æ–ª—É—à–∏—Ä–∏–Ω–∞:", self.spin_rms_halfspan)
        lbl_rms = QtWidgets.QLabel("<i>–ü–æ–ª—É—à–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å—ã –¥–ª—è RMS –∏–∑–º–µ—Ä–µ–Ω–∏–π Slaves. –ü–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞ = 2√óhalfspan. Slaves –∏–∑–º–µ—Ä—è—é—Ç —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π RSSI –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ F_max ¬± halfspan –¥–ª—è —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏.</i>")
        lbl_rms.setWordWrap(True)
        lbl_rms.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        watchlist_layout.addRow("", lbl_rms)

        # –†–µ–∂–∏–º —Ü–µ–Ω—Ç—Ä–∞: F_max –∏–ª–∏ —Ü–µ–Ω—Ç—Ä–æ–∏–¥
        self.combo_center_mode = QtWidgets.QComboBox()
        self.combo_center_mode.addItems(["F_max", "Centroid"])
        try:
            current_mode = getattr(self.settings, 'center_mode', 'fmax')
            self.combo_center_mode.setCurrentIndex(0 if current_mode == 'fmax' else 1)
        except Exception:
            self.combo_center_mode.setCurrentIndex(0)
        self.combo_center_mode.setToolTip("–ß–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–∏: F_max –∏–ª–∏ —Ü–µ–Ω—Ç—Ä–æ–∏–¥ –∫–ª–∞—Å—Ç–µ—Ä–∞")
        watchlist_layout.addRow("–¶–µ–Ω—Ç—Ä –ø–æ–ª–æ—Å—ã:", self.combo_center_mode)

        self.spin_watchlist_dwell = QtWidgets.QSpinBox()
        self.spin_watchlist_dwell.setRange(10, 1000)
        self.spin_watchlist_dwell.setValue(self.settings.watchlist_dwell_ms)
        self.spin_watchlist_dwell.setSuffix(" –º—Å")
        self.spin_watchlist_dwell.setToolTip("–í—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è RSSI")
        self.spin_watchlist_dwell.setMaximumWidth(180)
        watchlist_layout.addRow("Dwell time:", self.spin_watchlist_dwell)
        lbl_dwell = QtWidgets.QLabel("<i>–í—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–æ—Ç–Ω–æ–π –ø–æ–ª–æ—Å–µ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è RSSI.</i>")
        lbl_dwell.setWordWrap(True)
        lbl_dwell.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        watchlist_layout.addRow("", lbl_dwell)

        self.spin_max_watchlist = QtWidgets.QSpinBox()
        self.spin_max_watchlist.setRange(1, 100)
        self.spin_max_watchlist.setValue(self.settings.max_watchlist_size)
        self.spin_max_watchlist.setToolTip("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π –≤ watchlist")
        self.spin_max_watchlist.setMaximumWidth(180)
        watchlist_layout.addRow("–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞:", self.spin_max_watchlist)
        lbl_max = QtWidgets.QLabel("<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ü–µ–ª–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç).</i>")
        lbl_max.setWordWrap(True)
        lbl_max.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        watchlist_layout.addRow("", lbl_max)

        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RMS (—Å–µ–∫—É–Ω–¥—ã)
        self.spin_rms_interval_sec = QtWidgets.QDoubleSpinBox()
        self.spin_rms_interval_sec.setRange(0.1, 10.0)
        self.spin_rms_interval_sec.setSingleStep(0.1)
        self.spin_rms_interval_sec.setValue(float(getattr(self.settings, 'measurement_interval_sec', 1.0)))
        self.spin_rms_interval_sec.setSuffix(" c")
        self.spin_rms_interval_sec.setToolTip("–ö–∞–∫ —á–∞—Å—Ç–æ —Å–ª–µ–π–≤—ã –ø–µ—Ä–µ–∏–∑–º–µ—Ä—è—é—Ç RMS –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏ (—Å–µ–∫)")
        self.spin_rms_interval_sec.setMaximumWidth(180)
        watchlist_layout.addRow("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RMS:", self.spin_rms_interval_sec)
        lbl_int = QtWidgets.QLabel("<i>–ü–µ—Ä–∏–æ–¥ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á –∏–∑–º–µ—Ä–µ–Ω–∏—è RMS. –ú–µ–Ω—å—à–µ ‚Äî —á–∞—â–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –≤—ã—à–µ –Ω–∞–≥—Ä—É–∑–∫–∞.</i>")
        lbl_int.setWordWrap(True)
        lbl_int.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        watchlist_layout.addRow("", lbl_int)

        layout.addWidget(watchlist_group)

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        viz_group = QtWidgets.QGroupBox("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        viz_layout = QtWidgets.QVBoxLayout(viz_group)

        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–º–µ—Ä–∞
        self.example_plot = QtWidgets.QLabel()
        self.example_plot.setMinimumHeight(200)
        self.example_plot.setStyleSheet("""
            QLabel {
                background-color: #2b2b2b;
                border: 1px solid #555;
                border-radius: 4px;
            }
        """)
        self.example_plot.setAlignment(QtCore.Qt.AlignCenter)
        self._update_example_plot()
        viz_layout.addWidget(self.example_plot)

        layout.addWidget(viz_group)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QtWidgets.QLabel(
            "<i>–ö–æ–≥–¥–∞ Master –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø–∏–∫, –µ–≥–æ —á–∞—Å—Ç–æ—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ watchlist. "
            "–ö–∞–∂–¥—ã–π Slave –∏–∑–º–µ—Ä—è–µ—Ç RSSI –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–ª–æ—Å–µ –≤–æ–∫—Ä—É–≥ –ø–∏–∫–∞ –¥–ª—è —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏. "
            "–®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω (–ø–∏–∫ ¬± span/2) –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–≥–æ RSSI.</i>"
        )
        info_label.setWordWrap(True)
        layout.addWidget(info_label)

        layout.addStretch()

        scroll = QtWidgets.QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setFrameShape(QtWidgets.QFrame.NoFrame)
        scroll.setWidget(content)
        return scroll

    def _create_filter_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–∞—Å—Ç–æ—Ç."""
        widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(widget)

        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        include_group = QtWidgets.QGroupBox("–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —á–∞—Å—Ç–æ—Ç")
        include_layout = QtWidgets.QVBoxLayout(include_group)

        self.include_table = QtWidgets.QTableWidget()
        self.include_table.setColumnCount(3)
        self.include_table.setHorizontalHeaderLabels(["–ù–∞—á–∞–ª–æ (–ú–ì—Ü)", "–ö–æ–Ω–µ—Ü (–ú–ì—Ü)", "–£–¥–∞–ª–∏—Ç—å"])
        include_layout.addWidget(self.include_table)

        include_buttons = QtWidgets.QHBoxLayout()
        self.btn_add_include = QtWidgets.QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω")
        self.btn_add_include.clicked.connect(lambda: self._add_range(self.include_table))
        include_buttons.addWidget(self.btn_add_include)
        include_layout.addLayout(include_buttons)

        layout.addWidget(include_group)

        # –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        exclude_group = QtWidgets.QGroupBox("–ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —á–∞—Å—Ç–æ—Ç")
        exclude_layout = QtWidgets.QVBoxLayout(exclude_group)

        self.exclude_table = QtWidgets.QTableWidget()
        self.exclude_table.setColumnCount(3)
        self.exclude_table.setHorizontalHeaderLabels(["–ù–∞—á–∞–ª–æ (–ú–ì—Ü)", "–ö–æ–Ω–µ—Ü (–ú–ì—Ü)", "–£–¥–∞–ª–∏—Ç—å"])
        exclude_layout.addWidget(self.exclude_table)

        exclude_buttons = QtWidgets.QHBoxLayout()
        self.btn_add_exclude = QtWidgets.QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
        self.btn_add_exclude.clicked.connect(lambda: self._add_range(self.exclude_table))
        exclude_buttons.addWidget(self.btn_add_exclude)
        exclude_layout.addLayout(exclude_buttons)

        layout.addWidget(exclude_group)

        # –ü—Ä–µ—Å–µ—Ç—ã –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        preset_buttons = QtWidgets.QHBoxLayout()
        btn_ism = QtWidgets.QPushButton("üìª ISM –¥–∏–∞–ø–∞–∑–æ–Ω—ã")
        btn_ism.clicked.connect(self._preset_ism)
        btn_wifi = QtWidgets.QPushButton("üì∂ WiFi")
        btn_wifi.clicked.connect(self._preset_wifi)
        btn_cellular = QtWidgets.QPushButton("üì± –°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å")
        btn_cellular.clicked.connect(self._preset_cellular)

        preset_buttons.addWidget(QtWidgets.QLabel("–ü—Ä–µ—Å–µ—Ç—ã:"))
        preset_buttons.addWidget(btn_ism)
        preset_buttons.addWidget(btn_wifi)
        preset_buttons.addWidget(btn_cellular)
        preset_buttons.addStretch()

        layout.addLayout(preset_buttons)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        self._load_filters()

        return widget

    def _connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã."""
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ—Ä–æ–≥–∞
        self.radio_adaptive.toggled.connect(self._update_threshold_widgets)
        self.radio_fixed.toggled.connect(self._update_threshold_widgets)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.spin_watchlist_dwell.valueChanged.connect(self._update_example_plot)
        self.spin_rms_halfspan.valueChanged.connect(self._update_example_plot)
        self.combo_center_mode.currentIndexChanged.connect(self._update_example_plot)

    def _update_threshold_widgets(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∏–¥–∂–µ—Ç–æ–≤ –ø–æ—Ä–æ–≥–æ–≤."""
        adaptive_enabled = self.radio_adaptive.isChecked()
        self.spin_baseline_offset.setEnabled(adaptive_enabled)
        self.spin_fixed_threshold.setEnabled(not adaptive_enabled)

    def _update_example_plot(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."""
        dwell = self.spin_watchlist_dwell.value()
        rms_halfspan = self.spin_rms_halfspan.value() if hasattr(self, 'spin_rms_halfspan') else 2.5

        # –ü–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞ = 2 √ó halfspan
        full_span = 2 * rms_halfspan
        left = 2450 - rms_halfspan
        right = 2450 + rms_halfspan

        center_label = "F_max" if self.combo_center_mode.currentIndex() == 0 else "Centroid"
        text = (
            "<div style='color: #ffffff; padding: 20px;'>"
            "<h3>–ü—Ä–∏–º–µ—Ä RMS –∏–∑–º–µ—Ä–µ–Ω–∏—è</h3>"
            f"<p>–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ ({center_label}): 2450.0 –ú–ì—Ü</p>"
            f"<p><b>RMS –ø–æ–ª–æ—Å–∞: ¬±{rms_halfspan:.1f} –ú–ì—Ü ({left:.1f} - {right:.1f} –ú–ì—Ü)</b></p>"
            f"<p>–ü–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: {full_span:.1f} –ú–ì—Ü</p>"
            f"<p>–í—Ä–µ–º—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {dwell} –º—Å</p>"
            "<p><b>–í—Å–µ Slaves –∏–∑–º–µ—Ä—è—é—Ç RMS RSSI –≤ –µ–¥–∏–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ ¬±halfspan –≤–æ–∫—Ä—É–≥ F_max</b></p>"
            "</div>"
        )
        self.example_plot.setText(text)

    def _add_range(self, table: QtWidgets.QTableWidget):
        r = table.rowCount()
        table.setRowCount(r + 1)
        for c in range(2):
            it = QtWidgets.QTableWidgetItem("0.0")
            table.setItem(r, c, it)
        btn = QtWidgets.QPushButton("üóë")
        def _rem():
            for i in range(table.rowCount()):
                if table.cellWidget(i, 2) is btn:
                    table.removeRow(i)
                    break
        btn.clicked.connect(_rem)
        table.setCellWidget(r, 2, btn)

    def _get_ranges_from_table(self, table: QtWidgets.QTableWidget) -> List[Tuple[float, float]]:
        out: List[Tuple[float, float]] = []
        for r in range(table.rowCount()):
            try:
                a = float(table.item(r, 0).text())
                b = float(table.item(r, 1).text())
                if b < a:
                    a, b = b, a
                out.append((a, b))
            except Exception:
                continue
        return out

    def _load_filters(self):
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.include_table.setRowCount(0)
        for rng in (self.settings.frequency_ranges or []):
            self._add_range(self.include_table)
            r = self.include_table.rowCount() - 1
            self.include_table.item(r, 0).setText(f"{rng[0]:.3f}")
            self.include_table.item(r, 1).setText(f"{rng[1]:.3f}")
        self.exclude_table.setRowCount(0)
        for rng in (self.settings.exclude_ranges or []):
            self._add_range(self.exclude_table)
            r = self.exclude_table.rowCount() - 1
            self.exclude_table.item(r, 0).setText(f"{rng[0]:.3f}")
            self.exclude_table.item(r, 1).setText(f"{rng[1]:.3f}")

    def _preset_ism(self):
        # ISM –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        self.settings.frequency_ranges = [
            (433.0, 434.8),     # 433 –ú–ì—Ü ISM
            (868.0, 870.0),     # 868 –ú–ì—Ü EU
            (902.0, 928.0),     # 915 –ú–ì—Ü US
            (2400.0, 2483.5),   # 2.4 –ì–ì—Ü
            (5725.0, 5875.0)    # 5.8 –ì–ì—Ü
        ]
        self._load_filters()

    def _preset_wifi(self):
        self.settings.frequency_ranges = [
            (2400.0, 2483.5),   # 2.4 –ì–ì—Ü
            (5150.0, 5350.0),   # 5 –ì–ì—Ü UNII-1/2
            (5470.0, 5725.0),   # 5 –ì–ì—Ü UNII-2e/3
            (5725.0, 5875.0)    # 5 –ì–ì—Ü UNII-4
        ]
        self._load_filters()

    def _preset_cellular(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Ç–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        self.settings.frequency_ranges = [
            (791.0, 821.0),     # LTE Band 20
            (832.0, 862.0),     # LTE Band 20
            (880.0, 915.0),     # GSM 900
            (925.0, 960.0),     # GSM 900
            (1710.0, 1785.0),   # GSM 1800
            (1805.0, 1880.0),   # GSM 1800
            (1920.0, 1980.0),   # UMTS
            (2110.0, 2170.0),   # UMTS
            (2500.0, 2570.0),   # LTE Band 7
            (2620.0, 2690.0)    # LTE Band 7
        ]
        self._load_filters()

    def _load_preset(self, preset_name: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ—Å–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        if preset_name == "sensitive":
            # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –Ω–∏–∑–∫–∏–µ –ø–æ—Ä–æ–≥–∏, –±—ã—Å—Ç—Ä—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            self.settings.threshold_mode = "adaptive"
            self.settings.baseline_offset_db = 10.0
            self.settings.min_snr_db = 5.0
            self.settings.min_peak_width_bins = 2
            self.settings.min_peak_distance_bins = 3
            self.settings.rms_halfspan_mhz = 1.0  # –ë–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
            self.settings.watchlist_dwell_ms = 100
            self.settings.peak_timeout_sec = 3.0
            self.settings.measurement_interval_sec = 0.5
            self.settings.min_confirmation_sweeps = 2
        elif preset_name == "normal":
            # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.settings.threshold_mode = "adaptive"
            self.settings.baseline_offset_db = 20.0
            self.settings.min_snr_db = 10.0
            self.settings.min_peak_width_bins = 3
            self.settings.min_peak_distance_bins = 5
            self.settings.rms_halfspan_mhz = 2.5  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º
            self.settings.watchlist_dwell_ms = 150
            self.settings.peak_timeout_sec = 5.0
            self.settings.measurement_interval_sec = 1.0
            self.settings.min_confirmation_sweeps = 3
        elif preset_name == "robust":
            # –£—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–µ–∂–∏–º - –≤—ã—Å–æ–∫–∏–µ –ø–æ—Ä–æ–≥–∏, –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            self.settings.threshold_mode = "fixed"
            self.settings.fixed_threshold_dbm = -60.0
            self.settings.min_snr_db = 15.0
            self.settings.min_peak_width_bins = 5
            self.settings.min_peak_distance_bins = 8
            self.settings.rms_halfspan_mhz = 5.0  # –®–∏—Ä–æ–∫–∞—è –ø–æ–ª–æ—Å–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            self.settings.watchlist_dwell_ms = 200
            self.settings.peak_timeout_sec = 10.0
            self.settings.measurement_interval_sec = 2.0
            self.settings.min_confirmation_sweeps = 3

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ UI
        self._load_settings()

    def _load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ UI –≤–∏–¥–∂–µ—Ç—ã."""
        # –û—Å–Ω–æ–≤–Ω—ã–µ
        self.chk_enabled.setChecked(self.settings.enabled)
        self.chk_auto_start.setChecked(self.settings.auto_start)

        # –ü–æ—Ä–æ–≥–∏
        if self.settings.threshold_mode == "adaptive":
            self.radio_adaptive.setChecked(True)
        else:
            self.radio_fixed.setChecked(True)
        self.spin_baseline_offset.setValue(self.settings.baseline_offset_db)
        self.spin_fixed_threshold.setValue(self.settings.fixed_threshold_dbm)
        self.spin_min_snr.setValue(self.settings.min_snr_db)
        self.spin_min_width.setValue(self.settings.min_peak_width_bins)
        self.spin_min_distance.setValue(self.settings.min_peak_distance_bins)
        self.spin_hyst_high.setValue(self.settings.hysteresis_high_db)
        self.spin_hyst_low.setValue(self.settings.hysteresis_low_db)
        self.spin_bridge.setValue(self.settings.bridge_gap_bins)
        self.spin_boundary_delta.setValue(self.settings.boundary_end_delta_db)
        self.spin_edge_run.setValue(self.settings.edge_min_run_bins)
        self.spin_pref_median.setValue(self.settings.prefilter_median_bins)
        self.spin_occupancy.setValue(self.settings.min_region_occupancy)
        self.spin_area.setValue(self.settings.min_region_area)

        # Watchlist
        self.spin_watchlist_dwell.setValue(self.settings.watchlist_dwell_ms)
        self.spin_max_watchlist.setValue(self.settings.max_watchlist_size)
        self.spin_rms_halfspan.setValue(self.settings.rms_halfspan_mhz)
        self.spin_rms_interval_sec.setValue(self.settings.measurement_interval_sec)

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ç–∞–π–º–∞—É—Ç/–∏–Ω—Ç–µ—Ä–≤–∞–ª —É–±—Ä–∞–Ω—ã –∏–∑ UI ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
        self.spin_confirmation_sweeps.setValue(self.settings.min_confirmation_sweeps)

        # –§–∏–ª—å—Ç—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚Äì —Å–∫–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å –º–∞—Å—Ç–µ—Ä-–¥–∏–∞–ø–∞–∑–æ–Ω

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        self._update_example_plot()

    def _gather_settings(self) -> DetectorSettings:
        """–°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ UI."""
        freq_ranges = []
        excl_ranges = []
        try:
            if hasattr(self, 'include_table') and self.include_table is not None:
                freq_ranges = self._get_ranges_from_table(self.include_table)
            if hasattr(self, 'exclude_table') and self.exclude_table is not None:
                excl_ranges = self._get_ranges_from_table(self.exclude_table)
        except Exception:
            freq_ranges = []
            excl_ranges = []

        s = DetectorSettings(
            enabled=self.chk_enabled.isChecked(),
            auto_start=self.chk_auto_start.isChecked(),
            threshold_mode=("adaptive" if self.radio_adaptive.isChecked() else "fixed"),
            baseline_offset_db=self.spin_baseline_offset.value(),
            fixed_threshold_dbm=self.spin_fixed_threshold.value(),
            min_snr_db=self.spin_min_snr.value(),
            min_peak_width_bins=int(self.spin_min_width.value()),
            min_peak_distance_bins=int(self.spin_min_distance.value()),
            hysteresis_high_db=self.spin_hyst_high.value(),
            hysteresis_low_db=self.spin_hyst_low.value(),
            bridge_gap_bins=int(self.spin_bridge.value()),
            boundary_end_delta_db=self.spin_boundary_delta.value(),
            edge_min_run_bins=int(self.spin_edge_run.value()),
            prefilter_median_bins=int(self.spin_pref_median.value()),
            min_region_occupancy=self.spin_occupancy.value(),
            min_region_area=self.spin_area.value(),
            watchlist_dwell_ms=int(self.spin_watchlist_dwell.value()),
            max_watchlist_size=int(self.spin_max_watchlist.value()),
            rms_halfspan_mhz=self.spin_rms_halfspan.value(),
            center_mode=('fmax' if self.combo_center_mode.currentIndex() == 0 else 'centroid'),
            # –¢–∞–π–º–∞—É—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º, –∏–Ω—Ç–µ—Ä–≤–∞–ª RMS –±–µ—Ä—ë–º –∏–∑ UI
            peak_timeout_sec=self.settings.peak_timeout_sec,
            measurement_interval_sec=float(self.spin_rms_interval_sec.value()),
            min_confirmation_sweeps=int(self.spin_confirmation_sweeps.value()),
            frequency_ranges=freq_ranges,
            exclude_ranges=excl_ranges,
        )
        return s

    def _apply_settings(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        self.settings = self._gather_settings()
        self._save_to_disk(self.settings)
        self.settingsChanged.emit(self.settings)

    def _save_and_close(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
        self._apply_settings()
        self.accept()

    def _load_from_disk(self) -> Optional[DetectorSettings]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –¥–∏—Å–∫–∞."""
        try:
            if self._settings_path.exists():
                data = json.loads(self._settings_path.read_text(encoding="utf-8"))
                return DetectorSettings.from_dict(data)
        except Exception:
            pass
        return None

    def _save_to_disk(self, s: DetectorSettings) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –¥–∏—Å–∫."""
        try:
            self._settings_path.parent.mkdir(exist_ok=True)
            self._settings_path.write_text(
                json.dumps(s.to_dict(), indent=2, ensure_ascii=False),
                encoding="utf-8"
            )
        except Exception:
            pass


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å PeakWatchlistManager
def load_detector_settings() -> Optional[DetectorSettings]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    settings_path = Path.home() / ".panorama" / "signal_processing_settings.json"
    try:
        if settings_path.exists():
            data = json.loads(settings_path.read_text(encoding="utf-8"))
            return DetectorSettings.from_dict(data)
    except Exception:
        pass
    return None


def apply_settings_to_watchlist_manager(settings: DetectorSettings, manager):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ PeakWatchlistManager."""
    if not settings or not manager:
        return

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    manager.threshold_mode = settings.threshold_mode
    manager.baseline_offset_db = settings.baseline_offset_db
    manager.threshold_dbm = settings.fixed_threshold_dbm
    manager.min_snr_db = settings.min_snr_db
    manager.min_peak_width_bins = settings.min_peak_width_bins
    manager.min_peak_distance_bins = settings.min_peak_distance_bins
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º)
    if hasattr(manager, 'hysteresis_high_db'):
        manager.hysteresis_high_db = settings.hysteresis_high_db
    if hasattr(manager, 'hysteresis_low_db'):
        manager.hysteresis_low_db = settings.hysteresis_low_db
    if hasattr(manager, 'bridge_gap_bins_default'):
        manager.bridge_gap_bins_default = int(settings.bridge_gap_bins)
    if hasattr(manager, 'boundary_end_delta_db'):
        manager.boundary_end_delta_db = settings.boundary_end_delta_db
    if hasattr(manager, 'edge_min_run_bins'):
        manager.edge_min_run_bins = int(settings.edge_min_run_bins)
    if hasattr(manager, 'prefilter_median_bins'):
        manager.prefilter_median_bins = int(settings.prefilter_median_bins)
    if hasattr(manager, 'min_region_occupancy'):
        manager.min_region_occupancy = float(settings.min_region_occupancy)
    if hasattr(manager, 'min_region_area'):
        manager.min_region_area = float(settings.min_region_area)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã watchlist (–∏—Å–ø–æ–ª—å–∑—É–µ–º RMS halfspan –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–æ—Å—ã)
    manager.rms_halfspan_hz = settings.rms_halfspan_mhz * 1e6
    # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º watchlist_span –∫–∞–∫ –ø–æ–ª–Ω—É—é —à–∏—Ä–∏–Ω—É
    if hasattr(manager, 'watchlist_span_hz'):
        manager.watchlist_span_hz = settings.rms_halfspan_mhz * 2e6  # –ü–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞ = 2 √ó halfspan

    manager.max_watchlist_size = settings.max_watchlist_size
    if hasattr(manager, 'center_mode'):
        manager.center_mode = settings.center_mode
    manager.peak_timeout_sec = settings.peak_timeout_sec
    manager.min_confirmation_sweeps = settings.min_confirmation_sweeps

    print(f"[DetectorSettings] Applied settings to watchlist manager: "
          f"mode={manager.threshold_mode}, "
          f"offset={manager.baseline_offset_db} dB, "
          f"rms_halfspan={manager.rms_halfspan_hz/1e6} MHz, "
          f"confirmations={manager.min_confirmation_sweeps}")
