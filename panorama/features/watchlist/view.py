# panorama/features/watchlist/view_fixed.py
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–π–≤–∞–º–∏
"""

from __future__ import annotations
from typing import Dict, List, Optional, Any
import time
import numpy as np
from PyQt5.QtCore import Qt, pyqtSignal, QTimer
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem,
    QGroupBox, QLabel, QPushButton, QHeaderView, QSplitter, 
    QTextEdit, QComboBox, QSpinBox, QCheckBox, QGridLayout, 
    QProgressBar, QFrame, QTabWidget
)
from PyQt5.QtGui import QFont, QColor, QBrush


class ImprovedSlavesView(QWidget):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–π–≤–∞–º–∏ —Å RSSI –º–∞—Ç—Ä–∏—Ü–µ–π."""
    
    send_to_map = pyqtSignal(dict)
    task_selected = pyqtSignal(str)
    watchlist_updated = pyqtSignal(list)

    def __init__(self, orchestrator=None, parent=None):
        super().__init__(parent)
        self.orchestrator = orchestrator
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.rssi_matrix = {}
        self.watchlist = []
        self.tasks_data = []
        
        # –°–æ–∑–¥–∞–µ–º UI
        self._create_ui()
        
        # –¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(self._update_data)
        self.update_timer.start(2000)

    def _create_ui(self):
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = self._create_header()
        layout.addWidget(header)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - RSSI –º–∞—Ç—Ä–∏—Ü–∞
        left_panel = self._create_rssi_panel()
        splitter.addWidget(left_panel)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - Watchlist –∏ –∑–∞–¥–∞—á–∏
        right_panel = self._create_watchlist_panel()
        splitter.addWidget(right_panel)
        
        splitter.setSizes([800, 600])
        layout.addWidget(splitter)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = self._create_status_bar()
        layout.addWidget(self.status_bar)

    def _create_header(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
        widget = QWidget()
        layout = QHBoxLayout(widget)
        
        title = QLabel("üéØ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Slave SDR")
        title.setFont(QFont("Arial", 14, QFont.Bold))
        layout.addWidget(title)
        
        layout.addStretch()
        
        self.btn_refresh = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.btn_refresh.clicked.connect(self._refresh_data)
        layout.addWidget(self.btn_refresh)
        
        self.btn_clear = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        self.btn_clear.clicked.connect(self._clear_data)
        layout.addWidget(self.btn_clear)
        
        return widget

    def _create_rssi_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å –º–∞—Ç—Ä–∏—Ü–µ–π RSSI RMS."""
        group = QGroupBox("üìä –ú–∞—Ç—Ä–∏—Ü–∞ RSSI RMS (–¥–ë–º)")
        layout = QVBoxLayout(group)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls = QHBoxLayout()
        
        # –§–∏–ª—å—Ç—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        self.range_filter = QComboBox()
        self.range_filter.addItem("–í—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã")
        self.range_filter.currentTextChanged.connect(self._filter_rssi_table)
        controls.addWidget(QLabel("–§–∏–ª—å—Ç—Ä:"))
        controls.addWidget(self.range_filter)
        
        # –ü–æ—Ä–æ–≥ RSSI
        self.threshold_spin = QSpinBox()
        self.threshold_spin.setRange(-120, 0)
        self.threshold_spin.setValue(-80)
        self.threshold_spin.setSuffix(" –¥–ë–º")
        self.threshold_spin.valueChanged.connect(self._update_rssi_colors)
        controls.addWidget(QLabel("–ü–æ—Ä–æ–≥:"))
        controls.addWidget(self.threshold_spin)
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        self.auto_scroll = QCheckBox("–ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞")
        self.auto_scroll.setChecked(True)
        controls.addWidget(self.auto_scroll)
        
        controls.addStretch()
        layout.addLayout(controls)
        
        # –¢–∞–±–ª–∏—Ü–∞ RSSI
        self.rssi_table = QTableWidget()
        self.rssi_table.setAlternatingRowColors(True)
        self._setup_rssi_table()
        layout.addWidget(self.rssi_table)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_layout = QGridLayout()
        self.lbl_min_rssi = QLabel("–ú–∏–Ω: ‚Äî –¥–ë–º")
        self.lbl_max_rssi = QLabel("–ú–∞–∫—Å: ‚Äî –¥–ë–º")
        self.lbl_avg_rssi = QLabel("–°—Ä–µ–¥: ‚Äî –¥–ë–º")
        self.lbl_active_slaves = QLabel("–ê–∫—Ç–∏–≤–Ω—ã—Ö Slave: 0")
        
        stats_layout.addWidget(self.lbl_min_rssi, 0, 0)
        stats_layout.addWidget(self.lbl_max_rssi, 0, 1)
        stats_layout.addWidget(self.lbl_avg_rssi, 0, 2)
        stats_layout.addWidget(self.lbl_active_slaves, 0, 3)
        
        layout.addLayout(stats_layout)
        return group

    def _create_watchlist_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å watchlist –∏ –∑–∞–¥–∞—á."""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ Watchlist
        watchlist_tab = self._create_watchlist_tab()
        tabs.addTab(watchlist_tab, "üì° Watchlist")
        
        # –í–∫–ª–∞–¥–∫–∞ –∑–∞–¥–∞—á
        tasks_tab = self._create_tasks_tab()
        tabs.addTab(tasks_tab, "üìã –ó–∞–¥–∞—á–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–≤
        transmitters_tab = self._create_transmitters_tab()
        tabs.addTab(transmitters_tab, "üìª –ü–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∏")
        
        layout.addWidget(tabs)
        return widget

    def _create_watchlist_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É watchlist."""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info = QLabel(
            "üìç –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.\n"
            "RSSI_1..3 - –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –æ—Ç –∫–∞–∂–¥–æ–≥–æ Slave SDR."
        )
        info.setWordWrap(True)
        info.setStyleSheet("""
            QLabel {
                background-color: rgba(100, 100, 255, 30);
                padding: 10px;
                border-radius: 5px;
            }
        """)
        layout.addWidget(info)
        
        # –¢–∞–±–ª–∏—Ü–∞ watchlist
        self.watchlist_table = QTableWidget()
        self.watchlist_table.setColumnCount(10)
        self.watchlist_table.setHorizontalHeaderLabels([
            "ID", "–ß–∞—Å—Ç–æ—Ç–∞ (–ú–ì—Ü)", "–®–∏—Ä–∏–Ω–∞ (–ú–ì—Ü)", "Halfspan (–ú–ì—Ü)",
            "RMS_1 (–¥–ë–º)", "RMS_2 (–¥–ë–º)", "RMS_3 (–¥–ë–º)", "–ë–∏–Ω–æ–≤", "–û–±–Ω–æ–≤–ª–µ–Ω–æ", "–î–µ–π—Å—Ç–≤–∏—è"
        ])
        self.watchlist_table.setAlternatingRowColors(True)
        layout.addWidget(self.watchlist_table)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        control_panel = QHBoxLayout()
        
        self.btn_clear_watchlist = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å watchlist")
        self.btn_clear_watchlist.clicked.connect(self._clear_watchlist)
        control_panel.addWidget(self.btn_clear_watchlist)
        
        control_panel.addStretch()
        
        self.lbl_watchlist_count = QLabel("–ó–∞–ø–∏—Å–µ–π: 0")
        control_panel.addWidget(self.lbl_watchlist_count)
        
        layout.addLayout(control_panel)
        return widget

    def _create_tasks_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –∑–∞–¥–∞—á."""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –õ–æ–≥ –∑–∞–¥–∞—á
        self.tasks_log_view = QTextEdit()
        self.tasks_log_view.setReadOnly(True)
        self.tasks_log_view.setMaximumHeight(150)
        layout.addWidget(QLabel("–õ–æ–≥ –∑–∞–¥–∞—á:"))
        layout.addWidget(self.tasks_log_view)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
        self.tasks_table = QTableWidget()
        self.tasks_table.setColumnCount(6)
        self.tasks_table.setHorizontalHeaderLabels([
            "ID", "–î–∏–∞–ø–∞–∑–æ–Ω", "–°—Ç–∞—Ç—É—Å", "–ü—Ä–æ–≥—Ä–µ—Å—Å", "–í—Ä–µ–º—è", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
        ])
        layout.addWidget(self.tasks_table)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = QHBoxLayout()
        self.lbl_total_tasks = QLabel("–í—Å–µ–≥–æ: 0")
        self.lbl_pending_tasks = QLabel("–û–∂–∏–¥–∞–µ—Ç: 0")
        self.lbl_running_tasks = QLabel("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: 0")
        self.lbl_completed_tasks = QLabel("–ó–∞–≤–µ—Ä—à–µ–Ω–æ: 0")
        
        for lbl in [self.lbl_total_tasks, self.lbl_pending_tasks,
                   self.lbl_running_tasks, self.lbl_completed_tasks]:
            stats.addWidget(lbl)
        
        layout.addLayout(stats)
        return widget

    def _create_transmitters_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–≤."""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–≤
        self.transmitters_table = QTableWidget()
        self.transmitters_table.setColumnCount(9)
        self.transmitters_table.setHorizontalHeaderLabels([
            "ID", "–ß–∞—Å—Ç–æ—Ç–∞ (–ú–ì—Ü)", "–ú–æ—â–Ω–æ—Å—Ç—å (–¥–ë–º)", "–¢–∏–ø",
            "X", "Y", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–í—Ä–µ–º—è", "–ù–∞ –∫–∞—Ä—Ç—É"
        ])
        layout.addWidget(self.transmitters_table)
        
        return widget

    def _create_status_bar(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞—Ä."""
        widget = QFrame()
        widget.setFrameStyle(QFrame.Box)
        layout = QHBoxLayout(widget)
        
        self.lbl_last_update = QLabel("–û–±–Ω–æ–≤–ª–µ–Ω–æ: ‚Äî")
        layout.addWidget(self.lbl_last_update)
        
        return widget

    def _setup_rssi_table(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É RSSI."""
        headers = ["–î–∏–∞–ø–∞–∑–æ–Ω (–ú–ì—Ü)", "Slave0", "Slave1", "Slave2"]
        self.rssi_table.setColumnCount(len(headers))
        self.rssi_table.setHorizontalHeaderLabels(headers)
        self.rssi_table.setRowCount(0)

    def add_range_from_detector(self, freq_start_mhz: float, freq_stop_mhz: float):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞."""
        range_str = f"{freq_start_mhz:.1f}-{freq_stop_mhz:.1f}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        for row in range(self.rssi_table.rowCount()):
            if self.rssi_table.item(row, 0) and \
               self.rssi_table.item(row, 0).text() == range_str:
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
        row = self.rssi_table.rowCount()
        self.rssi_table.insertRow(row)
        
        # –î–∏–∞–ø–∞–∑–æ–Ω
        self.rssi_table.setItem(row, 0, QTableWidgetItem(range_str))
        
        # RSSI –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Slave
        for col in range(1, 4):
            self.rssi_table.setItem(row, col, QTableWidgetItem("‚Äî"))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        self.range_filter.addItem(range_str)
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        if self.auto_scroll.isChecked():
            self.rssi_table.scrollToBottom()

    def update_rssi_value(self, range_str: str, slave_id: str, rssi_rms: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ RSSI."""
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É
        row_idx = -1
        for row in range(self.rssi_table.rowCount()):
            item = self.rssi_table.item(row, 0)
            if item and item.text() == range_str:
                row_idx = row
                break
        
        if row_idx == -1:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            self.add_range_from_detector(
                float(range_str.split('-')[0]),
                float(range_str.split('-')[1])
            )
            row_idx = self.rssi_table.rowCount() - 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
        col_map = {"slave0": 1, "slave1": 2, "slave2": 3}
        col_idx = col_map.get(slave_id.lower(), -1)
        
        if col_idx > 0:
            item = QTableWidgetItem(f"{rssi_rms:.1f}")
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(self._get_rssi_color(rssi_rms)))
            self.rssi_table.setItem(row_idx, col_idx, item)
            
            self._update_rssi_stats()

    def _get_rssi_color(self, rssi: float) -> QColor:
        """–¶–≤–µ—Ç –¥–ª—è RSSI."""
        threshold = self.threshold_spin.value()
        
        if rssi >= threshold + 20:
            return QColor(74, 222, 128, 100)  # –ó–µ–ª–µ–Ω—ã–π
        elif rssi >= threshold + 10:
            return QColor(251, 191, 36, 100)  # –ñ–µ–ª—Ç—ã–π
        else:
            return QColor(248, 113, 113, 100) # –ö—Ä–∞—Å–Ω—ã–π

    def _update_rssi_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RSSI."""
        all_rssi = []
        
        for row in range(self.rssi_table.rowCount()):
            for col in range(1, 4):
                item = self.rssi_table.item(row, col)
                if item and item.text() != "‚Äî":
                    try:
                        all_rssi.append(float(item.text()))
                    except:
                        pass
        
        if all_rssi:
            self.lbl_min_rssi.setText(f"–ú–∏–Ω: {min(all_rssi):.1f} –¥–ë–º")
            self.lbl_max_rssi.setText(f"–ú–∞–∫—Å: {max(all_rssi):.1f} –¥–ë–º")
            self.lbl_avg_rssi.setText(f"–°—Ä–µ–¥: {np.mean(all_rssi):.1f} –¥–ë–º")

    def _update_rssi_colors(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞."""
        for row in range(self.rssi_table.rowCount()):
            for col in range(1, 4):
                item = self.rssi_table.item(row, col)
                if item and item.text() != "‚Äî":
                    try:
                        rssi = float(item.text())
                        item.setBackground(QBrush(self._get_rssi_color(rssi)))
                    except:
                        pass

    def _filter_rssi_table(self):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É."""
        filter_text = self.range_filter.currentText()
        
        for row in range(self.rssi_table.rowCount()):
            item = self.rssi_table.item(row, 0)
            if item:
                if filter_text == "–í—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã":
                    self.rssi_table.setRowHidden(row, False)
                else:
                    self.rssi_table.setRowHidden(row, item.text() != filter_text)

    def _update_data(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
        if self.orchestrator and hasattr(self.orchestrator, "get_ui_snapshot"):
            try:
                snapshot = self.orchestrator.get_ui_snapshot()
                if snapshot:
                    self.update_from_orchestrator(snapshot)
            except Exception as e:
                print(f"[SlavesView] Error: {e}")
        
        # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.lbl_last_update.setText(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {time.strftime('%H:%M:%S')}")

    def update_from_orchestrator(self, data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        # –û–±–Ω–æ–≤–ª—è–µ–º watchlist
        if 'watchlist' in data:
            self._render_watchlist(data['watchlist'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
        if 'tasks' in data:
            self._render_tasks(data['tasks'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º RSSI –∏–∑–º–µ—Ä–µ–Ω–∏—è
        if 'rssi_measurements' in data:
            for m in data['rssi_measurements']:
                self.update_rssi_value(
                    m['range'],
                    m['slave_id'],
                    m['rssi_rms']
                )

    def _render_watchlist(self, watchlist_data: List[Dict]):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç watchlist."""
        self.watchlist_table.setRowCount(len(watchlist_data))
        
        for row, data in enumerate(watchlist_data):
            # ID
            self.watchlist_table.setItem(row, 0, 
                QTableWidgetItem(str(data.get('id', ''))))
            
            # –ß–∞—Å—Ç–æ—Ç–∞ –∏ —à–∏—Ä–∏–Ω–∞
            freq = float(data.get('freq', 0))
            span = float(data.get('span', 0))
            self.watchlist_table.setItem(row, 1, 
                QTableWidgetItem(f"{freq:.1f}"))
            self.watchlist_table.setItem(row, 2, 
                QTableWidgetItem(f"{span:.1f}"))
            
            # Halfspan –¥–ª—è RMS
            halfspan = float(data.get('halfspan', 2.5))
            self.watchlist_table.setItem(row, 3, 
                QTableWidgetItem(f"{halfspan:.1f}"))
            
            # RMS –¥–ª—è –∫–∞–∂–¥–æ–≥–æ slave
            for i in range(3):
                rms_key = f'rms_{i+1}'
                val = data.get(rms_key)
                if val is not None:
                    item = QTableWidgetItem(f"{float(val):.1f}")
                    item.setBackground(QBrush(self._get_rssi_color(float(val))))
                    # –î–æ–±–∞–≤–ª—è–µ–º tooltip —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    bins_used = data.get(f'bins_used_{i+1}', 'N/A')
                    timestamp = data.get(f'timestamp_{i+1}', '')
                    item.setToolTip(f"–ë–∏–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {bins_used}\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {timestamp}")
                else:
                    item = QTableWidgetItem("‚Äî")
                item.setTextAlignment(Qt.AlignCenter)
                self.watchlist_table.setItem(row, 4 + i, item)
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–Ω–æ–≤
            total_bins = data.get('total_bins', 0)
            self.watchlist_table.setItem(row, 7, 
                QTableWidgetItem(str(total_bins)))
            
            # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.watchlist_table.setItem(row, 8, 
                QTableWidgetItem(data.get('updated', '')))
            
            # –ö–Ω–æ–ø–∫–∞
            btn = QPushButton("üìç –ù–∞ –∫–∞—Ä—Ç—É")
            btn.clicked.connect(lambda _, d=data: self._send_to_map(d))
            self.watchlist_table.setCellWidget(row, 9, btn)
        
        self.lbl_watchlist_count.setText(f"–ó–∞–ø–∏—Å–µ–π: {len(watchlist_data)}")

    def _render_tasks(self, tasks_data: List[Dict]):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏."""
        # –õ–æ–≥
        log_lines = []
        for task in tasks_data[-20:]:
            timestamp = time.strftime('%H:%M:%S', 
                time.localtime(task.get('timestamp', time.time())))
            status = task.get('status', 'UNKNOWN')
            task_id = task.get('id', 'N/A')
            log_lines.append(f"[{timestamp}] Task {task_id}: {status}")
        
        self.tasks_log_view.setPlainText("\n".join(log_lines))
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        active = [t for t in tasks_data 
                 if t.get('status') in ['PENDING', 'RUNNING']]
        self.tasks_table.setRowCount(len(active))
        
        stats = {'pending': 0, 'running': 0, 'completed': 0}
        
        for row, task in enumerate(active):
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
            self.tasks_table.setItem(row, 0, 
                QTableWidgetItem(task.get('id', '')))
            self.tasks_table.setItem(row, 1, 
                QTableWidgetItem(task.get('range', '')))
            
            # –°—Ç–∞—Ç—É—Å
            status = task.get('status', '')
            status_item = QTableWidgetItem(status)
            if status == 'RUNNING':
                status_item.setBackground(QBrush(QColor(74, 222, 128, 100)))
                stats['running'] += 1
            elif status == 'PENDING':
                status_item.setBackground(QBrush(QColor(251, 191, 36, 100)))
                stats['pending'] += 1
            self.tasks_table.setItem(row, 2, status_item)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            progress = QProgressBar()
            progress.setValue(task.get('progress', 0))
            self.tasks_table.setCellWidget(row, 3, progress)
            
            # –í—Ä–µ–º—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            self.tasks_table.setItem(row, 4, 
                QTableWidgetItem(task.get('time', '')))
            self.tasks_table.setItem(row, 5, 
                QTableWidgetItem(task.get('priority', 'NORMAL')))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.lbl_total_tasks.setText(f"–í—Å–µ–≥–æ: {len(tasks_data)}")
        self.lbl_pending_tasks.setText(f"–û–∂–∏–¥–∞–µ—Ç: {stats['pending']}")
        self.lbl_running_tasks.setText(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {stats['running']}")
        self.lbl_completed_tasks.setText(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']}")

    def add_transmitter(self, result):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫ –≤ —Ç–∞–±–ª–∏—Ü—É."""
        try:
            row = self.transmitters_table.rowCount()
            self.transmitters_table.insertRow(row)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            peak_id = getattr(result, 'peak_id', 'unknown')
            freq = getattr(result, 'freq_mhz', 0.0)
            x = getattr(result, 'x', 0.0)
            y = getattr(result, 'y', 0.0)
            confidence = getattr(result, 'confidence', 0.0)
            
            self.transmitters_table.setItem(row, 0, QTableWidgetItem(str(peak_id)))
            self.transmitters_table.setItem(row, 1, QTableWidgetItem(f"{freq:.1f}"))
            self.transmitters_table.setItem(row, 2, QTableWidgetItem("-"))
            self.transmitters_table.setItem(row, 3, QTableWidgetItem("Video"))
            self.transmitters_table.setItem(row, 4, QTableWidgetItem(f"{x:.1f}"))
            self.transmitters_table.setItem(row, 5, QTableWidgetItem(f"{y:.1f}"))
            self.transmitters_table.setItem(row, 6, QTableWidgetItem(f"{confidence*100:.0f}%"))
            self.transmitters_table.setItem(row, 7, QTableWidgetItem(time.strftime("%H:%M:%S")))
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É
            btn = QPushButton("üìç")
            btn.clicked.connect(lambda: self.send_to_map.emit({
                'id': peak_id, 'freq': freq, 'x': x, 'y': y
            }))
            self.transmitters_table.setCellWidget(row, 8, btn)
            
        except Exception as e:
            print(f"[SlavesView] Error adding transmitter: {e}")

    def _send_to_map(self, data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –∫–∞—Ä—Ç—É."""
        self.send_to_map.emit(data)

    def _clear_watchlist(self):
        """–û—á–∏—â–∞–µ—Ç watchlist."""
        self.watchlist_table.setRowCount(0)
        self.lbl_watchlist_count.setText("–ó–∞–ø–∏—Å–µ–π: 0")

    def _refresh_data(self):
        """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."""
        self._update_data()

    def _clear_data(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ."""
        self.rssi_table.setRowCount(0)
        self.watchlist_table.setRowCount(0)
        self.tasks_table.setRowCount(0)
        self.transmitters_table.setRowCount(0)
        self.tasks_log_view.clear()
        self._update_rssi_stats()