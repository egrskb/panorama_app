# panorama/features/watchlist/view_fixed.py
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–π–≤–∞–º–∏
"""

from __future__ import annotations
from typing import Dict, List, Optional, Any
import time
import numpy as np
from PyQt5.QtCore import Qt, pyqtSignal, QTimer
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem,
    QGroupBox, QLabel, QPushButton, QHeaderView, QSplitter, 
    QTextEdit, QComboBox, QSpinBox, QCheckBox, QGridLayout, 
    QProgressBar, QFrame, QTabWidget
)
from PyQt5.QtGui import QFont, QColor, QBrush

from .web_table_widget import WebTableWidget


class ImprovedSlavesView(QWidget):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–π–≤–∞–º–∏ —Å RSSI –º–∞—Ç—Ä–∏—Ü–µ–π."""
    
    send_to_map = pyqtSignal(dict)
    task_selected = pyqtSignal(str)
    watchlist_updated = pyqtSignal(list)

    def __init__(self, orchestrator=None, parent=None):
        super().__init__(parent)
        self.orchestrator = orchestrator
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.rssi_matrix = {}
        self.watchlist = []
        self.tasks_data = []
        
        # –í–µ–±-—Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è RSSI –∏–∑–º–µ—Ä–µ–Ω–∏–π
        self.web_table_widget = None
        
        # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.watchlist_table = None
        self.lbl_watchlist_count = None
        self.rssi_table = None
        self.combined_table = None  # –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –≤–µ–±-—Ç–∞–±–ª–∏—Ü–µ–π
        
        # –°–æ–∑–¥–∞–µ–º UI
        self._create_ui()
        
        # –¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ª–∞–π–≤-–¥–∞–Ω–Ω—ã–µ)
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(self._update_data)
        self.update_timer.start(300)  # ~3-4 FPS –¥–ª—è –∂–∏–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

    def _create_ui(self):
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = self._create_header()
        layout.addWidget(header)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å - —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        main_panel = self._create_watchlist_panel()
        layout.addWidget(main_panel)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = self._create_status_bar()
        layout.addWidget(self.status_bar)

    def _create_header(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
        widget = QWidget()
        layout = QHBoxLayout(widget)
        
        title = QLabel("üéØ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Slave SDR")
        title.setFont(QFont("Arial", 14, QFont.Bold))
        layout.addWidget(title)
        
        layout.addStretch()
        
        return widget


    def _create_watchlist_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å watchlist –∏ –∑–∞–¥–∞—á."""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        tabs = QTabWidget()
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ Watchlist + RSSI
        combined_tab = self._create_combined_watchlist_tab()
        tabs.addTab(combined_tab, "üì° –ò–∑–º–µ—Ä–µ–Ω–∏—è")
        
        # –í–∫–ª–∞–¥–∫–∞ –∑–∞–¥–∞—á
        tasks_tab = self._create_tasks_tab()
        tabs.addTab(tasks_tab, "üìã –ó–∞–¥–∞—á–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–ª–µ–π–≤–æ–≤
        coordinates_tab = self._create_coordinates_tab()
        tabs.addTab(coordinates_tab, "üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
        
        layout.addWidget(tabs)
        return widget

    def _create_combined_watchlist_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É watchlist —Å RSSI."""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–¥–∞–ª–µ–Ω–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        
        # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—Ñ–∏–ª—å—Ç—Ä—ã/–ø–æ—Ä–æ–≥–∏/–æ—á–∏—Å—Ç–∫–∞) —É–¥–∞–ª–µ–Ω—ã ‚Äî —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ
        
        # –í–µ–±-—Ç–∞–±–ª–∏—Ü–∞ –≤–º–µ—Å—Ç–æ QTableWidget –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.web_table_widget = WebTableWidget()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤–µ–±-—Ç–∞–±–ª–∏—Ü—ã
        self.web_table_widget.export_requested.connect(self._on_web_table_export)
        self.web_table_widget.map_navigate_requested.connect(self._on_web_table_map_navigate) 
        self.web_table_widget.clear_data_requested.connect(self._on_web_table_clear_data)
        
        layout.addWidget(self.web_table_widget)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.combined_table = self._create_combined_table_proxy()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ —Å–∫—Ä—ã—Ç–∞ ‚Äî –≤–µ–±-—Ç–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        
        return widget
    
    def _create_combined_table_proxy(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–∫—Å–∏-–æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å combined_table."""
        class CombinedTableProxy:
            def __init__(self, web_widget):
                self.web_widget = web_widget
                self._row_count = 0
            
            def rowCount(self):
                return self._row_count
            
            def setRowCount(self, count):
                self._row_count = count
                if count == 0:
                    self.web_widget.clear_all_data()
            
            def insertRow(self, row):
                self._row_count += 1
                return self._row_count - 1
            
            def setItem(self, row, col, item):
                # –ó–∞–≥–ª—É—à–∫–∞ - –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                pass
            
            def item(self, row, col):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                class ItemProxy:
                    def __init__(self, text=""):
                        self._text = text
                    def text(self):
                        return self._text
                    def setText(self, text):
                        self._text = text
                return ItemProxy()
        
        return CombinedTableProxy(self.web_table_widget)
    
    def _on_web_table_export(self, format_name: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ –≤–µ–±-—Ç–∞–±–ª–∏—Ü—ã."""
        try:
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –≤–µ–±-—Ç–∞–±–ª–∏—Ü—É
            data = self.web_table_widget.export_data(format_name)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            from PyQt5.QtWidgets import QFileDialog, QMessageBox
            import json
            
            filename, _ = QFileDialog.getSaveFileName(
                self,
                f"–≠–∫—Å–ø–æ—Ä—Ç RSSI –¥–∞–Ω–Ω—ã—Ö ({format_name})",
                f"rssi_data_{time.strftime('%Y%m%d_%H%M%S')}.json",
                "JSON files (*.json)"
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                
                QMessageBox.information(
                    self, 
                    "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
                    f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª:\n{filename}"
                )
                
        except Exception as e:
            print(f"[SlavesView] Export error: {e}")
    
    def _on_web_table_map_navigate(self, lat: float, lng: float):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∫–∞—Ä—Ç–µ –∏–∑ –≤–µ–±-—Ç–∞–±–ª–∏—Ü—ã."""
        try:
            # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –∫–∞—Ä—Ç—ã
            self.send_to_map.emit({
                'type': 'navigate_to_coordinates',
                'lat': lat,
                'lng': lng
            })
        except Exception as e:
            print(f"[SlavesView] Map navigation error: {e}")
    
    def _on_web_table_clear_data(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-—Ç–∞–±–ª–∏—Ü—ã."""
        try:
            self._clear_combined_data()
        except Exception as e:
            print(f"[SlavesView] Clear data error: {e}")


    def _create_tasks_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –∑–∞–¥–∞—á."""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –õ–æ–≥ –∑–∞–¥–∞—á
        self.tasks_log_view = QTextEdit()
        self.tasks_log_view.setReadOnly(True)
        self.tasks_log_view.setMaximumHeight(150)
        layout.addWidget(QLabel("–õ–æ–≥ –∑–∞–¥–∞—á:"))
        layout.addWidget(self.tasks_log_view)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
        self.tasks_table = QTableWidget()
        self.tasks_table.setColumnCount(6)
        self.tasks_table.setHorizontalHeaderLabels([
            "ID", "–î–∏–∞–ø–∞–∑–æ–Ω", "–°—Ç–∞—Ç—É—Å", "–ü—Ä–æ–≥—Ä–µ—Å—Å", "–í—Ä–µ–º—è", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
        ])
        layout.addWidget(self.tasks_table)
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        try:
            from PyQt5.QtWidgets import QAbstractItemView
            self.tasks_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        except Exception:
            pass
        # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞–¥–∞—á
        self.tasks_table.setStyleSheet("")
        self.tasks_table.verticalHeader().setDefaultSectionSize(22)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = QHBoxLayout()
        self.lbl_total_tasks = QLabel("–í—Å–µ–≥–æ: 0")
        self.lbl_pending_tasks = QLabel("–û–∂–∏–¥–∞–µ—Ç: 0")
        self.lbl_running_tasks = QLabel("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: 0")
        self.lbl_completed_tasks = QLabel("–ó–∞–≤–µ—Ä—à–µ–Ω–æ: 0")
        
        for lbl in [self.lbl_total_tasks, self.lbl_pending_tasks,
                   self.lbl_running_tasks, self.lbl_completed_tasks]:
            stats.addWidget(lbl)
        
        layout.addLayout(stats)
        return widget

    def _create_coordinates_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–ª–µ–π–≤–æ–≤."""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info = QLabel(
            "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ —Ä–æ–ª—è–º–∏ SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏.\n"
            "–ü–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ–ø–æ—Ä–Ω—ã–º (0, 0, 0).\n"
            "–ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ, —Ç–∞–±–ª–∏—Ü–∞ –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π."
        )
        info.setWordWrap(True)
        info.setStyleSheet("""
            QLabel {
                background-color: rgba(255, 165, 0, 30);
                padding: 10px;
                border-radius: 5px;
                margin-bottom: 10px;
            }
        """)
        layout.addWidget(info)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        self.coordinates_table = QTableWidget()
        self.coordinates_table.setColumnCount(6)
        self.coordinates_table.setHorizontalHeaderLabels([
            "–ù–∏–∫–Ω–µ–π–º", "–†–æ–ª—å", "X (–º–µ—Ç—Ä—ã)", "Y (–º–µ—Ç—Ä—ã)", "Z (–º–µ—Ç—Ä—ã)", "–°—Ç–∞—Ç—É—Å"
        ])
        self.coordinates_table.setAlternatingRowColors(True)
        # –Ø—á–µ–π–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–∞–º, –≥–¥–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —è–≤–Ω–æ
        try:
            from PyQt5.QtWidgets import QAbstractItemView
            self.coordinates_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        except Exception:
            pass
        # –¶–≤–µ—Ç–∞ —É—Å—Ç–æ–π—á–∏–≤—ã–µ –∫ —Ç–µ–º–∞–º
        self._color_reference = QColor(255, 215, 0, 180)
        self._color_available = QColor(76, 175, 80, 180)
        self._color_unavailable = QColor(244, 67, 54, 180)
        self._color_locked_bg = QColor(200, 200, 200, 120)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        header = self.coordinates_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)
        
        layout.addWidget(self.coordinates_table)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        # –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–æ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ. –ñ–¥—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        # self._initialize_coordinates_table()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        buttons_layout = QHBoxLayout()
        
        self.btn_sync_coords = QPushButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É
        self.btn_sync_coords.clicked.connect(lambda: (self._save_coordinates(), self._emit_current_coordinates_to_map()))
        buttons_layout.addWidget(self.btn_sync_coords)
        
        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)
        
        return widget

    def _create_status_bar(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞—Ä."""
        widget = QFrame()
        widget.setFrameStyle(QFrame.Box)
        layout = QHBoxLayout(widget)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ —Å–∫—Ä—ã—Ç–∞ ‚Äî –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–µ–±-—Ç–∞–±–ª–∏—Ü–∞
        
        return widget


    def update_rssi_value(self, range_str: str, slave_id: str, rssi_rms: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ RSSI –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ."""
        # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π
        self.update_combined_rssi(range_str, slave_id, rssi_rms)

    def _get_rssi_color(self, rssi: float) -> QColor:
        """–¶–≤–µ—Ç –¥–ª—è RSSI."""
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ä–∞—Å–∫—Ä–∞—Å–∫–∏
        threshold_val = -80
        
        if rssi >= threshold_val + 20:
            return QColor(74, 222, 128, 100)  # –ó–µ–ª–µ–Ω—ã–π
        elif rssi >= threshold_val + 10:
            return QColor(251, 191, 36, 100)  # –ñ–µ–ª—Ç—ã–π
        else:
            return QColor(248, 113, 113, 100) # –ö—Ä–∞—Å–Ω—ã–π

    def _update_data(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
        if self.orchestrator and hasattr(self.orchestrator, "get_ui_snapshot"):
            try:
                snapshot = self.orchestrator.get_ui_snapshot()
                if snapshot:
                    self.update_from_orchestrator(snapshot)
            except Exception as e:
                print(f"[SlavesView] Error: {e}")
        
        # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –≤–µ–±-—Ç–∞–±–ª–∏—Ü—É
        try:
            if self.web_table_widget:
                self.web_table_widget.update_performance_stats({'last_update': time.strftime('%H:%M:%S')})
        except Exception:
            pass

    def update_from_orchestrator(self, data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        # –û–±–Ω–æ–≤–ª—è–µ–º watchlist
        if 'watchlist' in data:
            self._render_watchlist(data['watchlist'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
        if 'tasks' in data:
            self._render_tasks(data['tasks'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º RSSI –∏–∑–º–µ—Ä–µ–Ω–∏—è
        if 'rssi_measurements' in data:
            for m in data['rssi_measurements']:
                self.update_rssi_value(
                    m['range'],
                    m['slave_id'],
                    m['rssi_rms']
                )

    def _render_watchlist(self, watchlist_data: List[Dict]):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç watchlist –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ."""
        # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π
        self._update_combined_from_watchlist(watchlist_data)
    
    def _update_combined_from_watchlist(self, watchlist_data: List[Dict]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ–±-—Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ watchlist."""
        if not self.web_table_widget:
            return
            
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ watchlist –¥–ª—è –≤–µ–±-—Ç–∞–±–ª–∏—Ü—ã
            rssi_data = {}
            targets_info = {}
            
            for data in watchlist_data:
                try:
                    freq = float(data.get('freq', 0))
                    span = float(data.get('span', 2.0))
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                    freq_start = freq - span/2
                    freq_end = freq + span/2
                    range_str = f"{freq_start:.1f}-{freq_end:.1f}"
                    
                    # –°–æ–±–∏—Ä–∞–µ–º RSSI –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ slave
                    range_rssi = {}
                    for i in range(3):
                        rms_key = f'rms_{i+1}'
                        val = data.get(rms_key)
                        
                        if val is not None:
                            rssi_val = float(val)
                            slave_id = f"slave{i}"
                            range_rssi[slave_id] = rssi_val
                    
                    if range_rssi:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å RSSI –¥–∞–Ω–Ω—ã–µ
                        rssi_data[range_str] = range_rssi
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–∏
                        targets_info[range_str] = {
                            'center_freq': freq,
                            'span': span,
                            'updated': data.get('updated', time.strftime('%H:%M:%S')),
                            'status': '–ò–ó–ú–ï–†–ï–ù–ò–ï' if range_rssi else '–û–ñ–ò–î–ê–ù–ò–ï',
                            'bins_used': {f'slave{i}': data.get(f'bins_used_{i+1}', 'N/A') for i in range(3)},
                            'timestamps': {f'slave{i}': data.get(f'timestamp_{i+1}', '') for i in range(3)}
                        }
                
                except Exception as e:
                    print(f"[SlavesView] Error processing watchlist item: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ–±-—Ç–∞–±–ª–∏—Ü—É
            if rssi_data:
                self.web_table_widget.update_rssi_data(rssi_data)
                self.web_table_widget.update_targets_info(targets_info)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_combined_stats()
            
        except Exception as e:
            print(f"[SlavesView] Error updating web table from watchlist: {e}")

    def _render_tasks(self, tasks_data: List[Dict]):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏."""
        # –õ–æ–≥
        log_lines = []
        for task in tasks_data[-20:]:
            timestamp = time.strftime('%H:%M:%S', 
                time.localtime(task.get('timestamp', time.time())))
            status = task.get('status', 'UNKNOWN')
            task_id = task.get('id', 'N/A')
            log_lines.append(f"[{timestamp}] Task {task_id}: {status}")
        
        self.tasks_log_view.setPlainText("\n".join(log_lines))
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        active = [t for t in tasks_data 
                 if t.get('status') in ['PENDING', 'RUNNING', '–û–ñ–ò–î–ê–ù–ò–ï', '–í–´–ü–û–õ–ù–ï–ù–ò–ï']]
        self.tasks_table.setRowCount(len(active))
        
        stats = {'pending': 0, 'running': 0, 'completed': 0}
        
        for row, task in enumerate(active):
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
            self.tasks_table.setItem(row, 0, 
                QTableWidgetItem(task.get('id', '')))
            self.tasks_table.setItem(row, 1, 
                QTableWidgetItem(task.get('range', '')))
            
            # –°—Ç–∞—Ç—É—Å - –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            status = task.get('status', '')
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            if status == 'RUNNING':
                status_text = '–í–´–ü–û–õ–ù–ï–ù–ò–ï'
                status_item = QTableWidgetItem(status_text)
                status_item.setBackground(QBrush(QColor(74, 222, 128, 100)))
                stats['running'] += 1
            elif status == 'PENDING':
                status_text = '–û–ñ–ò–î–ê–ù–ò–ï'
                status_item = QTableWidgetItem(status_text)
                status_item.setBackground(QBrush(QColor(251, 191, 36, 100)))
                stats['pending'] += 1
            elif status == 'COMPLETED':
                status_text = '–ó–ê–í–ï–†–®–ï–ù–û'
                status_item = QTableWidgetItem(status_text)
                status_item.setBackground(QBrush(QColor(200, 200, 200, 100)))
                stats['completed'] += 1
            else:
                status_text = status  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω
                status_item = QTableWidgetItem(status_text)
            self.tasks_table.setItem(row, 2, status_item)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            progress = QProgressBar()
            progress.setValue(task.get('progress', 0))
            self.tasks_table.setCellWidget(row, 3, progress)
            
            # –í—Ä–µ–º—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            self.tasks_table.setItem(row, 4, 
                QTableWidgetItem(task.get('time', '')))
            self.tasks_table.setItem(row, 5, 
                QTableWidgetItem(task.get('priority', 'NORMAL')))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.lbl_total_tasks.setText(f"–í—Å–µ–≥–æ: {len(tasks_data)}")
        self.lbl_pending_tasks.setText(f"–û–∂–∏–¥–∞–µ—Ç: {stats['pending']}")
        self.lbl_running_tasks.setText(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {stats['running']}")
        self.lbl_completed_tasks.setText(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']}")

    def add_transmitter(self, result):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏ –≤ –≤–µ–±-—Ç–∞–±–ª–∏—Ü—É."""
        try:
            if not self.web_table_widget:
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
            peak_id = getattr(result, 'peak_id', 'unknown')
            freq = getattr(result, 'freq_mhz', 0.0)
            x = getattr(result, 'x', 0.0)
            y = getattr(result, 'y', 0.0)
            confidence = getattr(result, 'confidence', 0.0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            range_str = f"{freq-1.0:.1f}-{freq+1.0:.1f}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
            current_data = self.web_table_widget.get_current_data()
            targets_info = current_data.get('targets_info', {})
            
            if range_str not in targets_info:
                targets_info[range_str] = {}
            
            targets_info[range_str].update({
                'center_freq': freq,
                'x': x,
                'y': y,
                'confidence': confidence,
                'peak_id': peak_id,
                'status': '–û–ë–ù–ê–†–£–ñ–ï–ù',
                'trilateration_time': time.strftime("%H:%M:%S"),
                'has_trilateration': True
            })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ–±-—Ç–∞–±–ª–∏—Ü—É
            self.web_table_widget.update_targets_info(targets_info)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_combined_stats()
            
        except Exception as e:
            print(f"[SlavesView] Error adding transmitter to web table: {e}")
    
    def _find_or_create_combined_row(self, range_str: str, center_freq: float) -> int:
        """–ù–∞—Ö–æ–¥–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ."""
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        for row in range(self.combined_table.rowCount()):
            item = self.combined_table.item(row, 0)
            if item and item.text() == range_str:
                return row
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        row = self.combined_table.rowCount()
        self.combined_table.insertRow(row)
        
        self.combined_table.setItem(row, 0, QTableWidgetItem(range_str))  # –î–∏–∞–ø–∞–∑–æ–Ω
        self.combined_table.setItem(row, 1, QTableWidgetItem(f"{center_freq:.1f}"))  # –¶–µ–Ω—Ç—Ä
        self.combined_table.setItem(row, 2, QTableWidgetItem("2.0"))  # –®–∏—Ä–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RSSI –∫–æ–ª–æ–Ω–∫–∏
        for col in range(3, 6):
            self.combined_table.setItem(row, col, QTableWidgetItem("‚Äî"))
        
        return row

    def _send_to_map(self, data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –∫–∞—Ä—Ç—É."""
        self.send_to_map.emit(data)

    def _on_add_measurement_to_map(self, row: int, payload: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏."""
        try:
            self.send_to_map.emit(payload)
            btn = self.combined_table.cellWidget(row, 10)
            if btn:
                btn.setProperty('sent_to_map', True)
                btn.setEnabled(False)
                btn.setText("‚úÖ")
                btn.setToolTip("–£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç—É")
                btn.setStyleSheet(
                    "QPushButton { background-color: #2E7D32; color: #ffffff;"
                    " border: none; padding: 4px 8px; border-radius: 3px; }"
                )
        except Exception:
            pass

    def _clear_watchlist(self):
        """–û—á–∏—â–∞–µ—Ç watchlist (–≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ)."""
        # –û—á–∏—â–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        self._clear_combined_data()

    def _refresh_data(self):
        """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."""
        self._update_data()

    def _clear_data(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ."""
        if hasattr(self, 'tasks_table') and self.tasks_table:
            self.tasks_table.setRowCount(0)
            
        if hasattr(self, 'combined_table') and self.combined_table:
            self.combined_table.setRowCount(0)
            
        if hasattr(self, 'tasks_log_view') and self.tasks_log_view:
            self.tasks_log_view.clear()
            
        self._update_combined_stats()
    
    # –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    def _filter_combined_table(self):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É."""
        filter_text = self.range_filter.currentText()
        
        for row in range(self.combined_table.rowCount()):
            item = self.combined_table.item(row, 0)
            if item:
                if filter_text == "–í—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã":
                    self.combined_table.setRowHidden(row, False)
                else:
                    self.combined_table.setRowHidden(row, item.text() != filter_text)
    
    def _update_combined_colors(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–∞ RSSI –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ."""
        threshold = self.threshold_spin.value()
        
        for row in range(self.combined_table.rowCount()):
            for col in range(3, 6):  # RSSI –∫–æ–ª–æ–Ω–∫–∏
                item = self.combined_table.item(row, col)
                if item and item.text() != "‚Äî":
                    try:
                        rssi = float(item.text())
                        item.setBackground(QBrush(self._get_rssi_color(rssi)))
                    except:
                        pass
    
    def _clear_combined_data(self):
        """–û—á–∏—â–∞–µ—Ç –≤–µ–±-—Ç–∞–±–ª–∏—Ü—É."""
        if self.web_table_widget:
            self.web_table_widget.clear_all_data()
        # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –ø—Ä–æ–∫—Å–∏-—Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if hasattr(self.combined_table, 'setRowCount'):
            self.combined_table.setRowCount(0)
        self._update_combined_stats()
    
    def _update_combined_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ–±-—Ç–∞–±–ª–∏—Ü—ã."""
        if not self.web_table_widget:
            return
            
        try:
            current_data = self.web_table_widget.get_current_data()
            rssi_data = current_data.get('rssi_data', {})
            
            total_count = len(rssi_data)
            active_count = 0
            all_rssi = []
            
            for range_str, slaves_rssi in rssi_data.items():
                if slaves_rssi:  # –ï—Å—Ç—å RSSI –¥–∞–Ω–Ω—ã–µ
                    active_count += 1
                    for slave_id, rssi_val in slaves_rssi.items():
                        try:
                            all_rssi.append(float(rssi_val))
                        except:
                            pass
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–µ–±-—Ç–∞–±–ª–∏—Ü—É
            stats = {
                'total_ranges': total_count,
                'active_ranges': active_count,
                'avg_rssi': float(np.mean(all_rssi)) if all_rssi else None,
                'total_measurements': len(all_rssi),
                'last_update': time.strftime('%H:%M:%S')
            }
            
            self.web_table_widget.update_performance_stats(stats)
            
        except Exception as e:
            print(f"[SlavesView] Error updating web table stats: {e}")
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    def _initialize_coordinates_table(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç."""
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        self.coordinates_table.setRowCount(0)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ JSON
        saved_devices = self._load_saved_devices_from_json()
        
        if saved_devices:
            self._populate_coordinates_table_from_saved_data(saved_devices)
            print(f"[SlavesView] Loaded {len(saved_devices)} saved devices from JSON")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –∫–∞—Ä—Ç—É
            self._send_saved_devices_to_map(saved_devices)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self._show_empty_coordinates_message()
    
    def _send_saved_devices_to_map(self, devices_data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –∫–∞—Ä—Ç—É."""
        try:
            stations_data = []
            
            for device in devices_data:
                x, y, z = device.get('coords', (0.0, 0.0, 0.0))
                stations_data.append({
                    'id': device.get('nickname', 'Unknown'),
                    'x': x,
                    'y': y,
                    'z': z,
                    'is_reference': device.get('is_reference', False),
                    'is_active': True
                })
            
            # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—É
            self.send_to_map.emit({
                'type': 'stations_update',
                'stations': stations_data
            })
            
            print(f"[SlavesView] Sent {len(stations_data)} saved stations to map")
            
        except Exception as e:
            print(f"[SlavesView] Error sending saved devices to map: {e}")
    
    def _show_empty_coordinates_message(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        # –ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
        self.coordinates_table.setRowCount(0)
    
    def _load_saved_devices_from_json(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        try:
            import json
            from pathlib import Path
            
            config_file = Path.home() / ".panorama" / "device_config.json"
            
            if not config_file.exists():
                return []
            
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            devices = []
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ Slave —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (Master –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏)
            slaves = config.get('slaves', [])
            reference_found = False
            
            for i, slave in enumerate(slaves):
                pos = slave.get('pos', [0.0, 0.0, 0.0])
                nickname = slave.get('nickname', f'Slave{i+1}')
                
                # –ü–µ—Ä–≤—ã–π Slave —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ–ø–æ—Ä–Ω—ã–º
                is_reference = (i == 0) or (pos[0] == 0.0 and pos[1] == 0.0 and pos[2] == 0.0 and not reference_found)
                
                if is_reference:
                    reference_found = True
                    pos = [0.0, 0.0, 0.0]  # –û–ø–æ—Ä–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Å–µ–≥–¥–∞ –≤ (0,0,0)
                
                devices.append({
                    'nickname': nickname,
                    'role': '–û–ø–æ—Ä–Ω–æ–µ' if is_reference else '–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ',
                    'coords': (float(pos[0]), float(pos[1]), float(pos[2])),
                    'status': 'REFERENCE' if is_reference else 'AVAILABLE',
                    'is_reference': is_reference
                })
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–ª–∏ –Ω–µ—Ç –æ–ø–æ—Ä–Ω–æ–≥–æ, –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–ø–æ—Ä–Ω—ã–º
            if devices and not reference_found:
                devices[0]['role'] = '–û–ø–æ—Ä–Ω–æ–µ'
                devices[0]['status'] = 'REFERENCE' 
                devices[0]['is_reference'] = True
                devices[0]['coords'] = (0.0, 0.0, 0.0)
            
            return devices
            
        except Exception as e:
            print(f"[SlavesView] Error loading saved devices from JSON: {e}")
            return []
    
    def _populate_coordinates_table_from_saved_data(self, devices_data):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        try:
            self.coordinates_table.clearSpans()
            self.coordinates_table.setRowCount(len(devices_data))
            
            for row, device in enumerate(devices_data):
                is_reference = device.get('is_reference', False)
                
                # –ù–∏–∫–Ω–µ–π–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                nickname = device.get('nickname', f'Device-{row}')
                nickname_item = QTableWidgetItem(nickname)
                # –ù–∏–∫–Ω–µ–π–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                nickname_item.setFlags(nickname_item.flags() & ~Qt.ItemIsEditable)
                nickname_item.setToolTip("–ù–∏–∫–Ω–µ–π–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –î–∏—Å–ø–µ—Ç—á–µ—Ä–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                
                if is_reference:
                    nickname_item.setBackground(QBrush(self._color_reference))
                    nickname_item.setToolTip("–û–ø–æ—Ä–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (0,0,0)")
                
                self.coordinates_table.setItem(row, 0, nickname_item)
                
                # –†–æ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                role_combo = QComboBox()
                role_combo.addItems([
                    "–û–ø–æ—Ä–Ω–æ–µ", "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", "–†–µ–∑–µ—Ä–≤–Ω–æ–µ", "–û—Ç–∫–ª—é—á–µ–Ω–æ"
                ])
                
                saved_role = device.get('role', '–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ')
                role_combo.setCurrentText(saved_role)
                
                if is_reference:
                    role_combo.setEnabled(False)
                    role_combo.setToolTip("–ü–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Å–µ–≥–¥–∞ –æ–ø–æ—Ä–Ω–æ–µ")
                
                role_combo.setProperty('device_data', device)
                role_combo.currentTextChanged.connect(self._on_role_changed)
                
                self.coordinates_table.setCellWidget(row, 1, role_combo)
                
                # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                x, y, z = device.get('coords', (0.0, 0.0, 0.0))
                
                x_item = QTableWidgetItem(f"{x:.1f}")
                y_item = QTableWidgetItem(f"{y:.1f}")
                z_item = QTableWidgetItem(f"{z:.1f}")
                
                # –û–ø–æ—Ä–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è
                if is_reference:
                    for item in [x_item, y_item, z_item]:
                        item.setFlags(item.flags() & ~Qt.ItemIsEditable)
                        item.setBackground(QBrush(self._color_locked_bg))
                        item.setToolTip("–û–ø–æ—Ä–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–º–µ–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (0,0,0)")
                
                self.coordinates_table.setItem(row, 2, x_item)
                self.coordinates_table.setItem(row, 3, y_item)
                self.coordinates_table.setItem(row, 4, z_item)
                
                # –°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                status = device.get('status', 'UNKNOWN')
                if status == 'REFERENCE' or is_reference:
                    status_text = '–û–ü–û–†–ù–û–ï'
                    status_color = self._color_reference
                elif status == 'AVAILABLE' or status == 'ACTIVE':
                    status_text = '–î–û–°–¢–£–ü–ù–û'
                    status_color = QColor(74, 222, 128, 100)  # –ó–µ–ª–µ–Ω—ã–π
                else:
                    status_text = '–ù–ï–ò–ó–í–ï–°–¢–ù–û'
                    status_color = QColor(200, 200, 200, 100)  # –°–µ—Ä—ã–π
                
                status_item = QTableWidgetItem(status_text)
                status_item.setBackground(QBrush(status_color))
                self.coordinates_table.setItem(row, 5, status_item)
                
                print(f"[SlavesView] Loaded device {nickname} with coords ({x:.1f}, {y:.1f}, {z:.1f})")
                
        except Exception as e:
            print(f"[SlavesView] Error populating coordinates table: {e}")
            import traceback
            traceback.print_exc()
    
    def _save_coordinates(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–æ–ª–∏ SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        try:
            devices_config = []
            
            for row in range(self.coordinates_table.rowCount()):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                nickname_item = self.coordinates_table.item(row, 0)
                if not nickname_item or nickname_item.flags() == Qt.NoItemFlags:
                    continue
                
                nickname = nickname_item.text()
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ –∫–æ–º–±–æ–±–æ–∫—Å–∞
                role_widget = self.coordinates_table.cellWidget(row, 1)
                role = role_widget.currentText() if role_widget else "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è)
                def safe_float_convert(item, default=0.0):
                    if not item or not item.text().strip():
                        return default
                    try:
                        return float(item.text().strip())
                    except (ValueError, AttributeError):
                        return default
                
                # –î–ª—è –æ–ø–æ—Ä–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ–≥–¥–∞ (0,0,0)
                if role == "–û–ø–æ—Ä–Ω–æ–µ":
                    x, y, z = 0.0, 0.0, 0.0
                else:
                    x = safe_float_convert(self.coordinates_table.item(row, 2), 0.0)
                    y = safe_float_convert(self.coordinates_table.item(row, 3), 0.0)
                    z = safe_float_convert(self.coordinates_table.item(row, 4), 0.0)
                
                device_config = {
                    "nickname": nickname,
                    "role": role,
                    "x": x,
                    "y": y,
                    "z": z,
                    "is_reference": role == "–û–ø–æ—Ä–Ω–æ–µ"
                }
                
                devices_config.append(device_config)
            
            # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—É
            self._update_map_with_coordinates(devices_config)
            
            print(f"[SlavesView] Saving configuration for {len(devices_config)} devices:")
            for device in devices_config:
                print(f"  - {device['nickname']}: {device['role']} at ({device['x']}, {device['y']}, {device['z']})")
            
            # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            # if hasattr(self, 'orchestrator') and self.orchestrator:
            #     self.orchestrator.update_devices_configuration(devices_config)
            
        except Exception as e:
            print(f"[SlavesView] Error saving coordinates: {e}")
            import traceback
            traceback.print_exc()
    
    def _update_map_with_coordinates(self, devices_config):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É —Å –Ω–æ–≤—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        try:
            slaves_data = []
            
            for device in devices_config:
                slaves_data.append({
                    'id': device['nickname'],
                    'x': device['x'], 
                    'y': device['y'],
                    'z': device['z'],
                    'type': 'sdr_device',
                    'role': device['role'],
                    'is_reference': device['is_reference']
                })
            
            # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—É
            self.send_to_map.emit({
                'type': 'update_devices_coordinates',
                'devices': slaves_data
            })
            
            print(f"[SlavesView] Sent {len(slaves_data)} device coordinates to map")
            
        except Exception as e:
            print(f"[SlavesView] Error updating map with coordinates: {e}")
    
    def _reset_coordinates(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        self._initialize_coordinates_table()
    
    # –£–¥–∞–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–µ ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    
    def update_combined_rssi(self, range_str: str, slave_id: str, rssi_rms: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç RSSI —á–µ—Ä–µ–∑ –≤–µ–±-—Ç–∞–±–ª–∏—Ü—É."""
        try:
            if not self.web_table_widget:
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ–±-—Ç–∞–±–ª–∏—Ü–µ
            current_data = self.web_table_widget.get_current_data()
            rssi_data = current_data.get('rssi_data', {})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ RSSI –∑–Ω–∞—á–µ–Ω–∏–µ
            if range_str not in rssi_data:
                rssi_data[range_str] = {}
            
            rssi_data[range_str][slave_id] = rssi_rms
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ–±-—Ç–∞–±–ª–∏—Ü—É
            self.web_table_widget.update_rssi_data(rssi_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_combined_stats()
        
        except Exception as e:
            print(f"[SlavesView] Error updating web table RSSI: {e}")

    def _on_combined_item_double_clicked(self, item: QTableWidgetItem):
        """–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–∞—Ä—Ç—É (–±–µ–∑ —Ç—è–∂—ë–ª—ã—Ö –∫–Ω–æ–ø–æ–∫)."""
        try:
            row = item.row()
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
            range_item = self.combined_table.item(row, 0)
            center_item = self.combined_table.item(row, 1)
            x_item = self.combined_table.item(row, 6)
            y_item = self.combined_table.item(row, 7)
            payload = {
                'type': 'target',
                'range': range_item.text() if range_item else '',
                'freq': float(center_item.text()) if center_item and center_item.text() else 0.0,
                'x': float(x_item.text()) if x_item and x_item.text() else 0.0,
                'y': float(y_item.text()) if y_item and y_item.text() else 0.0,
            }
            self.send_to_map.emit(payload)
        except Exception:
            pass
            
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    def manual_refresh(self):
        """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞)."""
        self._refresh_data()
    
    def export_current_state(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)."""
        try:
            import json
            from PyQt5.QtWidgets import QFileDialog, QMessageBox
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = {
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'rssi_data': [],
                'coordinates': {},
                'combined_data': []
            }
            
            # RSSI –¥–∞–Ω–Ω—ã–µ
            for row in range(self.combined_table.rowCount()):
                range_item = self.combined_table.item(row, 0)
                if range_item:
                    row_data = {
                        'range': range_item.text(),
                        'center_freq': self.combined_table.item(row, 1).text() if self.combined_table.item(row, 1) else '',
                        'rssi_slave0': self.combined_table.item(row, 3).text() if self.combined_table.item(row, 3) else '‚Äî',
                        'rssi_slave1': self.combined_table.item(row, 4).text() if self.combined_table.item(row, 4) else '‚Äî',
                        'rssi_slave2': self.combined_table.item(row, 5).text() if self.combined_table.item(row, 5) else '‚Äî',
                        'x': self.combined_table.item(row, 6).text() if self.combined_table.item(row, 6) else '',
                        'y': self.combined_table.item(row, 7).text() if self.combined_table.item(row, 7) else '',
                        'confidence': self.combined_table.item(row, 8).text() if self.combined_table.item(row, 8) else '',
                    }
                    export_data['combined_data'].append(row_data)
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ª–µ–π–≤–æ–≤
            for row in range(self.coordinates_table.rowCount()):
                slave_id = self.coordinates_table.item(row, 0).text()
                export_data['coordinates'][slave_id] = {
                    'x': float(self.coordinates_table.item(row, 1).text()),
                    'y': float(self.coordinates_table.item(row, 2).text()),
                    'z': float(self.coordinates_table.item(row, 3).text()),
                    'status': self.coordinates_table.item(row, 4).text()
                }
            
            # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            filename, _ = QFileDialog.getSaveFileName(
                self, 
                "–≠–∫—Å–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ª–µ–π–≤–æ–≤", 
                f"slaves_state_{time.strftime('%Y%m%d_%H%M%S')}.json",
                "JSON files (*.json)"
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(export_data, f, ensure_ascii=False, indent=2)
                
                QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", 
                                      f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ñ–∞–π–ª:\n{filename}")
                print(f"[SlavesView] State exported to: {filename}")
                
        except Exception as e:
            print(f"[SlavesView] Export error: {e}")
            if 'QMessageBox' in globals():
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:\n{e}")
    
    def clear_all_data(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞)."""
        self._clear_data()
    
    def update_transmitter_position(self, transmitter_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)."""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        try:
            freq = transmitter_data.get('freq_mhz', 0.0)
            x = transmitter_data.get('x', 0.0)
            y = transmitter_data.get('y', 0.0)
            confidence = transmitter_data.get('confidence', 0.0)
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —á–∞—Å—Ç–æ—Ç–µ
            for row in range(self.combined_table.rowCount()):
                freq_item = self.combined_table.item(row, 1)
                if freq_item and abs(float(freq_item.text()) - freq) < 0.1:  # Tolerance 100kHz
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    self.combined_table.setItem(row, 6, QTableWidgetItem(f"{x:.1f}"))
                    self.combined_table.setItem(row, 7, QTableWidgetItem(f"{y:.1f}"))
                    self.combined_table.setItem(row, 8, QTableWidgetItem(f"{confidence*100:.0f}%"))
                    self.combined_table.setItem(row, 9, QTableWidgetItem(time.strftime("%H:%M:%S")))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    self.combined_table.setItem(row, 11, QTableWidgetItem("–û–¢–°–õ–ï–ñ–ï–ù"))
                    break
                    
        except Exception as e:
            print(f"[SlavesView] Error updating transmitter position: {e}")
    
    def update_available_devices(self, devices_data: list):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
            if hasattr(self, 'coordinates_table'):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                existing_coords = {}
                for row in range(self.coordinates_table.rowCount()):
                    nickname_item = self.coordinates_table.item(row, 0)
                    if not nickname_item or not nickname_item.text().strip():
                        continue
                        
                    slave_id = nickname_item.text()
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    def safe_float_convert(item, default=0.0):
                        if not item or not item.text().strip():
                            return default
                        try:
                            return float(item.text().strip())
                        except (ValueError, AttributeError):
                            return default
                    
                    x = safe_float_convert(self.coordinates_table.item(row, 2), 0.0)
                    y = safe_float_convert(self.coordinates_table.item(row, 3), 0.0) 
                    z = safe_float_convert(self.coordinates_table.item(row, 4), 0.0)
                    existing_coords[slave_id] = (x, y, z)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
                devices_to_show = []
                
                # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º slave0 –∫–∞–∫ –æ–ø–æ—Ä–Ω—É—é —Ç–æ—á–∫—É
                devices_to_show.append({
                    'id': 'slave0', 
                    'coords': existing_coords.get('slave0', (0.0, 0.0, 0.0)),
                    'status': 'REFERENCE'
                })
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                for i, device in enumerate(devices_data[:6], 1):  # –ú–∞–∫—Å–∏–º—É–º 6 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    slave_id = f"slave{i}"
                    nickname = getattr(device, 'nickname', f'Slave{i}')
                    
                    devices_to_show.append({
                        'id': slave_id,
                        'nickname': nickname, 
                        'coords': existing_coords.get(slave_id, (10.0*i, 0.0, 0.0)),
                        'status': 'AVAILABLE' if getattr(device, 'is_available', True) else 'UNAVAILABLE'
                    })
                
                self._update_coordinates_table_with_devices(devices_to_show)
                print(f"[SlavesView] Updated coordinates table with {len(devices_data)} devices")
                
        except Exception as e:
            print(f"[SlavesView] Error updating available devices: {e}")

    def update_coordinates_from_manager(self, devices_data: list):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –µ—ë –±–µ–∑ –¥–æ–º—ã—Å–ª–æ–≤.
        –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:
        {
            'nickname': str,
            'serial': str,
            'driver': str,
            'coords': (x, y, z),
            'status': 'REFERENCE' | 'AVAILABLE' | 'UNAVAILABLE',
            'is_reference': bool
        }
        """
        try:
            if not devices_data:
                self._show_empty_coordinates_message()
                return
            # –ü—Ä—è–º–æ –≥–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
            prepared = []
            for d in devices_data:
                try:
                    prepared.append({
                        'nickname': d.get('nickname') or f"SDR-{(d.get('serial') or '0000')[-4:]}",
                        'serial': d.get('serial', ''),
                        'coords': d.get('coords', (0.0, 0.0, 0.0)),
                        'status': d.get('status', 'AVAILABLE'),
                        'is_reference': bool(d.get('is_reference', False))
                    })
                except Exception:
                    continue
            self._update_coordinates_table_with_devices(prepared)
            print(f"[SlavesView] Coordinates synced from manager: {len(prepared)} devices")
        except Exception as e:
            print(f"[SlavesView] Error syncing coordinates from manager: {e}")
    
    def _update_coordinates_table_with_devices(self, devices_list):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏."""
        try:
            # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ span –µ—Å–ª–∏ –±—ã–ª–∞
            self.coordinates_table.clearSpans()
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not devices_list:
                self._show_empty_coordinates_message()
                return
            
            self.coordinates_table.setRowCount(len(devices_list))
            
            # –ò—â–µ–º –æ–ø–æ—Ä–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä–≤–æ–µ
            reference_found = any(d.get('is_reference', False) for d in devices_list)
            
            for row, device in enumerate(devices_list):
                # –ü–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ–ø–æ—Ä–Ω—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–æ–≥–æ –æ–ø–æ—Ä–Ω–æ–≥–æ
                is_reference = device.get('is_reference', False) or (row == 0 and not reference_found)
                
                # –ù–∏–∫–Ω–µ–π–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                nickname = device.get('nickname', f"SDR-{device.get('serial', 'Unknown')[-4:]}")
                nickname_item = QTableWidgetItem(nickname)
                # –ù–∏–∫–Ω–µ–π–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                nickname_item.setFlags(nickname_item.flags() & ~Qt.ItemIsEditable)
                nickname_item.setToolTip("–ù–∏–∫–Ω–µ–π–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –î–∏—Å–ø–µ—Ç—á–µ—Ä–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                
                if is_reference:
                    nickname_item.setBackground(QBrush(self._color_reference))  # –ó–æ–ª–æ—Ç–æ–π –¥–ª—è –æ–ø–æ—Ä–Ω–æ–≥–æ
                    nickname_item.setToolTip("–û–ø–æ—Ä–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (0,0,0)")
                
                self.coordinates_table.setItem(row, 0, nickname_item)
                
                # –†–æ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
                role_combo = QComboBox()
                role_combo.addItems([
                    "–û–ø–æ—Ä–Ω–æ–µ", "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", "–†–µ–∑–µ—Ä–≤–Ω–æ–µ", "–û—Ç–∫–ª—é—á–µ–Ω–æ"
                ])
                
                if is_reference:
                    role_combo.setCurrentText("–û–ø–æ—Ä–Ω–æ–µ")
                    role_combo.setEnabled(False)  # –û–ø–æ—Ä–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å
                    role_combo.setToolTip("–ü–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Å–µ–≥–¥–∞ –æ–ø–æ—Ä–Ω–æ–µ")
                else:
                    role_combo.setCurrentText("–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ
                role_combo.setProperty('device_data', device)
                role_combo.currentTextChanged.connect(self._on_role_changed)
                
                self.coordinates_table.setCellWidget(row, 1, role_combo)
                
                # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                x, y, z = device.get('coords', (0.0, 0.0, 0.0))
                
                # –î–ª—è –æ–ø–æ—Ä–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ–≥–¥–∞ (0,0,0)
                if is_reference:
                    x, y, z = 0.0, 0.0, 0.0
                
                x_item = QTableWidgetItem(f"{x:.1f}")
                y_item = QTableWidgetItem(f"{y:.1f}")  
                z_item = QTableWidgetItem(f"{z:.1f}")
                
                # –û–ø–æ—Ä–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è
                if is_reference:
                    for item in [x_item, y_item, z_item]:
                        item.setFlags(item.flags() & ~Qt.ItemIsEditable)
                        item.setBackground(QBrush(self._color_locked_bg))
                        item.setToolTip("–û–ø–æ—Ä–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–º–µ–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (0,0,0)")
                
                self.coordinates_table.setItem(row, 2, x_item)
                self.coordinates_table.setItem(row, 3, y_item)
                self.coordinates_table.setItem(row, 4, z_item)
                
                # –°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                status = device.get('status', 'UNKNOWN')
                if status == 'REFERENCE' or is_reference:
                    status_text = '–û–ü–û–†–ù–û–ï'
                    status_color = self._color_reference
                elif status == 'AVAILABLE' or status == 'ACTIVE':
                    status_text = '–î–û–°–¢–£–ü–ù–û'
                    status_color = self._color_available
                elif status == 'UNAVAILABLE':
                    status_text = '–ù–ï–î–û–°–¢–£–ü–ù–û'
                    status_color = self._color_unavailable
                else:
                    status_text = '–ù–ï–ò–ó–í–ï–°–¢–ù–û'
                    status_color = QColor(200, 200, 200, 100)  # –°–µ—Ä—ã–π
                
                status_item = QTableWidgetItem(status_text)
                status_item.setBackground(QBrush(status_color))
                self.coordinates_table.setItem(row, 5, status_item)
                
                print(f"[SlavesView] Added device {nickname} as {'reference' if is_reference else 'measurement'}")
                
        except Exception as e:
            print(f"[SlavesView] Error updating coordinates table: {e}")
            import traceback
            traceback.print_exc()
    
    def _on_role_changed(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        try:
            sender = self.sender()  # QComboBox –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏–ª—Å—è
            if sender:
                device_data = sender.property('device_data')
                new_role = sender.currentText()
                
                if device_data:
                    nickname = device_data.get('nickname', 'Unknown')
                    print(f"[SlavesView] Role changed for {nickname}: {new_role}")
                    
                    # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å—Ç–∞–ª–æ –æ–ø–æ—Ä–Ω—ã–º
                    if new_role == "–û–ø–æ—Ä–Ω–æ–µ":
                        self._handle_new_reference_device(sender)
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É —Å—Ä–∞–∑—É
                    self._save_coordinates()
                    self._emit_current_coordinates_to_map()
                    
        except Exception as e:
            print(f"[SlavesView] Error handling role change: {e}")
    
    def _handle_new_reference_device(self, new_reference_combo):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø–æ—Ä–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –Ω–æ–≤–æ–≥–æ –æ–ø–æ—Ä–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            new_reference_row = -1
            for row in range(self.coordinates_table.rowCount()):
                combo = self.coordinates_table.cellWidget(row, 1)
                if combo == new_reference_combo:
                    new_reference_row = row
                    break
            
            if new_reference_row == -1:
                return
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ" –∫—Ä–æ–º–µ –Ω–æ–≤–æ–≥–æ –æ–ø–æ—Ä–Ω–æ–≥–æ
            for row in range(self.coordinates_table.rowCount()):
                if row == new_reference_row:
                    continue
                    
                combo = self.coordinates_table.cellWidget(row, 1)
                if combo and combo.currentText() == "–û–ø–æ—Ä–Ω–æ–µ":
                    combo.setCurrentText("–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ")
                    # –†–∞–∑—Ä–µ—à–∞–µ–º –º–µ–Ω—è—Ç—å —Ä–æ–ª—å —Å–Ω–æ–≤–∞
                    combo.setEnabled(True)
                    
                    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–ø–æ—Ä–Ω–æ–≥–æ
                    for col in [2, 3, 4]:  # X, Y, Z –∫–æ–ª–æ–Ω–∫–∏
                        item = self.coordinates_table.item(row, col)
                        if item:
                            item.setFlags(item.flags() | Qt.ItemIsEditable)
                            item.setBackground(QBrush(QColor(60, 60, 60)))
                            item.setToolTip("")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    status_item = self.coordinates_table.item(row, 5)
                    if status_item:
                        status_item.setText("–î–û–°–¢–£–ü–ù–û")
                        status_item.setBackground(QBrush(self._color_available))
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–æ—Ä–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            self._setup_reference_device(new_reference_row)
            
            print(f"[SlavesView] New reference device set at row {new_reference_row}")
            
        except Exception as e:
            print(f"[SlavesView] Error handling new reference device: {e}")
            import traceback
            traceback.print_exc()
    
    def _setup_reference_device(self, row):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–∞–∫ –æ–ø–æ—Ä–Ω–æ–µ."""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (0,0,0)
            for col, val in [(2, "0.0"), (3, "0.0"), (4, "0.0")]:
                item = self.coordinates_table.item(row, col)
                if item:
                    item.setText(val)
                    item.setFlags(item.flags() & ~Qt.ItemIsEditable)  # –ó–∞–ø—Ä–µ—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    item.setBackground(QBrush(QColor(200, 200, 200, 100)))
                    item.setToolTip("–û–ø–æ—Ä–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–º–µ–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (0,0,0)")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º —Å –∑–æ–ª–æ—Ç—ã–º —Ñ–æ–Ω–æ–º
            nickname_item = self.coordinates_table.item(row, 0)
            if nickname_item:
                nickname_item.setBackground(QBrush(self._color_reference))
                nickname_item.setToolTip("–û–ø–æ—Ä–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (0,0,0)")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status_item = self.coordinates_table.item(row, 5)
            if status_item:
                status_item.setText("–û–ü–û–†–ù–û–ï")
                status_item.setBackground(QBrush(self._color_reference))
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏
            combo = self.coordinates_table.cellWidget(row, 1)
            if combo:
                combo.setCurrentText("–û–ø–æ—Ä–Ω–æ–µ")
                combo.setEnabled(False)
                combo.setToolTip("–û–ø–æ—Ä–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –æ—Å–Ω–æ–≤–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
            
        except Exception as e:
            print(f"[SlavesView] Error setting up reference device: {e}")

    def _emit_current_coordinates_to_map(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –∫–∞—Ä—Ç—É."""
        try:
            devices = []
            for row in range(self.coordinates_table.rowCount()):
                nickname_item = self.coordinates_table.item(row, 0)
                if not nickname_item or not nickname_item.text().strip():
                    continue
                nickname = nickname_item.text()
                role_widget = self.coordinates_table.cellWidget(row, 1)
                role = role_widget.currentText() if role_widget else "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
                
                def safe_float_convert(item, default=0.0):
                    if not item or not item.text().strip():
                        return default
                    try:
                        return float(item.text().strip())
                    except (ValueError, AttributeError):
                        return default
                x = safe_float_convert(self.coordinates_table.item(row, 2), 0.0)
                y = safe_float_convert(self.coordinates_table.item(row, 3), 0.0)
                z = safe_float_convert(self.coordinates_table.item(row, 4), 0.0)
                devices.append({
                    'id': nickname,
                    'x': x, 'y': y, 'z': z,
                    'type': 'sdr_device',
                    'role': role,
                    'is_reference': role == "–û–ø–æ—Ä–Ω–æ–µ"
                })
            self.send_to_map.emit({
                'type': 'update_devices_coordinates',
                'devices': devices
            })
        except Exception:
            pass