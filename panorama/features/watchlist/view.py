# panorama/features/slaves/view.py
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–π–≤–∞–º–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π RSSI_rms.
- –£–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω" (—Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ RSSI RMS —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
- –ü–æ–ª–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ qdarkstyle
"""

from __future__ import annotations

from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
import time
import json
from pathlib import Path

from PyQt5.QtCore import Qt, pyqtSignal, QTimer
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QTabWidget, QTableWidget,
    QTableWidgetItem, QGroupBox, QLabel, QPushButton, QHeaderView,
    QSplitter, QTextEdit, QComboBox, QSpinBox, QCheckBox,
    QGridLayout, QProgressBar, QFrame, QMessageBox, QFileDialog
)
from PyQt5.QtGui import QFont, QColor, QBrush, QPalette

import numpy as np

# –ò–º–ø–æ—Ä—Ç qdarkstyle
try:
    import qdarkstyle
    QDARKSTYLE_AVAILABLE = True
except ImportError:
    QDARKSTYLE_AVAILABLE = False
    print("[SlavesView] qdarkstyle not installed. Install it with: pip install qdarkstyle")


class ImprovedSlavesView(QWidget):
    """
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–π–≤–∞–º–∏ —Å RSSI –º–∞—Ç—Ä–∏—Ü–µ–π.
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä
    - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ RSSI RMS
    - –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ qdarkstyle
    """

    # –°–∏–≥–Ω–∞–ª—ã
    send_to_map = pyqtSignal(dict)       # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–µ–ª–∏ –Ω–∞ –∫–∞—Ä—Ç—É
    task_selected = pyqtSignal(str)      # –í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞
    watchlist_updated = pyqtSignal(list) # –û–±–Ω–æ–≤–ª–µ–Ω watchlist

    def __init__(self, orchestrator: Any = None, parent: Optional[QWidget] = None):
        super().__init__(parent)

        self.orchestrator = orchestrator

        # –î–∞–Ω–Ω—ã–µ
        self.rssi_matrix: Dict[str, Dict[str, float]] = {}  # {range_id: {slave_id: rssi_rms}}
        self.watchlist: List[Dict[str, Any]] = []
        self.tasks_data: List[Dict[str, Any]] = []
        self.slave_statuses: Dict[str, Any] = {}
        
        # –°–æ–∑–¥–∞–µ–º UI
        self._create_ui()

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—ã–π —Å—Ç–∏–ª—å qdarkstyle
        self._apply_dark_style()

        # –¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(self._update_data)
        self.update_timer.start(2000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

    def _apply_dark_style(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º–Ω—ã–π —Å—Ç–∏–ª—å qdarkstyle –∫ –≤–∏–¥–∂–µ—Ç—É."""
        if QDARKSTYLE_AVAILABLE:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–∏–ª—å qdarkstyle
            self.setStyleSheet(qdarkstyle.load_stylesheet(qt_api='pyqt5'))

    def _create_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = self._create_header()
        layout.addWidget(header)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter = QSplitter(Qt.Horizontal)
        splitter.setChildrenCollapsible(False)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - RSSI –º–∞—Ç—Ä–∏—Ü–∞
        left_panel = self._create_rssi_panel()
        left_panel.setMinimumWidth(500)
        left_panel.setSizePolicy(left_panel.sizePolicy().horizontalPolicy(), left_panel.sizePolicy().verticalPolicy())
        splitter.addWidget(left_panel)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - Watchlist –∏ –∑–∞–¥–∞—á–∏
        right_panel = self._create_watchlist_panel()
        right_panel.setMinimumWidth(400)
        splitter.addWidget(right_panel)

        splitter.setSizes([800, 600])
        layout.addWidget(splitter)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = self._create_status_bar()
        layout.addWidget(self.status_bar)

    def _create_header(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        widget = QWidget()
        layout = QHBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üéØ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Slave SDR")
        title.setFont(QFont("Arial", 14, QFont.Bold))
        layout.addWidget(title)

        layout.addStretch()

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.btn_refresh = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.btn_refresh.clicked.connect(self._refresh_data)
        layout.addWidget(self.btn_refresh)

        self.btn_clear = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        self.btn_clear.clicked.connect(self._clear_data)
        layout.addWidget(self.btn_clear)

        self.btn_export = QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç")
        self.btn_export.clicked.connect(self._export_data)
        layout.addWidget(self.btn_export)

        return widget

    def _create_rssi_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å –º–∞—Ç—Ä–∏—Ü–µ–π RSSI RMS."""
        group = QGroupBox("üìä –ú–∞—Ç—Ä–∏—Ü–∞ RSSI RMS (–¥–ë–º)")
        layout = QVBoxLayout(group)

        # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã/–ø–æ—Ä–æ–≥ ‚Äî –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Å—Ç–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

        # –¢–∞–±–ª–∏—Ü–∞ RSSI —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        self.rssi_table = QTableWidget()
        self.rssi_table.setAlternatingRowColors(True)
        self.rssi_table.horizontalHeader().setStretchLastSection(True)
        self.rssi_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        self._setup_rssi_table()

        layout.addWidget(self.rssi_table)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RSSI
        stats_layout = QGridLayout()

        self.lbl_min_rssi = QLabel("–ú–∏–Ω: ‚Äî –¥–ë–º")
        self.lbl_max_rssi = QLabel("–ú–∞–∫—Å: ‚Äî –¥–ë–º")
        self.lbl_avg_rssi = QLabel("–°—Ä–µ–¥: ‚Äî –¥–ë–º")
        self.lbl_active_slaves = QLabel("–ê–∫—Ç–∏–≤–Ω—ã—Ö Slave: 0")

        stats_layout.addWidget(self.lbl_min_rssi, 0, 0)
        stats_layout.addWidget(self.lbl_max_rssi, 0, 1)
        stats_layout.addWidget(self.lbl_avg_rssi, 0, 2)
        stats_layout.addWidget(self.lbl_active_slaves, 0, 3)

        layout.addLayout(stats_layout)

        return group

    def _create_watchlist_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å watchlist –∏ –∑–∞–¥–∞—á."""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –í–∫–ª–∞–¥–∫–∏
        tabs = QTabWidget()

        # –í–∫–ª–∞–¥–∫–∞ Watchlist (–ë–ï–ó –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
        watchlist_tab = self._create_watchlist_tab()
        tabs.addTab(watchlist_tab, "üì° Watchlist")

        # –í–∫–ª–∞–¥–∫–∞ –∑–∞–¥–∞—á
        tasks_tab = self._create_tasks_tab()
        tabs.addTab(tasks_tab, "üìã –ó–∞–¥–∞—á–∏")

        # –í–∫–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–≤
        transmitters_tab = self._create_transmitters_tab()
        tabs.addTab(transmitters_tab, "üìª –ü–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∏")

        layout.addWidget(tabs)
        return widget

    def _create_watchlist_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É watchlist (–±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)."""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è
        info_panel = QLabel(
            "üìç –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
            "\n"
            "‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ (–ú–ì—Ü): —Ü–µ–Ω—Ç—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.\n"
            "‚Ä¢ –®–∏—Ä–∏–Ω–∞ (–ú–ì—Ü): –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ—Ä–µ–Ω–∏—è RSSI (–ø–∏–∫ ¬± span/2).\n"
            "‚Ä¢ RSSI_1..3: –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–π —É—Å—Ä–µ–¥–Ω—ë–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –º–æ—â–Ω–æ—Å—Ç–∏ —É –∫–∞–∂–¥–æ–≥–æ Slave.\n"
            "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç—É–ø–∏–≤—à–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è."
        )
        info_panel.setWordWrap(True)
        info_panel.setStyleSheet("""
            QLabel {
                background-color: rgba(100, 100, 255, 30);
                padding: 10px;
                border-radius: 5px;
                border: 1px solid rgba(100, 100, 255, 100);
            }
        """)
        layout.addWidget(info_panel)

        # –¢–∞–±–ª–∏—Ü–∞ watchlist
        self.watchlist_table = QTableWidget()
        self.watchlist_table.setColumnCount(8)
        self.watchlist_table.setHorizontalHeaderLabels([
            "ID", "–ß–∞—Å—Ç–æ—Ç–∞ (–ú–ì—Ü)", "–®–∏—Ä–∏–Ω–∞ (–ú–ì—Ü)", "RSSI_1", "RSSI_2", "RSSI_3",
            "–û–±–Ω–æ–≤–ª–µ–Ω–æ", "–î–µ–π—Å—Ç–≤–∏—è"
        ])

        header = self.watchlist_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(6, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(7, QHeaderView.Fixed)
        header.resizeSection(7, 150)

        self.watchlist_table.setAlternatingRowColors(True)

        layout.addWidget(self.watchlist_table)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∫–∞)
        control_panel = QHBoxLayout()

        self.btn_clear_watchlist = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å watchlist")
        self.btn_clear_watchlist.clicked.connect(self._clear_watchlist)
        control_panel.addWidget(self.btn_clear_watchlist)

        control_panel.addStretch()

        self.lbl_watchlist_count = QLabel("–ó–∞–ø–∏—Å–µ–π: 0")
        control_panel.addWidget(self.lbl_watchlist_count)

        layout.addLayout(control_panel)

        return widget

    def _create_tasks_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –∑–∞–¥–∞—á."""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –õ–æ–≥ –∑–∞–¥–∞—á
        self.tasks_log_view = QTextEdit()
        self.tasks_log_view.setReadOnly(True)
        self.tasks_log_view.setMaximumHeight(150)
        layout.addWidget(QLabel("–õ–æ–≥ –∑–∞–¥–∞—á:"))
        layout.addWidget(self.tasks_log_view)

        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        self.tasks_table = QTableWidget()
        self.tasks_table.setColumnCount(6)
        self.tasks_table.setHorizontalHeaderLabels([
            "ID –∑–∞–¥–∞—á–∏", "–î–∏–∞–ø–∞–∑–æ–Ω", "–°—Ç–∞—Ç—É—Å", "–ü—Ä–æ–≥—Ä–µ—Å—Å", "–í—Ä–µ–º—è", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
        ])

        header = self.tasks_table.horizontalHeader()
        header.setSectionResizeMode(3, QHeaderView.Fixed)
        header.resizeSection(3, 150)

        self.tasks_table.setAlternatingRowColors(True)
        layout.addWidget(QLabel("–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:"))
        layout.addWidget(self.tasks_table)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
        stats_layout = QHBoxLayout()

        self.lbl_total_tasks = QLabel("–í—Å–µ–≥–æ: 0")
        self.lbl_pending_tasks = QLabel("–û–∂–∏–¥–∞–µ—Ç: 0")
        self.lbl_running_tasks = QLabel("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: 0")
        self.lbl_completed_tasks = QLabel("–ó–∞–≤–µ—Ä—à–µ–Ω–æ: 0")

        for lbl in [self.lbl_total_tasks, self.lbl_pending_tasks,
                    self.lbl_running_tasks, self.lbl_completed_tasks]:
            stats_layout.addWidget(lbl)

        layout.addLayout(stats_layout)

        return widget

    def _create_transmitters_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–≤."""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–≤
        self.transmitters_table = QTableWidget()
        self.transmitters_table.setColumnCount(9)
        self.transmitters_table.setHorizontalHeaderLabels([
            "ID", "–ß–∞—Å—Ç–æ—Ç–∞ (–ú–ì—Ü)", "–ú–æ—â–Ω–æ—Å—Ç—å (–¥–ë–º)", "–¢–∏–ø", "X", "Y",
            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–í—Ä–µ–º—è", "–ù–∞ –∫–∞—Ä—Ç—É"
        ])

        header = self.transmitters_table.horizontalHeader()
        for i in range(8):
            header.setSectionResizeMode(i, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(8, QHeaderView.Fixed)
        header.resizeSection(8, 100)

        self.transmitters_table.setAlternatingRowColors(True)

        layout.addWidget(self.transmitters_table)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        filter_layout = QHBoxLayout()

        self.btn_send_all_to_map = QPushButton("üìç –í—Å–µ –Ω–∞ –∫–∞—Ä—Ç—É")
        self.btn_send_all_to_map.clicked.connect(self._send_all_to_map)
        filter_layout.addWidget(self.btn_send_all_to_map)

        filter_layout.addStretch()

        layout.addLayout(filter_layout)

        return widget

    def _create_status_bar(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞—Ä."""
        widget = QFrame()
        widget.setFrameStyle(QFrame.Box)

        layout = QHBoxLayout(widget)

        # –°—Ç–∞—Ç—É—Å—ã
        self.status_labels: Dict[str, Tuple[QLabel, QLabel]] = {}

        statuses = [
            ("system", "–°–∏—Å—Ç–µ–º–∞", "#4ade80"),
            ("slaves", "Slaves", "#60a5fa"),
            ("watchlist", "Watchlist", "#fbbf24"),
            ("trilateration", "–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è", "#a78bfa")
        ]

        for key, label, color in statuses:
            status_widget = QWidget()
            status_layout = QHBoxLayout(status_widget)
            status_layout.setContentsMargins(0, 0, 0, 0)

            indicator = QLabel("‚óè")
            indicator.setStyleSheet(f"color: {color}; font-size: 16px;")
            status_layout.addWidget(indicator)

            text = QLabel(f"{label}: OK")
            status_layout.addWidget(text)

            self.status_labels[key] = (indicator, text)
            layout.addWidget(status_widget)

        layout.addStretch()

        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.lbl_last_update = QLabel("–û–±–Ω–æ–≤–ª–µ–Ω–æ: ‚Äî")
        layout.addWidget(self.lbl_last_update)

        return widget

    def _setup_rssi_table(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É RSSI —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π."""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏: –î–∏–∞–ø–∞–∑–æ–Ω (–ú–ì—Ü) | Slave0 (RSSI-rms) | Slave1 (RSSI-rms) | Slave2 (RSSI-rms)
        headers = ["–î–∏–∞–ø–∞–∑–æ–Ω (–ú–ì—Ü)", "Slave0 (RSSI-rms)", "Slave1 (RSSI-rms)", "Slave2 (RSSI-rms)"]
        
        self.rssi_table.setColumnCount(len(headers))
        self.rssi_table.setHorizontalHeaderLabels(headers)
        
        # –ë–µ–∑ –∑–∞–≥–ª—É—à–µ–∫. –ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ ‚Äî —Å—Ç—Ä–æ–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∏–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞/–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.rssi_table.setRowCount(0)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        header = self.rssi_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
        for i in range(1, 4):
            header.setSectionResizeMode(i, QHeaderView.Stretch)

    def add_range_from_detector(self, freq_start_mhz: float, freq_stop_mhz: float):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)."""
        range_str = f"{freq_start_mhz:.1f}-{freq_stop_mhz:.1f}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        for row in range(self.rssi_table.rowCount()):
            if self.rssi_table.item(row, 0).text() == range_str:
                return  # –£–∂–µ –µ—Å—Ç—å
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        row = self.rssi_table.rowCount()
        self.rssi_table.insertRow(row)
        
        # –î–∏–∞–ø–∞–∑–æ–Ω
        range_item = QTableWidgetItem(range_str)
        range_item.setFont(QFont("Arial", 10, QFont.Bold))
        self.rssi_table.setItem(row, 0, range_item)
        
        # RSSI –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Slave (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç—ã–µ)
        for col in range(1, 4):
            rssi_item = QTableWidgetItem("‚Äî")
            rssi_item.setTextAlignment(Qt.AlignCenter)
            self.rssi_table.setItem(row, col, rssi_item)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        self.range_filter.addItem(range_str)
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if self.auto_scroll.isChecked():
            self.rssi_table.scrollToBottom()

    def update_rssi_value(self, range_str: str, slave_id: str, rssi_rms: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ RSSI RMS –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ —Å–ª–µ–π–≤–∞."""
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
        row_idx = -1
        for row in range(self.rssi_table.rowCount()):
            if self.rssi_table.item(row, 0).text() == range_str:
                row_idx = row
                break
        
        if row_idx == -1:
            return  # –î–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –ø–æ slave_id
        col_idx = -1
        if slave_id.lower() == "slave0":
            col_idx = 1
        elif slave_id.lower() == "slave1":
            col_idx = 2
        elif slave_id.lower() == "slave2":
            col_idx = 3
        
        if col_idx == -1:
            return  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π slave
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        rssi_item = QTableWidgetItem(f"{rssi_rms:.1f}")
        rssi_item.setTextAlignment(Qt.AlignCenter)
        
        # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—é
        rssi_item.setBackground(QBrush(self._get_rssi_color(rssi_rms)))
        
        self.rssi_table.setItem(row_idx, col_idx, rssi_item)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_rssi_stats()

    def _get_rssi_color(self, rssi: float) -> QColor:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è RSSI –∑–Ω–∞—á–µ–Ω–∏—è."""
        threshold = self.threshold_spin.value()
        
        if rssi >= threshold + 20:
            return QColor(74, 222, 128, 100)   # –ó–µ–ª–µ–Ω—ã–π - —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        elif rssi >= threshold + 10:
            return QColor(134, 239, 172, 100)  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        elif rssi >= threshold:
            return QColor(251, 191, 36, 100)   # –ñ–µ–ª—Ç—ã–π - —Å—Ä–µ–¥–Ω–∏–π
        elif rssi >= threshold - 10:
            return QColor(251, 146, 60, 100)   # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        else:
            return QColor(248, 113, 113, 100)  # –ö—Ä–∞—Å–Ω—ã–π - —Å–ª–∞–±—ã–π

    def _update_rssi_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RSSI."""
        all_rssi = []
        active_slaves = set()
        
        for row in range(self.rssi_table.rowCount()):
            for col in range(1, 4):  # Slave0, Slave1, Slave2
                item = self.rssi_table.item(row, col)
                if item and item.text() != "‚Äî":
                    try:
                        rssi = float(item.text())
                        all_rssi.append(rssi)
                        active_slaves.add(f"Slave{col-1}")
                    except ValueError:
                        pass
        
        if all_rssi:
            self.lbl_min_rssi.setText(f"–ú–∏–Ω: {min(all_rssi):.1f} –¥–ë–º")
            self.lbl_max_rssi.setText(f"–ú–∞–∫—Å: {max(all_rssi):.1f} –¥–ë–º")
            self.lbl_avg_rssi.setText(f"–°—Ä–µ–¥: {np.mean(all_rssi):.1f} –¥–ë–º")
        else:
            self.lbl_min_rssi.setText("–ú–∏–Ω: ‚Äî –¥–ë–º")
            self.lbl_max_rssi.setText("–ú–∞–∫—Å: ‚Äî –¥–ë–º")
            self.lbl_avg_rssi.setText("–°—Ä–µ–¥: ‚Äî –¥–ë–º")
        
        self.lbl_active_slaves.setText(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö Slave: {len(active_slaves)}")

    def _update_rssi_colors(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞."""
        for row in range(self.rssi_table.rowCount()):
            for col in range(1, 4):
                item = self.rssi_table.item(row, col)
                if item and item.text() != "‚Äî":
                    try:
                        rssi = float(item.text())
                        item.setBackground(QBrush(self._get_rssi_color(rssi)))
                    except ValueError:
                        pass

    def _filter_rssi_table(self):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É."""
        filter_text = self.range_filter.currentText()
        
        for row in range(self.rssi_table.rowCount()):
            range_item = self.rssi_table.item(row, 0)
            if range_item:
                if filter_text == "–í—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã":
                    self.rssi_table.setRowHidden(row, False)
                else:
                    self.rssi_table.setRowHidden(row, range_item.text() != filter_text)

    def _update_data(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
        if self.orchestrator and hasattr(self.orchestrator, "get_ui_snapshot"):
            try:
                snapshot = self.orchestrator.get_ui_snapshot()
                if snapshot:
                    self.update_from_orchestrator(snapshot)
            except Exception as e:
                print(f"[SlavesView] Error getting orchestrator snapshot: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        from datetime import datetime
        self.lbl_last_update.setText(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")

    def update_from_orchestrator(self, data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        if 'watchlist' in data:
            self._render_watchlist(data['watchlist'])
        
        if 'tasks' in data:
            self._render_tasks(data['tasks'])
        
        if 'rssi_measurements' in data:
            for measurement in data['rssi_measurements']:
                self.update_rssi_value(
                    measurement['range'],
                    measurement['slave_id'],
                    measurement['rssi_rms']
                )

    def _render_watchlist(self, watchlist_data: List[Dict[str, Any]]):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç watchlist."""
        self.watchlist_table.setRowCount(len(watchlist_data))
        
        for row, data in enumerate(watchlist_data):
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
            self.watchlist_table.setItem(row, 0, QTableWidgetItem(data.get('id', '')))
            try:
                freq_val = float(data.get('freq', 0) or 0)
                span_val = float(data.get('span', 0) or 0)
            except Exception:
                freq_val, span_val = 0.0, 0.0
            self.watchlist_table.setItem(row, 1, QTableWidgetItem(f"{freq_val:.1f}"))
            self.watchlist_table.setItem(row, 2, QTableWidgetItem(f"{span_val:.1f}"))
            
            # RSSI –¥–ª—è –∫–∞–∂–¥–æ–≥–æ slave
            for i in range(3):
                rssi_key = f'rssi_{i+1}'
                val = data.get(rssi_key, None)
                if val is None:
                    item = QTableWidgetItem("‚Äî")
                    item.setTextAlignment(Qt.AlignCenter)
                    self.watchlist_table.setItem(row, 3 + i, item)
                else:
                    try:
                        fv = float(val)
                        rssi_item = QTableWidgetItem(f"{fv:.1f}")
                        rssi_item.setTextAlignment(Qt.AlignCenter)
                        rssi_item.setBackground(QBrush(self._get_rssi_color(fv)))
                        self.watchlist_table.setItem(row, 3 + i, rssi_item)
                    except Exception:
                        item = QTableWidgetItem("‚Äî")
                        item.setTextAlignment(Qt.AlignCenter)
                        self.watchlist_table.setItem(row, 3 + i, item)
            
            # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.watchlist_table.setItem(row, 6, QTableWidgetItem(data.get('updated', '')))
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É
            btn_widget = QWidget()
            btn_layout = QHBoxLayout(btn_widget)
            btn_layout.setContentsMargins(5, 2, 5, 2)
            
            btn_to_map = QPushButton("üìç –ù–∞ –∫–∞—Ä—Ç—É")
            btn_to_map.clicked.connect(lambda _, d=data: self._send_watchlist_to_map(d))
            btn_layout.addWidget(btn_to_map)
            
            self.watchlist_table.setCellWidget(row, 7, btn_widget)
        
        self.lbl_watchlist_count.setText(f"–ó–∞–ø–∏—Å–µ–π: {len(watchlist_data)}")
        self.watchlist_updated.emit(watchlist_data)

    def _render_tasks(self, tasks_data: List[Dict[str, Any]]):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏."""
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥
        log_lines = []
        for task in tasks_data[-20:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
            timestamp = time.strftime('%H:%M:%S', time.localtime(task.get('timestamp', time.time())))
            status = task.get('status', 'UNKNOWN')
            task_id = task.get('id', 'N/A')
            log_lines.append(f"[{timestamp}] Task {task_id}: {status}")
        
        self.tasks_log_view.setPlainText("\n".join(log_lines))
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        active_tasks = [t for t in tasks_data if t.get('status') in ['PENDING', 'RUNNING']]
        self.tasks_table.setRowCount(len(active_tasks))
        
        running = 0
        pending = 0
        completed = 0
        
        for row, task in enumerate(active_tasks):
            # ID
            self.tasks_table.setItem(row, 0, QTableWidgetItem(task.get('id', '')))
            
            # –î–∏–∞–ø–∞–∑–æ–Ω
            self.tasks_table.setItem(row, 1, QTableWidgetItem(task.get('range', '')))
            
            # –°—Ç–∞—Ç—É—Å
            status = task.get('status', '')
            status_item = QTableWidgetItem(status)
            if status == 'RUNNING':
                status_item.setBackground(QBrush(QColor(74, 222, 128, 100)))
                running += 1
            elif status == 'PENDING':
                status_item.setBackground(QBrush(QColor(251, 191, 36, 100)))
                pending += 1
            elif status == 'COMPLETED':
                completed += 1
            self.tasks_table.setItem(row, 2, status_item)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            progress_widget = QProgressBar()
            progress_widget.setValue(task.get('progress', 0))
            self.tasks_table.setCellWidget(row, 3, progress_widget)
            
            # –í—Ä–µ–º—è
            self.tasks_table.setItem(row, 4, QTableWidgetItem(task.get('time', '‚Äî')))
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            priority = task.get('priority', 'NORMAL')
            priority_item = QTableWidgetItem(priority)
            if priority == 'HIGH':
                priority_item.setForeground(QBrush(QColor(239, 68, 68)))
            self.tasks_table.setItem(row, 5, priority_item)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.lbl_total_tasks.setText(f"–í—Å–µ–≥–æ: {len(tasks_data)}")
        self.lbl_pending_tasks.setText(f"–û–∂–∏–¥–∞–µ—Ç: {pending}")
        self.lbl_running_tasks.setText(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {running}")
        self.lbl_completed_tasks.setText(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}")

    def _send_watchlist_to_map(self, watchlist_data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ watchlist –Ω–∞ –∫–∞—Ä—Ç—É."""
        rssi_values = []
        for i in range(1, 4):
            key = f'rssi_{i}'
            if key in watchlist_data:
                rssi_values.append(watchlist_data[key])
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Å–µ–≤–¥–æ–ø–æ–∑–∏—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if rssi_values:
            x = (rssi_values[0] + rssi_values[1] if len(rssi_values) > 1 else rssi_values[0]) * 0.5
            y = (rssi_values[1] + rssi_values[2] if len(rssi_values) > 2 else rssi_values[0]) * 0.5
        else:
            x, y = 0, 0
        
        map_data = {
            'id': watchlist_data.get('id', 'unknown'),
            'freq': watchlist_data.get('freq', 0),
            'x': x,
            'y': y,
            'rssi_avg': float(np.mean(rssi_values)) if rssi_values else -100
        }
        
        self.send_to_map.emit(map_data)
        print(f"[Watchlist] Sent to map: {map_data['id']}")

    def _send_all_to_map(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—É."""
        for row in range(self.transmitters_table.rowCount()):
            try:
                tx_data = {
                    'id': self.transmitters_table.item(row, 0).text(),
                    'freq': float(self.transmitters_table.item(row, 1).text()),
                    'power': float(self.transmitters_table.item(row, 2).text()),
                    'type': self.transmitters_table.item(row, 3).text(),
                    'x': float(self.transmitters_table.item(row, 4).text()),
                    'y': float(self.transmitters_table.item(row, 5).text()),
                    'confidence': float(self.transmitters_table.item(row, 6).text().replace('%', '')) / 100.0
                }
                self.send_to_map.emit(tx_data)
            except Exception:
                pass

    def add_transmitter(self, result):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫ –≤ —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–≤."""
        try:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            peak_id = getattr(result, 'peak_id', getattr(result, 'id', 'unknown'))
            freq_mhz = getattr(result, 'freq_mhz', getattr(result, 'center_hz', 0.0) / 1e6)
            power_dbm = getattr(result, 'power_dbm', 0.0)
            x = getattr(result, 'x', 0.0)
            y = getattr(result, 'y', 0.0)
            confidence = getattr(result, 'confidence', 0.0)
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É —Å —Ç–∞–∫–∏–º peak_id
            row = -1
            for r in range(self.transmitters_table.rowCount()):
                itm = self.transmitters_table.item(r, 0)
                if itm and itm.text() == str(peak_id):
                    row = r
                    break
            if row == -1:
                row = self.transmitters_table.rowCount()
                self.transmitters_table.insertRow(row)
            self.transmitters_table.setItem(row, 0, QTableWidgetItem(str(peak_id)))
            self.transmitters_table.setItem(row, 1, QTableWidgetItem(f"{float(freq_mhz):.1f}"))
            self.transmitters_table.setItem(row, 2, QTableWidgetItem(f"{float(power_dbm):.1f}"))
            self.transmitters_table.setItem(row, 3, QTableWidgetItem("Video"))
            self.transmitters_table.setItem(row, 4, QTableWidgetItem(f"{float(x):.1f}"))
            self.transmitters_table.setItem(row, 5, QTableWidgetItem(f"{float(y):.1f}"))
            self.transmitters_table.setItem(row, 6, QTableWidgetItem(f"{float(confidence)*100:.0f}%"))
            self.transmitters_table.setItem(row, 7, QTableWidgetItem(time.strftime("%H:%M:%S")))

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞ –∫–∞—Ä—Ç—É" –≤ —Å—Ç–æ–ª–±—Ü–µ 8
            btn_widget = QWidget()
            btn_layout = QHBoxLayout(btn_widget)
            btn_layout.setContentsMargins(5, 2, 5, 2)
            btn_to_map = QPushButton("üìç –ù–∞ –∫–∞—Ä—Ç—É")
            def _emit_to_map(pid=peak_id, f=freq_mhz, px=x, py=y, conf=confidence):
                data = {'id': str(pid), 'freq': float(f), 'x': float(px), 'y': float(py), 'confidence': float(conf)}
                self.send_to_map.emit(data)
            btn_to_map.clicked.connect(_emit_to_map)
            btn_layout.addWidget(btn_to_map)
            self.transmitters_table.setCellWidget(row, 8, btn_widget)
        except Exception:
            pass

    def update_transmitter_position(self, result):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –≤—Ä–µ–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–æ–≤ (—Ç—Ä–µ–∫–∏–Ω–≥)."""
        try:
            peak_id = getattr(result, 'peak_id', getattr(result, 'id', 'unknown'))
            x = getattr(result, 'x', 0.0)
            y = getattr(result, 'y', 0.0)
            confidence = getattr(result, 'confidence', 0.0)
            for r in range(self.transmitters_table.rowCount()):
                itm = self.transmitters_table.item(r, 0)
                if itm and itm.text() == str(peak_id):
                    self.transmitters_table.setItem(r, 4, QTableWidgetItem(f"{float(x):.1f}"))
                    self.transmitters_table.setItem(r, 5, QTableWidgetItem(f"{float(y):.1f}"))
                    self.transmitters_table.setItem(r, 6, QTableWidgetItem(f"{float(confidence)*100:.0f}%"))
                    self.transmitters_table.setItem(r, 7, QTableWidgetItem(time.strftime("%H:%M:%S")))
                    break
        except Exception:
            pass

    def _clear_watchlist(self):
        """–û—á–∏—â–∞–µ—Ç watchlist."""
        self.watchlist_table.setRowCount(0)
        self.lbl_watchlist_count.setText("–ó–∞–ø–∏—Å–µ–π: 0")
        self.watchlist = []
        self.watchlist_updated.emit(self.watchlist)

    def _refresh_data(self):
        """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
        self._update_data()
        print("[SlavesView] Manual refresh")

    def _clear_data(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã."""
        # –û—á–∏—â–∞–µ–º RSSI
        for row in range(self.rssi_table.rowCount()):
            for col in range(1, 4):
                item = self.rssi_table.item(row, col)
                if item:
                    item.setText("‚Äî")
                    item.setBackground(QBrush())
        
        self._update_rssi_stats()
        
        # –û—á–∏—â–∞–µ–º watchlist
        self._clear_watchlist()
        
        # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á–∏
        self.tasks_table.setRowCount(0)
        self.tasks_log_view.clear()
        
        # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∏
        self.transmitters_table.setRowCount(0)
        
        print("[SlavesView] Data cleared")

    def _export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON."""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = {
                'timestamp': time.time(),
                'rssi_matrix': self._collect_rssi_data(),
                'watchlist': self._collect_watchlist_data(),
                'tasks': self._collect_tasks_data()
            }
            
            # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_path, _ = QFileDialog.getSaveFileName(
                self, "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", 
                f"slaves_data_{time.strftime('%Y%m%d_%H%M%S')}.json",
                "JSON Files (*.json)"
            )
            
            if file_path:
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(data, f, indent=2, ensure_ascii=False)
                
                QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:\n{file_path}")
                print(f"[SlavesView] Data exported to {file_path}")
        
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            print(f"[SlavesView] Export error: {e}")

    def _collect_rssi_data(self) -> List[Dict[str, Any]]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ RSSI –∏–∑ —Ç–∞–±–ª–∏—Ü—ã."""
        data = []
        for row in range(self.rssi_table.rowCount()):
            range_str = self.rssi_table.item(row, 0).text()
            row_data = {'range': range_str}
            
            for col in range(1, 4):
                slave_id = f"slave{col-1}"
                item = self.rssi_table.item(row, col)
                if item and item.text() != "‚Äî":
                    try:
                        row_data[slave_id] = float(item.text())
                    except ValueError:
                        row_data[slave_id] = None
                else:
                    row_data[slave_id] = None
            
            data.append(row_data)
        
        return data

    def _collect_watchlist_data(self) -> List[Dict[str, Any]]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ watchlist."""
        data = []
        for row in range(self.watchlist_table.rowCount()):
            row_data = {}
            for col in range(self.watchlist_table.columnCount() - 1):  # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–µ–π—Å—Ç–≤–∏–π
                header = self.watchlist_table.horizontalHeaderItem(col).text()
                item = self.watchlist_table.item(row, col)
                if item:
                    row_data[header] = item.text()
            data.append(row_data)
        
        return data

    def _collect_tasks_data(self) -> List[Dict[str, Any]]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á."""
        data = []
        for row in range(self.tasks_table.rowCount()):
            row_data = {}
            for col in range(self.tasks_table.columnCount()):
                if col == 3:  # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
                    widget = self.tasks_table.cellWidget(row, col)
                    if isinstance(widget, QProgressBar):
                        row_data['progress'] = widget.value()
                else:
                    header = self.tasks_table.horizontalHeaderItem(col).text()
                    item = self.tasks_table.item(row, col)
                    if item:
                        row_data[header] = item.text()
            data.append(row_data)
        
        return data

    def set_orchestrator(self, orchestrator: Any):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä."""
        self.orchestrator = orchestrator
        print("[SlavesView] Orchestrator connected")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏."""
        self.update_timer.stop()
        print("[SlavesView] Cleanup completed")

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∏–¥–∂–µ—Ç–∞."""
        self.cleanup()
        super().closeEvent(event)