# panorama/features/map3d/view.py
"""
–ö–∞—Ä—Ç–∞ —Å —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–µ–π. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–µ–ª–∏ –¢–û–õ–¨–ö–û –∏–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞.
"""
from __future__ import annotations
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass, field
import numpy as np
from PyQt5 import QtWidgets, QtCore, QtGui
import pyqtgraph as pg
import time


@dataclass 
class Target:
    """–¶–µ–ª—å –Ω–∞ –∫–∞—Ä—Ç–µ."""
    id: int
    x: float
    y: float
    freq_mhz: float
    power_dbm: float
    confidence: float
    timestamp: float
    source: str = "detector"  # –ò—Å—Ç–æ—á–Ω–∏–∫: "detector" –∏–ª–∏ "manual"
    rssi_master: float = -100.0
    rssi_slave1: float = -100.0
    rssi_slave2: float = -100.0
    is_tracking: bool = False
    last_update: float = 0.0
    history_x: List[float] = field(default_factory=list)
    history_y: List[float] = field(default_factory=list)


class MapView(QtWidgets.QWidget):
    """–ö–∞—Ä—Ç–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ü–µ–ª–µ–π –∏ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–µ–π."""
    
    targetDetected = QtCore.pyqtSignal(object)
    targetSelected = QtCore.pyqtSignal(object)
    trilaterationStarted = QtCore.pyqtSignal()
    trilaterationStopped = QtCore.pyqtSignal()
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # –ü–æ–∑–∏—Ü–∏–∏ SDR (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∏–∑ DeviceManager)
        self.sdr_positions = {
            'master': (0.0, 0.0),
            'slave1': (10.0, 0.0),
            'slave2': (0.0, 10.0)
        }
        
        # SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        self.master_device = None
        self.slave1_device = None
        self.slave2_device = None
        
        # –¶–µ–ª–∏
        self.targets: List[Target] = []
        self._target_id_seq = 0
        self._selected_target: Optional[Target] = None
        self._tracking_target: Optional[Target] = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.show_grid = True
        self.show_labels = True
        self.show_circles = True
        self.show_trails = True
        
        # –§–ª–∞–≥ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
        self._trilateration_active = False
        
        # –°–æ–∑–¥–∞–µ–º UI
        self._build_ui()
        
        # –¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_timer = QtCore.QTimer()
        self.update_timer.timeout.connect(self._update_tracking)
        self.update_timer.setInterval(100)

    def _build_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        main_layout = QtWidgets.QHBoxLayout(self)
        
        # === –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å ===
        left_panel = QtWidgets.QVBoxLayout()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        devices_group = QtWidgets.QGroupBox("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ SDR")
        devices_layout = QtWidgets.QVBoxLayout(devices_group)
        
        self.device_info = QtWidgets.QTextEdit()
        self.device_info.setReadOnly(True)
        self.device_info.setMaximumHeight(120)
        self.device_info.setPlainText("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n\n–ò—Å—Ç–æ—á–Ω–∏–∫ ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SDR")
        devices_layout.addWidget(self.device_info)
        
        left_panel.addWidget(devices_group)
        
        # –ü–æ–∑–∏—Ü–∏–∏ SDR
        positions_group = QtWidgets.QGroupBox("–ü–æ–∑–∏—Ü–∏–∏ SDR")
        positions_layout = QtWidgets.QVBoxLayout(positions_group)
        
        self.position_info = QtWidgets.QTextEdit()
        self.position_info.setReadOnly(True)
        self.position_info.setMaximumHeight(100)
        self.position_info.setPlainText("–ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã")
        positions_layout.addWidget(self.position_info)
        
        left_panel.addWidget(positions_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_group = QtWidgets.QGroupBox("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        display_layout = QtWidgets.QVBoxLayout(display_group)
        
        self.chk_grid = QtWidgets.QCheckBox("–°–µ—Ç–∫–∞")
        self.chk_grid.setChecked(True)
        self.chk_labels = QtWidgets.QCheckBox("–ü–æ–¥–ø–∏—Å–∏")
        self.chk_labels.setChecked(True)
        self.chk_circles = QtWidgets.QCheckBox("–ö—Ä—É–≥–∏ –¥–∞–ª—å–Ω–æ—Å—Ç–∏")
        self.chk_circles.setChecked(True)
        self.chk_trails = QtWidgets.QCheckBox("–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")
        self.chk_trails.setChecked(True)
        
        display_layout.addWidget(self.chk_grid)
        display_layout.addWidget(self.chk_labels)
        display_layout.addWidget(self.chk_circles)
        display_layout.addWidget(self.chk_trails)
        
        left_panel.addWidget(display_group)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        control_group = QtWidgets.QGroupBox("–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è")
        control_layout = QtWidgets.QVBoxLayout(control_group)
        
        self.lbl_status = QtWidgets.QLabel("–¢—Ä–µ–±—É–µ—Ç—Å—è 3 SDR")
        self.lbl_status.setStyleSheet("padding: 5px; background-color: #f0f0f0;")
        
        self.btn_start = QtWidgets.QPushButton("–°—Ç–∞—Ä—Ç")
        self.btn_stop = QtWidgets.QPushButton("–°—Ç–æ–ø")
        self.btn_stop.setEnabled(False)
        
        # –ö–Ω–æ–ø–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
        self.btn_center = QtWidgets.QPushButton("üéØ –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É (0,0)")
        self.btn_center.clicked.connect(self._center_map)
        
        control_layout.addWidget(self.lbl_status)
        control_layout.addWidget(self.btn_start)
        control_layout.addWidget(self.btn_stop)
        control_layout.addWidget(self.btn_center)
        
        left_panel.addWidget(control_group)
        left_panel.addStretch()
        
        # === –¶–µ–Ω—Ç—Ä - –ö–∞—Ä—Ç–∞ ===
        map_container = QtWidgets.QVBoxLayout()
        
        self.cursor_label = QtWidgets.QLabel("X: ‚Äî, Y: ‚Äî")
        map_container.addWidget(self.cursor_label)
        
        self.map_plot = pg.PlotWidget()
        self.map_plot.showGrid(x=True, y=True, alpha=0.3)
        self.map_plot.setLabel('left', 'Y (–º)')
        self.map_plot.setLabel('bottom', 'X (–º)')
        self.map_plot.setAspectLocked(True)
        self.map_plot.setXRange(-50, 50)
        self.map_plot.setYRange(-50, 50)
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ä—Ç—ã
        self.sdr_scatter = pg.ScatterPlotItem(size=15)
        self.target_scatter = pg.ScatterPlotItem(size=12)
        self.map_plot.addItem(self.sdr_scatter)
        self.map_plot.addItem(self.target_scatter)
        
        self.sdr_labels = []
        self.range_circles = []
        self.trail_lines = []
        
        map_container.addWidget(self.map_plot)
        
        # === –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å ===
        right_panel = QtWidgets.QVBoxLayout()
        
        # –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        targets_group = QtWidgets.QGroupBox("–¶–µ–ª–∏ (–∏–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞)")
        targets_layout = QtWidgets.QVBoxLayout(targets_group)
        
        self.targets_table = QtWidgets.QTableWidget(0, 4)
        self.targets_table.setHorizontalHeaderLabels(["ID", "–ü–æ–∑–∏—Ü–∏—è", "–ß–∞—Å—Ç–æ—Ç–∞", "–ò—Å—Ç–æ—á–Ω–∏–∫"])
        self.targets_table.setMaximumHeight(200)
        self.targets_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        targets_layout.addWidget(self.targets_table)
        
        btn_layout = QtWidgets.QHBoxLayout()
        self.btn_track = QtWidgets.QPushButton("–û—Ç—Å–ª–µ–¥–∏—Ç—å")
        self.btn_clear = QtWidgets.QPushButton("–û—á–∏—Å—Ç–∏—Ç—å")
        btn_layout.addWidget(self.btn_track)
        btn_layout.addWidget(self.btn_clear)
        targets_layout.addLayout(btn_layout)
        
        right_panel.addWidget(targets_group)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QtWidgets.QGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_layout = QtWidgets.QFormLayout(stats_group)
        
        self.lbl_targets = QtWidgets.QLabel("0")
        self.lbl_tracking = QtWidgets.QLabel("–ù–ï–¢")
        
        stats_layout.addRow("–¶–µ–ª–µ–π:", self.lbl_targets)
        stats_layout.addRow("–¢—Ä–µ–∫–∏–Ω–≥:", self.lbl_tracking)
        
        right_panel.addWidget(stats_group)
        right_panel.addStretch()
        
        # –°–±–æ—Ä–∫–∞
        left_widget = QtWidgets.QWidget()
        left_widget.setLayout(left_panel)
        left_widget.setMaximumWidth(300)
        
        right_widget = QtWidgets.QWidget()
        right_widget.setLayout(right_panel)
        right_widget.setMaximumWidth(350)
        
        main_layout.addWidget(left_widget)
        main_layout.addLayout(map_container, stretch=1)
        main_layout.addWidget(right_widget)
        
        # –°–∏–≥–Ω–∞–ª—ã
        self.chk_grid.toggled.connect(self._update_display)
        self.chk_labels.toggled.connect(self._update_display)
        self.chk_circles.toggled.connect(self._update_display)
        self.chk_trails.toggled.connect(self._update_display)
        
        self.btn_track.clicked.connect(self._start_tracking)
        self.btn_clear.clicked.connect(self._clear_targets)
        self.btn_start.clicked.connect(self._start_trilateration)
        self.btn_stop.clicked.connect(self._stop_trilateration)
        
        self.map_plot.scene().sigMouseMoved.connect(self._on_mouse_moved)
        self.targets_table.itemSelectionChanged.connect(self._on_target_selected)

    def update_devices(self, master_device, slave1_device, slave2_device):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∏–∑ DeviceManager."""
        self.master_device = master_device
        self.slave1_device = slave1_device
        self.slave2_device = slave2_device
        
        if master_device and slave1_device and slave2_device:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
            self.sdr_positions['master'] = (master_device.position_x, master_device.position_y)
            self.sdr_positions['slave1'] = (slave1_device.position_x, slave1_device.position_y)
            self.sdr_positions['slave2'] = (slave2_device.position_x, slave2_device.position_y)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            device_text = f"Master: {master_device.nickname}\n"
            device_text += f"Slave1: {slave1_device.nickname}\n"
            device_text += f"Slave2: {slave2_device.nickname}"
            self.device_info.setPlainText(device_text)
            
            position_text = f"Master: ({master_device.position_x:.1f}, {master_device.position_y:.1f})\n"
            position_text += f"Slave1: ({slave1_device.position_x:.1f}, {slave1_device.position_y:.1f})\n"
            position_text += f"Slave2: ({slave2_device.position_x:.1f}, {slave2_device.position_y:.1f})"
            self.position_info.setPlainText(position_text)
            
            self.lbl_status.setText("–ì–æ—Ç–æ–≤–æ")
            self.lbl_status.setStyleSheet("padding: 5px; background-color: #c8e6c9;")
            self.btn_start.setEnabled(True)
        else:
            self.lbl_status.setText("–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
            self.lbl_status.setStyleSheet("padding: 5px; background-color: #ffccbc;")
            self.btn_start.setEnabled(False)
        
        self._refresh_map()

    def add_target_from_detector(self, detection):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ü–µ–ª—å –∏–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)."""
        self._target_id_seq += 1
        target = Target(
            id=self._target_id_seq,
            x=0.0,  # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            y=0.0,
            freq_mhz=detection.freq_mhz,
            power_dbm=detection.power_dbm,
            confidence=detection.confidence,
            timestamp=time.time(),
            source="detector"
        )
        
        self.targets.append(target)
        self._update_targets_table()
        self._refresh_map()
        
        return target

    def process_trilateration(self, freq_mhz: float, rssi_master: float, 
                             rssi_slave1: float, rssi_slave2: float):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —à–∏—Ä–æ–∫–æ–ø–æ–ª–æ—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."""
        if not self._trilateration_active:
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ –¥–ª—è —à–∏—Ä–æ–∫–æ–ø–æ–ª–æ—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        # –ò—â–µ–º —Ü–µ–ª—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ¬±10 –ú–ì—Ü (–¥–ª—è —à–∏—Ä–æ–∫–æ–ø–æ–ª–æ—Å–Ω—ã—Ö –≤–∏–¥–µ–æ—Å–∏–≥–Ω–∞–ª–æ–≤)
        target = None
        tolerance = 10.0  # –ú–ì—Ü
        
        for t in self.targets:
            if abs(t.freq_mhz - freq_mhz) < tolerance:
                # –ù–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ü–µ–ª—å
                target = t
                break
        
        if not target:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–∏ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
            self._target_id_seq += 1
            target = Target(
                id=self._target_id_seq,
                x=0.0,
                y=0.0,
                freq_mhz=freq_mhz,
                power_dbm=rssi_master,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—â–Ω–æ—Å—Ç—å –æ—Ç –º–∞—Å—Ç–µ—Ä–∞
                confidence=0.5,
                timestamp=time.time(),
                source="trilateration"
            )
            self.targets.append(target)
            self._update_targets_table()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º RSSI
        target.rssi_master = rssi_master
        target.rssi_slave1 = rssi_slave1
        target.rssi_slave2 = rssi_slave2
        target.last_update = time.time()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        new_pos = self._calculate_position(rssi_master, rssi_slave1, rssi_slave2)
        if new_pos:
            # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ EMA —Å –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
            alpha = 0.5  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
            if target.x == 0 and target.y == 0:
                # –ü–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–∞–∑—É
                target.x, target.y = new_pos
            else:
                target.x = alpha * new_pos[0] + (1 - alpha) * target.x
                target.y = alpha * new_pos[1] + (1 - alpha) * target.y
            
            # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            target.history_x.append(target.x)
            target.history_y.append(target.y)
            if len(target.history_x) > 100:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                target.history_x.pop(0)
                target.history_y.pop(0)
        
        self._refresh_map()

    def _calculate_position(self, rssi_m: float, rssi_s1: float, rssi_s2: float):
        """–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è –ø–æ RSSI —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é."""
        def rssi_to_distance(rssi: float) -> float:
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞—Ç—É—Ö–∞–Ω–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            # RSSI = P0 - 10*n*log10(d/d0)
            # –≥–¥–µ P0 - –º–æ—â–Ω–æ—Å—Ç—å –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ d0 (1–º)
            P0 = -30.0  # –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è HackRF
            n = 2.2     # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞—Ç—É—Ö–∞–Ω–∏—è –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º RSSI —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
            rssi = max(-120, min(-20, rssi))
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            path_loss = P0 - rssi
            distance = 10.0 ** (path_loss / (10.0 * n))
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            return max(0.5, min(100.0, distance))
        
        d0 = rssi_to_distance(rssi_m)
        d1 = rssi_to_distance(rssi_s1)
        d2 = rssi_to_distance(rssi_s2)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"Distances: M={d0:.1f}m, S1={d1:.1f}m, S2={d2:.1f}m")
        
        p0 = np.array(self.sdr_positions['master'])
        p1 = np.array(self.sdr_positions['slave1'])
        p2 = np.array(self.sdr_positions['slave2'])
        
        try:
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
            A = 2 * np.array([
                [p1[0] - p0[0], p1[1] - p0[1]],
                [p2[0] - p0[0], p2[1] - p0[1]]
            ])
            
            b = np.array([
                d0**2 - d1**2 - np.linalg.norm(p0)**2 + np.linalg.norm(p1)**2,
                d0**2 - d2**2 - np.linalg.norm(p0)**2 + np.linalg.norm(p2)**2
            ])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ã
            if np.linalg.cond(A) > 1e10:
                print("Warning: Poorly conditioned matrix")
                return None
            
            result = np.linalg.lstsq(A, b, rcond=None)[0]
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–ª–∞—Å—Ç—å—é –∫–∞—Ä—Ç—ã
            x = np.clip(result[0], -50, 50)
            y = np.clip(result[1], -50, 50)
            
            return (x, y)
            
        except Exception as e:
            print(f"Trilateration error: {e}")
            return None

    def _refresh_map(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã."""
        print(f"DEBUG: _refresh_map called with sdr_positions: {self.sdr_positions}")
        
        # SDR - —Ç–æ–ª—å–∫–æ Slave —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (Master –Ω–µ –Ω–∞ –∫–∞—Ä—Ç–µ)
        sdr_points = []
        sdr_brushes = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ Slave —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        for name, pos in self.sdr_positions.items():
            if name.startswith('slave'):
                sdr_points.append({'pos': pos})
                if name == 'slave1':
                    sdr_brushes.append(pg.mkBrush(50, 255, 100, 200))  # –ó–µ–ª–µ–Ω—ã–π
                elif name == 'slave2':
                    sdr_brushes.append(pg.mkBrush(255, 50, 50, 200))   # –ö—Ä–∞—Å–Ω—ã–π
                else:
                    sdr_brushes.append(pg.mkBrush(255, 150, 50, 200))  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        
        if sdr_points:
            self.sdr_scatter.setData(sdr_points, brush=sdr_brushes)
            print(f"DEBUG: Added {len(sdr_points)} SDR points to map")
        else:
            print(f"DEBUG: No SDR points to add")
            self.sdr_scatter.setData([], brush=[])
        
        # –ü–æ–¥–ø–∏—Å–∏
        for label in self.sdr_labels:
            self.map_plot.removeItem(label)
        self.sdr_labels.clear()
        
        if self.chk_labels.isChecked():
            for name, pos in self.sdr_positions.items():
                if name.startswith('slave'):
                    label = pg.TextItem(name.upper(), anchor=(0.5, -0.5))
                    label.setPos(pos[0], pos[1])
                    self.map_plot.addItem(label)
                    self.sdr_labels.append(label)
                    print(f"DEBUG: Added label {name} at position {pos}")
        
        # –¶–µ–ª–∏
        if self.targets:
            target_points = []
            target_brushes = []
            
            for target in self.targets:
                target_points.append({'pos': (target.x, target.y)})
                
                if target.is_tracking:
                    target_brushes.append(pg.mkBrush(255, 0, 0, 200))
                elif target == self._selected_target:
                    target_brushes.append(pg.mkBrush(255, 255, 0, 200))
                else:
                    target_brushes.append(pg.mkBrush(255, 150, 0, 180))
            
            self.target_scatter.setData(target_points, brush=target_brushes)
            
            # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            for line in self.trail_lines:
                self.map_plot.removeItem(line)
            self.trail_lines.clear()
            
            if self.chk_trails.isChecked():
                for target in self.targets:
                    if len(target.history_x) > 1:
                        pen = pg.mkPen(color=(255, 200, 0, 100), width=2, style=QtCore.Qt.DashLine)
                        line = self.map_plot.plot(target.history_x, target.history_y, pen=pen)
                        self.trail_lines.append(line)
        
        self._update_display()

    def _update_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        self.map_plot.showGrid(x=self.chk_grid.isChecked(), y=self.chk_grid.isChecked())
        
        # –ö—Ä—É–≥–∏ –¥–∞–ª—å–Ω–æ—Å—Ç–∏
        for circle in self.range_circles:
            self.map_plot.removeItem(circle)
        self.range_circles.clear()
        
        if self.chk_circles.isChecked():
            for radius in [10, 20, 30]:
                for pos in self.sdr_positions.values():
                    circle = pg.CircleROI(
                        (pos[0] - radius, pos[1] - radius),
                        size=(radius * 2, radius * 2),
                        pen=pg.mkPen((100, 100, 100, 50), width=1),
                        movable=False
                    )
                    self.map_plot.addItem(circle)
                    self.range_circles.append(circle)

    def _update_targets_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ü–µ–ª–µ–π."""
        self.targets_table.setRowCount(len(self.targets))
        
        for row, target in enumerate(self.targets):
            self.targets_table.setItem(row, 0, QtWidgets.QTableWidgetItem(str(target.id)))
            self.targets_table.setItem(row, 1, QtWidgets.QTableWidgetItem(f"({target.x:.1f}, {target.y:.1f})"))
            self.targets_table.setItem(row, 2, QtWidgets.QTableWidgetItem(f"{target.freq_mhz:.1f} –ú–ì—Ü"))
            self.targets_table.setItem(row, 3, QtWidgets.QTableWidgetItem(target.source))
        
        self.lbl_targets.setText(str(len(self.targets)))

    def _on_mouse_moved(self, pos):
        """–ö—É—Ä—Å–æ—Ä."""
        vb = self.map_plot.getViewBox()
        if vb:
            scene_pos = vb.mapSceneToView(pos)
            self.cursor_label.setText(f"X: {scene_pos.x():.1f} –º, Y: {scene_pos.y():.1f} –º")

    def _on_target_selected(self):
        """–í—ã–±–æ—Ä —Ü–µ–ª–∏."""
        rows = self.targets_table.selectionModel().selectedRows()
        if rows:
            row = rows[0].row()
            if 0 <= row < len(self.targets):
                self._selected_target = self.targets[row]
                self._refresh_map()

    def _start_tracking(self):
        """–ù–∞—á–∞—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏."""
        if self._selected_target:
            self._tracking_target = self._selected_target
            self._tracking_target.is_tracking = True
            self.update_timer.start()
            self.lbl_tracking.setText(f"ID {self._tracking_target.id}")

    def _update_tracking(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º."""
        if self._tracking_target:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if time.time() - self._tracking_target.last_update > 10.0:
                self._tracking_target.is_tracking = False
                self._tracking_target = None
                self.update_timer.stop()
                self.lbl_tracking.setText("–ü–û–¢–ï–†–Ø–ù–ê")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.lbl_tracking.setText(f"ID {self._tracking_target.id} ({self._tracking_target.freq_mhz:.1f} –ú–ì—Ü)")

    def _clear_targets(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ü–µ–ª–µ–π."""
        self.targets.clear()
        self.targets_table.setRowCount(0)
        self.lbl_targets.setText("0")
        self.lbl_tracking.setText("–ù–ï–¢")
        self._selected_target = None
        self._tracking_target = None
        self.update_timer.stop()
        
        for line in self.trail_lines:
            self.map_plot.removeItem(line)
        self.trail_lines.clear()
        
        self._refresh_map()

    def _start_trilateration(self):
        """–ó–∞–ø—É—Å–∫ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏."""
        if not (self.master_device and self.slave1_device and self.slave2_device):
            QtWidgets.QMessageBox.warning(self, "–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è", "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!")
            return
        
        self._trilateration_active = True
        self.btn_start.setEnabled(False)
        self.btn_stop.setEnabled(True)
        self.lbl_status.setText("–ê–ö–¢–ò–í–ù–ê")
        self.lbl_status.setStyleSheet("padding: 5px; background-color: #ffcdd2;")
        
        self.trilaterationStarted.emit()

    def _stop_trilateration(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏."""
        self._trilateration_active = False
        self.btn_start.setEnabled(True)
        self.btn_stop.setEnabled(False)
        self.lbl_status.setText("–ì–æ—Ç–æ–≤–æ")
        self.lbl_status.setStyleSheet("padding: 5px; background-color: #c8e6c9;")
        
        self.trilaterationStopped.emit()

    def update_stations_from_config(self, sdr_settings: dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SDR."""
        try:
            print(f"DEBUG: update_stations_from_config called with: {sdr_settings}")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            self.sdr_positions.clear()
            print(f"DEBUG: Cleared old positions")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            has_real_devices = False
            
            # Master –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É - –æ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–µ–∫—Ç—Ä–∞!
            # master_config = sdr_settings.get('master', {})
            # master_serial = master_config.get('serial', '')
            # 
            # # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–ª–∏–¥–Ω—ã–π (–Ω–µ –ø—É—Å—Ç–æ–π –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª–∏–Ω—ã)
            # if master_serial and len(master_serial) >= 16:
            #     self.sdr_positions['master'] = (0.0, 0.0)
            #     self.master_device = master_config
            #     has_real_devices = True
            
            # Slaves - —Ç–æ–ª—å–∫–æ –æ–Ω–∏ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
            slaves = sdr_settings.get('slaves', [])
            print(f"DEBUG: Found {len(slaves)} slaves in config")
            
            for i, slave_config in enumerate(slaves, start=1):
                print(f"DEBUG: Processing slave {i}: {slave_config}")
                slave_serial = slave_config.get('serial', '')
                slave_uri = slave_config.get('uri', '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                if (slave_serial and len(slave_serial) >= 4) or slave_uri:
                    pos = slave_config.get('pos', [0.0, 0.0, 0.0])
                    x, y, z = float(pos[0]), float(pos[1]), float(pos[2])
                    print(f"DEBUG: Adding slave{i} at position ({x}, {y}, {z})")
                    
                    self.sdr_positions[f'slave{i}'] = (x, y)
                    
                    if i == 1:
                        self.slave1_device = slave_config
                    elif i == 2:
                        self.slave2_device = slave_config
                    
                    has_real_devices = True
                else:
                    print(f"DEBUG: Skipping slave {i} - invalid serial/uri: serial='{slave_serial}', uri='{slave_uri}'")
            
            print(f"DEBUG: Final sdr_positions: {self.sdr_positions}")
            print(f"DEBUG: has_real_devices: {has_real_devices}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å Slave —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            if has_real_devices:
                print(f"DEBUG: Updating device info and refreshing map")
                self._update_device_info()
                self._refresh_map()
            else:
                # –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –Ω–µ—Ç Slave —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                print(f"DEBUG: No slave devices, clearing map")
                self.sdr_positions.clear()
                self.device_info.setPlainText("Slave —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n\n–ò—Å—Ç–æ—á–Ω–∏–∫ ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SDR")
                self.position_info.setPlainText("–ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã")
                self._refresh_map()
            
        except Exception as e:
            print(f"Error updating stations from config: {e}")
            import traceback
            print(f"Traceback: {traceback.format_exc()}")

    def _update_device_info(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –≤ UI."""
        try:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
            device_text = ""
            # Master –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –∫–∞—Ä—Ç–µ - –æ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–µ–∫—Ç—Ä–∞!
            # if self.master_device:
            #     device_text += f"Master: {self.master_device.get('nickname', 'N/A')}\n"
            #     device_text += f"Serial: {self.master_device.get('serial', 'N/A')}\n"
            #     device_text += f"URI: {self.master_device.get('uri', 'N/A')}\n\n"
            # else:
            #     device_text += "Master: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
            
            device_text += "Master: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–ø–µ–∫—Ç—Ä–∞ (–Ω–µ –Ω–∞ –∫–∞—Ä—Ç–µ)\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Slave —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
            slave_count = 0
            for i in range(1, 3):
                slave_key = f'slave{i}'
                if slave_key in self.sdr_positions:
                    slave_count += 1
                    if i == 1 and self.slave1_device:
                        device_text += f"Slave {i}: {self.slave1_device.get('nickname', 'N/A')}\n"
                        device_text += f"Serial: {self.slave1_device.get('serial', 'N/A')}\n"
                        device_text += f"URI: {self.slave1_device.get('uri', 'N/A')}\n\n"
                    elif i == 2 and self.slave2_device:
                        device_text += f"Slave {i}: {self.slave2_device.get('nickname', 'N/A')}\n"
                        device_text += f"Serial: {self.slave2_device.get('serial', 'N/A')}\n"
                        device_text += f"URI: {self.slave2_device.get('uri', 'N/A')}\n\n"
            
            if slave_count == 0:
                device_text += "Slave —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n"
            
            self.device_info.setPlainText(device_text)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö
            position_text = ""
            # Master –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é - –æ–Ω –Ω–µ –Ω–∞ –∫–∞—Ä—Ç–µ
            # if 'master' in self.sdr_positions:
            #     x, y = self.sdr_positions['master']
            #     position_text += f"Master: ({x:.1f}, {y:.1f}) –º\n"
            
            for i in range(1, 3):
                slave_key = f'slave{i}'
                if slave_key in self.sdr_positions:
                    x, y = self.sdr_positions[slave_key]
                    # –ü–æ–ª—É—á–∞–µ–º Z –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    z = 0.0
                    if i == 1 and self.slave1_device:
                        pos = self.slave1_device.get('pos', [0.0, 0.0, 0.0])
                        z = float(pos[2])
                    elif i == 2 and self.slave2_device:
                        pos = self.slave2_device.get('pos', [0.0, 0.0, 0.0])
                        z = float(pos[2])
                    
                    position_text += f"Slave {i}: ({x:.1f}, {y:.1f}, {z:.1f}) –º\n"
            
            if not position_text:
                position_text = "–ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã"
            
            self.position_info.setPlainText(position_text)
            
        except Exception as e:
            print(f"Error updating device info: {e}")
            self.device_info.setPlainText("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            self.position_info.setPlainText("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π")

    def _center_map(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (0,0)."""
        self.map_plot.setXRange(-50, 50)
        self.map_plot.setYRange(-50, 50)
        self.map_plot.setAspectLocked(True)
        self.map_plot.setLabel('left', 'Y (–º)')
        self.map_plot.setLabel('bottom', 'X (–º)')
        self.map_plot.showGrid(x=True, y=True, alpha=0.3)
        self._refresh_map()