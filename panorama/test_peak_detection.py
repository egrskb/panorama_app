#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ 'DetectedPeak object is not subscriptable'
"""

import numpy as np
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from panorama.features.spectrum.model import PeakDetector, DetectedPeak

def test_peak_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—é –ø–∏–∫–æ–≤ –∏ —É–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –æ–±—ä–µ–∫—Ç—ã DetectedPeak"""
    
    print("=== –¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–∏–∫–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    freqs = np.linspace(100e6, 6000e6, 1000)  # 100 –ú–ì—Ü - 6 –ì–ì—Ü
    power = np.random.normal(-100, 5, 1000)  # –®—É–º -100 –¥–ë–º ¬±5 –¥–ë
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∏–∫–æ–≤
    peak_indices = [200, 400, 600, 800]
    for idx in peak_indices:
        power[idx] = -50  # –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª -50 –¥–ë–º
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
    detector = PeakDetector(
        snr_threshold_db=10.0,
        min_peak_bins=3,
        min_peak_distance_bins=5,
        peak_band_hz=5e6
    )
    
    # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –ø–∏–∫–∏
    peaks = detector.detect_peaks(freqs, power)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –ø–∏–∫–æ–≤: {len(peaks)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –æ–±—ä–µ–∫—Ç—ã DetectedPeak
    for i, peak in enumerate(peaks):
        print(f"–ü–∏–∫ {i+1}:")
        print(f"  –¢–∏–ø: {type(peak)}")
        print(f"  –ß–∞—Å—Ç–æ—Ç–∞: {peak.freq_hz/1e6:.2f} –ú–ì—Ü")
        print(f"  SNR: {peak.snr_db:.1f} –¥–ë")
        print(f"  –ú–æ—â–Ω–æ—Å—Ç—å: {peak.power_dbm:.1f} –¥–ë–º")
        print(f"  –ò–Ω–¥–µ–∫—Å: {peak.idx}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±—ä–µ–∫—Ç DetectedPeak
        assert isinstance(peak, DetectedPeak), f"–û–∂–∏–¥–∞–ª—Å—è DetectedPeak, –ø–æ–ª—É—á–µ–Ω {type(peak)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º
        assert hasattr(peak, 'freq_hz'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç freq_hz"
        assert hasattr(peak, 'snr_db'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç snr_db"
        assert hasattr(peak, 'power_dbm'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç power_dbm"
        assert hasattr(peak, 'idx'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç idx"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–∏–∫–∞ –ø–æ SNR
    if peaks:
        best_peak = max(peaks, key=lambda p: p.snr_db)
        print(f"\n–õ—É—á—à–∏–π –ø–∏–∫ –ø–æ SNR:")
        print(f"  –ß–∞—Å—Ç–æ—Ç–∞: {best_peak.freq_hz/1e6:.2f} –ú–ì—Ü")
        print(f"  SNR: {best_peak.snr_db:.1f} –¥–ë")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏—è
        peak_freq = best_peak.freq_hz
        peak_snr = best_peak.snr_db
        
        print(f"  –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: freq={peak_freq/1e6:.2f} –ú–ì—Ü, snr={peak_snr:.1f} –¥–ë")
    
    print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return True

def test_peak_attributes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ DetectedPeak"""
    
    print("\n=== –¢–µ—Å—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ DetectedPeak ===")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç DetectedPeak
    peak = DetectedPeak(
        freq_hz=2400e6,      # 2.4 –ì–ì—Ü
        snr_db=25.0,         # SNR 25 –¥–ë
        power_dbm=-45.0,     # –ú–æ—â–Ω–æ—Å—Ç—å -45 –¥–ë–º
        band_hz=5e6,         # –ü–æ–ª–æ—Å–∞ 5 –ú–ì—Ü
        idx=500               # –ò–Ω–¥–µ–∫—Å 500
    )
    
    print(f"–°–æ–∑–¥–∞–Ω –ø–∏–∫: {peak}")
    print(f"–¢–∏–ø: {type(peak)}")
    print(f"–ê—Ç—Ä–∏–±—É—Ç—ã:")
    print(f"  freq_hz: {peak.freq_hz} ({peak.freq_hz/1e6:.1f} –ú–ì—Ü)")
    print(f"  snr_db: {peak.snr_db}")
    print(f"  power_dbm: {peak.power_dbm}")
    print(f"  band_hz: {peak.band_hz} ({peak.band_hz/1e6:.1f} –ú–ì—Ü)")
    print(f"  idx: {peak.idx}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π (frozen dataclass)
    try:
        peak.freq_hz = 5000e6
        print("‚ùå –û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–º")
        return False
    except Exception as e:
        print(f"‚úÖ –û–±—ä–µ–∫—Ç –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π (–∫–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å): {e}")
    
    print("‚úÖ –¢–µ—Å—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    try:
        success = True
        success &= test_peak_detection()
        success &= test_peak_attributes()
        
        if success:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
            sys.exit(1)
            
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
