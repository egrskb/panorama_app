#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ 'DetectedPeak object is not subscriptable'
–ë–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç PyQt5
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_detected_peak_class():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ DetectedPeak"""
    
    print("=== –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ DetectedPeak ===")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
        from panorama.features.spectrum.model import DetectedPeak
        
        print(f"‚úÖ –ö–ª–∞—Å—Å DetectedPeak –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –¢–∏–ø: {type(DetectedPeak)}")
        print(f"   –ú–æ–¥—É–ª—å: {DetectedPeak.__module__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞
        expected_attrs = ['freq_hz', 'snr_db', 'power_dbm', 'band_hz', 'idx']
        for attr in expected_attrs:
            if hasattr(DetectedPeak, attr):
                print(f"   ‚úÖ –ê—Ç—Ä–∏–±—É—Ç {attr}: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå –ê—Ç—Ä–∏–±—É—Ç {attr}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        peak = DetectedPeak(
            freq_hz=2400e6,      # 2.4 –ì–ì—Ü
            snr_db=25.0,         # SNR 25 –¥–ë
            power_dbm=-45.0,     # –ú–æ—â–Ω–æ—Å—Ç—å -45 –¥–ë–º
            band_hz=5e6,         # –ü–æ–ª–æ—Å–∞ 5 –ú–ì—Ü
            idx=500               # –ò–Ω–¥–µ–∫—Å 500
        )
        
        print(f"‚úÖ –û–±—ä–µ–∫—Ç DetectedPeak —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –¢–∏–ø: {type(peak)}")
        print(f"   freq_hz: {peak.freq_hz}")
        print(f"   snr_db: {peak.snr_db}")
        print(f"   power_dbm: {peak.power_dbm}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ DetectedPeak: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_peak_detector_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç PeakDetector"""
    
    print("\n=== –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ PeakDetector ===")
    
    try:
        from panorama.features.spectrum.model import PeakDetector
        
        print(f"‚úÖ –ö–ª–∞—Å—Å PeakDetector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –¢–∏–ø: {type(PeakDetector)}")
        print(f"   –ú–æ–¥—É–ª—å: {PeakDetector.__module__}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ PeakDetector: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_master_sweep_controller():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ MasterSweepController"""
    
    print("\n=== –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ MasterSweepController ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
        from panorama.features.spectrum.master import MasterSweepController
        
        print(f"‚úÖ MasterSweepController –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ
        with open('panorama/features/spectrum/master.py', 'r') as f:
            content = f.read()
            
        if 'best_peak = max(peaks, key=lambda p: p.snr_db)' in content:
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è p.snr_db")
        else:
            print("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
            
        if 'peak_freq = best_peak.freq_hz' in content:
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è best_peak.freq_hz")
        else:
            print("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
            
        if 'peak_snr = best_peak.snr_db' in content:
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è best_peak.snr_db")
        else:
            print("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ MasterSweepController: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ 'DetectedPeak object is not subscriptable'")
    print("=" * 70)
    
    success = True
    success &= test_detected_peak_class()
    success &= test_peak_detector_import()
    success &= test_master_sweep_controller()
    
    print("\n" + "=" * 70)
    if success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –û—à–∏–±–∫–∞ 'DetectedPeak object is not subscriptable' –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        sys.exit(0)
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        sys.exit(1)
