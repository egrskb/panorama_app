# panorama/main.py
import sys, os, stat, getpass, pathlib, logging, time
from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.QtCore import QSettings

from panorama.features.spectrum import SpectrumView
from panorama.features.peaks.ui_improved import AdaptivePeaksWidget  # –ù–æ–≤—ã–π –º–æ–¥—É–ª—å –ø–∏–∫–æ–≤
from panorama.features.detector.widget import DetectorWidget  # –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä
from panorama.features.devices.manager import DeviceManager, DeviceConfigDialog  # –ù–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
from panorama.features.map3d import MapView
from panorama.features.trilateration.engine import TrilaterationEngine, SignalMeasurement  # –ù–æ–≤—ã–π –¥–≤–∏–∂–æ–∫

from panorama.drivers.hackrf_sweep import HackRFSweepSource
from panorama.shared.calibration import load_calibration_csv, get_calibration_lut

try:
    from panorama.drivers.hackrf_lib import HackRFLibSource
    _LIB_AVAILABLE = True
except Exception:
    HackRFLibSource = None  # type: ignore
    _LIB_AVAILABLE = False

from panorama.shared import write_row_csv, setup_logging, merged_defaults


APP_TITLE = "–ü–ê–ù–û–†–ê–ú–ê 0.2 Pro"


def _fix_runtime_dir():
    """–ß–∏–Ω–∏–º XDG_RUNTIME_DIR —Å –ø—Ä–∞–≤–∞–º–∏ 0700."""
    path = os.environ.get("XDG_RUNTIME_DIR")
    ok = False
    if path and os.path.isdir(path):
        try:
            ok = (stat.S_IMODE(os.stat(path).st_mode) == 0o700)
        except Exception:
            ok = False
    if not ok:
        new = f"/tmp/xdg-runtime-{getpass.getuser()}"
        pathlib.Path(new).mkdir(parents=True, exist_ok=True)
        os.chmod(new, 0o700)
        os.environ["XDG_RUNTIME_DIR"] = new


class MainWindow(QtWidgets.QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ü–ê–ù–û–†–ê–ú–ê."""
    
    def __init__(self, logger: logging.Logger, settings: QSettings):
        super().__init__()
        self.log = logger
        self.settings = settings
        self._calibration_profiles = {}
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.device_manager = DeviceManager()
        
        # –î–≤–∏–∂–æ–∫ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
        self.trilateration_engine = TrilaterationEngine()

        self.setWindowTitle(APP_TITLE)
        self.resize(1600, 950)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É
        self._apply_dark_theme()

        # --- —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ ---
        self.tabs = QtWidgets.QTabWidget(self)
        self.setCentralWidget(self.tabs)

        # –°–ø–µ–∫—Ç—Ä
        self.spectrum_tab = SpectrumView()

        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
        self._sweep_source = HackRFSweepSource()
        self._lib_source = None
        
        if _LIB_AVAILABLE:
            try:
                self._lib_source = HackRFLibSource()
                self._lib_available = True
            except Exception as e:
                self._lib_available = False
                self.log.warning(f"libhackrf –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        else:
            self._lib_available = False

        self._source = self._sweep_source
        self.spectrum_tab.set_source(self._source)
        self._wire_source(self._source)

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        self.map_tab = MapView()
        self.peaks_tab = AdaptivePeaksWidget()  # –ù–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç –ø–∏–∫–æ–≤
        self.detector_tab = DetectorWidget()  # –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä

        # –ü—Ä–æ–≤—è–∑–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._connect_signals()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tabs.addTab(self.spectrum_tab, "üìä –°–ø–µ–∫—Ç—Ä")
        self.tabs.addTab(self.peaks_tab, "üìç –ü–∏–∫–∏")
        self.tabs.addTab(self.detector_tab, "üéØ –î–µ—Ç–µ–∫—Ç–æ—Ä")
        self.tabs.addTab(self.map_tab, "üó∫Ô∏è –ö–∞—Ä—Ç–∞")

        # –ú–µ–Ω—é –∏ —Å—Ç–∞—Ç—É—Å–±–∞—Ä
        self._build_menu()
        self._build_shortcuts()
        
        # –°—Ç–∞—Ç—É—Å–±–∞—Ä —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        self._build_statusbar()

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._restore_window_state()
        if hasattr(self.spectrum_tab, "restore_settings"):
            self.spectrum_tab.restore_settings(self.settings, merged_defaults())
        
        # –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        self._try_load_default_calibration()

    def _apply_dark_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é."""
        dark_stylesheet = """
        QMainWindow {
            background-color: #2b2b2b;
        }
        QTabWidget::pane {
            background-color: #2b2b2b;
            border: 1px solid #444;
        }
        QTabBar::tab {
            background-color: #3c3c3c;
            color: #ccc;
            padding: 8px 16px;
            margin-right: 2px;
        }
        QTabBar::tab:selected {
            background-color: #4a4a4a;
            color: white;
        }
        QGroupBox {
            color: #ccc;
            border: 1px solid #555;
            border-radius: 4px;
            margin-top: 10px;
            padding-top: 10px;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 10px;
            padding: 0 5px 0 5px;
        }
        QPushButton {
            background-color: #3c3c3c;
            color: #ccc;
            border: 1px solid #555;
            padding: 6px;
            border-radius: 4px;
        }
        QPushButton:hover {
            background-color: #4a4a4a;
        }
        QPushButton:pressed {
            background-color: #555;
        }
        QTableWidget {
            background-color: #2b2b2b;
            color: #ccc;
            gridline-color: #444;
            selection-background-color: #4a4a4a;
        }
        QHeaderView::section {
            background-color: #3c3c3c;
            color: #ccc;
            padding: 4px;
            border: 1px solid #444;
        }
        QComboBox, QSpinBox, QDoubleSpinBox, QLineEdit {
            background-color: #3c3c3c;
            color: #ccc;
            border: 1px solid #555;
            padding: 4px;
            border-radius: 2px;
        }
        QLabel {
            color: #ccc;
        }
        QCheckBox {
            color: #ccc;
        }
        QMenuBar {
            background-color: #2b2b2b;
            color: #ccc;
        }
        QMenuBar::item:selected {
            background-color: #4a4a4a;
        }
        QMenu {
            background-color: #3c3c3c;
            color: #ccc;
            border: 1px solid #555;
        }
        QMenu::item:selected {
            background-color: #4a4a4a;
        }
        QStatusBar {
            background-color: #2b2b2b;
            color: #ccc;
            border-top: 1px solid #444;
        }
        """
        self.setStyleSheet(dark_stylesheet)

    def _connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏."""
        # –°–ø–µ–∫—Ç—Ä ‚Üí –ü–∏–∫–∏ –∏ –î–µ—Ç–µ–∫—Ç–æ—Ä
        self.spectrum_tab.newRowReady.connect(self.peaks_tab.update_from_row)
        self.spectrum_tab.newRowReady.connect(self.detector_tab.push_data)
        self.spectrum_tab.newRowReady.connect(self._process_for_trilateration)
        
        # –ü–∏–∫–∏ ‚Üí –°–ø–µ–∫—Ç—Ä
        self.peaks_tab.goToFreq.connect(self.spectrum_tab.set_cursor_freq)
        
        # –î–µ—Ç–µ–∫—Ç–æ—Ä ‚Üí –ö–∞—Ä—Ç–∞
        self.detector_tab.sendToMap.connect(self._send_detection_to_map)
        self.detector_tab.rangeSelected.connect(self.spectrum_tab.add_roi_region)
        
        # –ö–∞—Ä—Ç–∞ ‚Üí –¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è
        self.map_tab.trilaterationStarted.connect(self._start_trilateration)
        self.map_tab.trilaterationStopped.connect(self._stop_trilateration)

    def _build_statusbar(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å–±–∞—Ä —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏."""
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤–æ")
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        self.lbl_source = QtWidgets.QLabel("–ò—Å—Ç–æ—á–Ω–∏–∫: hackrf_sweep")
        self.lbl_source.setStyleSheet("padding: 0 10px;")
        self.statusBar().addPermanentWidget(self.lbl_source)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.lbl_devices = QtWidgets.QLabel("SDR: 0")
        self.lbl_devices.setStyleSheet("padding: 0 10px;")
        self.statusBar().addPermanentWidget(self.lbl_devices)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.lbl_calibration = QtWidgets.QLabel("CAL: ‚úó")
        self.lbl_calibration.setStyleSheet("padding: 0 10px; color: #ff6666;")
        self.statusBar().addPermanentWidget(self.lbl_calibration)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
        self.lbl_trilateration = QtWidgets.QLabel("TRI: ‚ö™")
        self.lbl_trilateration.setStyleSheet("padding: 0 10px;")
        self.statusBar().addPermanentWidget(self.lbl_trilateration)

    def _wire_source(self, src):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É."""
        for s in [self._sweep_source, self._lib_source]:
            if not s:
                continue
            try:
                s.status.disconnect()
                s.error.disconnect()
                s.started.disconnect()
                s.finished.disconnect()
            except Exception:
                pass

        if not src:
            return
        
        src.status.connect(lambda m: self.statusBar().showMessage(m, 3000))
        src.error.connect(lambda m: self._show_error("–ò—Å—Ç–æ—á–Ω–∏–∫", m))
        src.started.connect(lambda: self._on_source_started())
        src.finished.connect(lambda code: self._on_source_finished(code))

    def _on_source_started(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
        if isinstance(self._source, HackRFSweepSource) and self._calibration_profiles:
            lna = self.spectrum_tab.lna_db.value()
            vga = self.spectrum_tab.vga_db.value()
            amp = 1 if self.spectrum_tab.amp_on.isChecked() else 0
            
            lut = get_calibration_lut(self._calibration_profiles, lna, vga, amp)
            if lut is not None:
                self._source.set_calibration_lut(lut)
                self.statusBar().showMessage(f"–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ (LNA:{lna} VGA:{vga} AMP:{amp})", 5000)

    def _on_source_finished(self, code: int):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
        if code != 0:
            self.statusBar().showMessage(f"–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º {code}", 5000)

    def _build_menu(self):
        menubar = self.menuBar()

        # === –§–∞–π–ª ===
        m_file = menubar.addMenu("&–§–∞–π–ª")
        
        act_export_csv = QtWidgets.QAction("üìÑ –≠–∫—Å–ø–æ—Ä—Ç —Å–≤–∏–ø–∞ CSV‚Ä¶", self)
        act_export_csv.triggered.connect(self._export_current_csv)
        
        act_export_png = QtWidgets.QAction("üñºÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –≤–æ–¥–æ–ø–∞–¥–∞ PNG‚Ä¶", self)
        act_export_png.triggered.connect(self._export_waterfall_png)
        
        m_file.addAction(act_export_csv)
        m_file.addAction(act_export_png)
        m_file.addSeparator()
        
        act_exit = QtWidgets.QAction("–í—ã—Ö–æ–¥", self)
        act_exit.setShortcut("Ctrl+Q")
        act_exit.triggered.connect(self.close)
        m_file.addAction(act_exit)

        # === –ò—Å—Ç–æ—á–Ω–∏–∫ ===
        m_source = menubar.addMenu("&–ò—Å—Ç–æ—á–Ω–∏–∫")
        
        self.src_group = QtWidgets.QActionGroup(self)
        self.src_group.setExclusive(True)
        
        self.act_src_sweep = QtWidgets.QAction("hackrf_sweep", self, checkable=True, checked=True)
        m_source.addAction(self.act_src_sweep)
        self.src_group.addAction(self.act_src_sweep)
        self.act_src_sweep.toggled.connect(lambda on: on and self._switch_source("sweep"))
        
        if self._lib_available:
            self.act_src_lib = QtWidgets.QAction("libhackrf (CFFI)", self, checkable=True, checked=False)
            m_source.addAction(self.act_src_lib)
            self.src_group.addAction(self.act_src_lib)
            self.act_src_lib.toggled.connect(lambda on: on and self._switch_source("lib"))
        
        m_source.addSeparator()
        
        act_devices = QtWidgets.QAction("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤‚Ä¶", self)
        act_devices.triggered.connect(self._configure_devices)
        m_source.addAction(act_devices)

        # === –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ ===
        m_cal = menubar.addMenu("&–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞")
        
        act_cal_load = QtWidgets.QAction("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV‚Ä¶", self)
        act_cal_load.triggered.connect(self._load_calibration_csv)
        m_cal.addAction(act_cal_load)
        
        self.act_cal_enable = QtWidgets.QAction("‚úì –ü—Ä–∏–º–µ–Ω—è—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É", self, checkable=True, checked=False)
        self.act_cal_enable.toggled.connect(self._toggle_calibration)
        m_cal.addAction(self.act_cal_enable)
        
        m_cal.addSeparator()
        
        act_cal_clear = QtWidgets.QAction("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É", self)
        act_cal_clear.triggered.connect(self._clear_calibration)
        m_cal.addAction(act_cal_clear)

        # === –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ===
        m_tools = menubar.addMenu("&–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        
        act_trilateration = QtWidgets.QAction("üì° –¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è (3 SDR)", self)
        act_trilateration.triggered.connect(self._open_trilateration_settings)
        m_tools.addAction(act_trilateration)
        
        act_signal_db = QtWidgets.QAction("üìä –ë–∞–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤", self)
        act_signal_db.triggered.connect(self._open_signal_database)
        m_tools.addAction(act_signal_db)

        # === –°–ø—Ä–∞–≤–∫–∞ ===
        m_help = menubar.addMenu("&–°–ø—Ä–∞–≤–∫–∞")
        
        act_hotkeys = QtWidgets.QAction("‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", self)
        act_hotkeys.triggered.connect(self._show_hotkeys)
        m_help.addAction(act_hotkeys)
        
        act_about = QtWidgets.QAction("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self)
        act_about.triggered.connect(self._show_about)
        m_help.addAction(act_about)

    def _build_shortcuts(self):
        """–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏."""
        QtWidgets.QShortcut(QtGui.QKeySequence("Space"), self, activated=self._toggle_start_stop)
        QtWidgets.QShortcut(QtGui.QKeySequence("Ctrl+E"), self, activated=self._export_current_csv)
        QtWidgets.QShortcut(QtGui.QKeySequence("R"), self, activated=self.spectrum_tab._on_reset_view)
        QtWidgets.QShortcut(QtGui.QKeySequence("+"), self, activated=lambda: self._zoom_x(0.8))
        QtWidgets.QShortcut(QtGui.QKeySequence("-"), self, activated=lambda: self._zoom_x(1.25))
        QtWidgets.QShortcut(QtGui.QKeySequence("D"), self, activated=lambda: self.tabs.setCurrentWidget(self.detector_tab))
        QtWidgets.QShortcut(QtGui.QKeySequence("S"), self, activated=lambda: self.tabs.setCurrentWidget(self.spectrum_tab))
        QtWidgets.QShortcut(QtGui.QKeySequence("P"), self, activated=lambda: self.tabs.setCurrentWidget(self.peaks_tab))
        QtWidgets.QShortcut(QtGui.QKeySequence("M"), self, activated=lambda: self.tabs.setCurrentWidget(self.map_tab))

    def _zoom_x(self, factor: float):
        """–ó—É–º –ø–æ X –¥–ª—è —Å–ø–µ–∫—Ç—Ä–∞."""
        vb = self.spectrum_tab.plot.getViewBox()
        x0, x1 = vb.viewRange()[0]
        cx = (x0 + x1) / 2
        w = (x1 - x0) * factor
        vb.setXRange(cx - w/2, cx + w/2, padding=0)

    def _show_hotkeys(self):
        QtWidgets.QMessageBox.information(
            self, "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏",
            "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**\n"
            "Space - –°—Ç–∞—Ä—Ç/–°—Ç–æ–ø\n"
            "+ - –ü—Ä–∏–±–ª–∏–∑–∏—Ç—å\n"
            "- - –û—Ç–¥–∞–ª–∏—Ç—å\n"
            "R - –°–±—Ä–æ—Å –≤–∏–¥–∞\n\n"
            "**–ù–∞–≤–∏–≥–∞—Ü–∏—è:**\n"
            "S - –í–∫–ª–∞–¥–∫–∞ –°–ø–µ–∫—Ç—Ä\n"
            "P - –í–∫–ª–∞–¥–∫–∞ –ü–∏–∫–∏\n"
            "D - –í–∫–ª–∞–¥–∫–∞ –î–µ—Ç–µ–∫—Ç–æ—Ä\n"
            "M - –í–∫–ª–∞–¥–∫–∞ –ö–∞—Ä—Ç–∞\n\n"
            "**–≠–∫—Å–ø–æ—Ä—Ç:**\n"
            "Ctrl+E - –≠–∫—Å–ø–æ—Ä—Ç CSV\n"
            "Ctrl+Q - –í—ã—Ö–æ–¥\n\n"
            "**–ú—ã—à—å:**\n"
            "–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –Ω–∞ —Å–ø–µ–∫—Ç—Ä–µ/–≤–æ–¥–æ–ø–∞–¥–µ - –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä\n"
            "–ö–æ–ª–µ—Å–æ –º—ã—à–∏ - –∑—É–º –ø–æ X"
        )

    def _show_about(self):
        QtWidgets.QMessageBox.information(
            self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            f"**{APP_TITLE}**\n"
            "Advanced HackRF Sweep Analyzer\n\n"
            "**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            "‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å baseline + N –ø–æ—Ä–æ–≥–æ–º\n"
            "‚Ä¢ –¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è —Ü–µ–ª–µ–π —Å 3 SDR\n"
            "‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º\n"
            "‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π\n"
            "‚Ä¢ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ CSV (SDR Console format)\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç CSV/PNG/JSON\n\n"
            "**–í–µ—Ä—Å–∏—è:** 0.2 Pro\n"
            "**–õ–∏—Ü–µ–Ω–∑–∏—è:** MIT"
        )

    def _show_error(self, title: str, msg: str):
        QtWidgets.QMessageBox.critical(self, title, msg)

    # ---------------- –¥–µ–π—Å—Ç–≤–∏—è ----------------
    def _toggle_start_stop(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –ø–æ –ø—Ä–æ–±–µ–ª—É."""
        if self._source and self._source.is_running():
            self._source.stop()
        else:
            self.spectrum_tab.btn_start.click()

    def _switch_source(self, name: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö."""
        if self._source and self._source.is_running():
            self._source.stop()

        if name == "lib" and self._lib_available and self._lib_source:
            self._source = self._lib_source
            self.lbl_source.setText("–ò—Å—Ç–æ—á–Ω–∏–∫: libhackrf")
            self.statusBar().showMessage("–ò—Å—Ç–æ—á–Ω–∏–∫: libhackrf (CFFI)", 3000)
        else:
            self._source = self._sweep_source
            self.lbl_source.setText("–ò—Å—Ç–æ—á–Ω–∏–∫: hackrf_sweep")
            self.statusBar().showMessage("–ò—Å—Ç–æ—á–Ω–∏–∫: hackrf_sweep", 3000)

        self.spectrum_tab.set_source(self._source)
        self._wire_source(self._source)

    def _configure_devices(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        serials = []
        if self._lib_available and self._lib_source:
            serials = self._lib_source.list_serials()
        
        if not serials:
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            serials = ["HACKRF_001", "HACKRF_002", "HACKRF_003", "HACKRF_004"]
        
        dlg = DeviceConfigDialog(self.device_manager, serials, self)
        dlg.devicesConfigured.connect(self._on_devices_configured)
        
        if dlg.exec_() == QtWidgets.QDialog.Accepted:
            self._update_device_status()

    def _on_devices_configured(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        self._update_device_status()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–≤–∏–∂–æ–∫ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
        master, slave1, slave2 = self.device_manager.get_trilateration_devices()
        
        if master and slave1 and slave2:
            self.trilateration_engine.set_device_positions(
                (master.position_x, master.position_y, master.position_z),
                (slave1.position_x, slave1.position_y, slave1.position_z),
                (slave2.position_x, slave2.position_y, slave2.position_z),
                master.serial, slave1.serial, slave2.serial
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
            self.map_tab._on_sdr_moved()

    def _update_device_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å—Ç–∞—Ç—É—Å–±–∞—Ä–µ."""
        online_count = sum(1 for d in self.device_manager.devices.values() if d.is_online)
        self.lbl_devices.setText(f"SDR: {online_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
        master, slave1, slave2 = self.device_manager.get_trilateration_devices()
        if master and slave1 and slave2:
            self.lbl_trilateration.setText("TRI: ‚úì")
            self.lbl_trilateration.setStyleSheet("padding: 0 10px; color: #66ff66;")
        else:
            self.lbl_trilateration.setText("TRI: ‚úó")
            self.lbl_trilateration.setStyleSheet("padding: 0 10px; color: #ff6666;")

    # ---------------- —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è ----------------
    def _open_trilateration_settings(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏."""
        master, slave1, slave2 = self.device_manager.get_trilateration_devices()
        
        if not (master and slave1 and slave2):
            QtWidgets.QMessageBox.warning(
                self, "–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è",
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å 3 SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!\n"
                "–ò—Å—Ç–æ—á–Ω–∏–∫ ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        QtWidgets.QMessageBox.information(
            self, "–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞",
            f"**–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:**\n\n"
            f"Master: {master.nickname} ({master.serial})\n"
            f"–ü–æ–∑–∏—Ü–∏—è: ({master.position_x:.1f}, {master.position_y:.1f}, {master.position_z:.1f})\n\n"
            f"Slave 1: {slave1.nickname} ({slave1.serial})\n"
            f"–ü–æ–∑–∏—Ü–∏—è: ({slave1.position_x:.1f}, {slave1.position_y:.1f}, {slave1.position_z:.1f})\n\n"
            f"Slave 2: {slave2.nickname} ({slave2.serial})\n"
            f"–ü–æ–∑–∏—Ü–∏—è: ({slave2.position_x:.1f}, {slave2.position_y:.1f}, {slave2.position_z:.1f})\n\n"
            f"–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É **–ö–∞—Ä—Ç–∞** –¥–ª—è –∑–∞–ø—É—Å–∫–∞!"
        )
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–∞—Ä—Ç—É
        self.tabs.setCurrentWidget(self.map_tab)

    def _start_trilateration(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—é."""
        self.trilateration_engine.start()
        self.lbl_trilateration.setText("TRI: üî¥")
        self.lbl_trilateration.setStyleSheet("padding: 0 10px; color: #ff6666;")
        self.statusBar().showMessage("–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞", 3000)

    def _stop_trilateration(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—é."""
        self.trilateration_engine.stop()
        self.lbl_trilateration.setText("TRI: ‚úì")
        self.lbl_trilateration.setStyleSheet("padding: 0 10px; color: #66ff66;")
        self.statusBar().showMessage("–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", 3000)

    def _process_for_trilateration(self, freqs_hz, power_dbm):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏."""
        if not self.trilateration_engine.is_running:
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–µ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
        device_serial = self.device_manager.master or "UNKNOWN"
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫–∏ –¥–ª—è —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
        threshold = np.median(power_dbm) + 10  # –ü—Ä–æ—Å—Ç–æ–π –ø–æ—Ä–æ–≥
        peaks_mask = power_dbm > threshold
        
        if np.any(peaks_mask):
            peak_idx = np.argmax(power_dbm)
            
            from panorama.features.trilateration.engine import SignalMeasurement
            measurement = SignalMeasurement(
                timestamp=time.time(),
                device_serial=device_serial,
                freq_mhz=freqs_hz[peak_idx] / 1e6,
                power_dbm=power_dbm[peak_idx],
                bandwidth_khz=200,  # –ó–∞–≥–ª—É—à–∫–∞
                noise_floor_dbm=np.median(power_dbm)
            )
            
            self.trilateration_engine.add_measurement(measurement)

    def _send_detection_to_map(self, detection):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É."""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏ –Ω–∞ –∫–∞—Ä—Ç—É
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
        positions = self.trilateration_engine.get_current_positions()
        
        if detection.freq_mhz in positions:
            pos = positions[detection.freq_mhz]
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É —Å –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            self.statusBar().showMessage(
                f"–¶–µ–ª—å –Ω–∞ –∫–∞—Ä—Ç–µ: {detection.freq_mhz:.1f} –ú–ì—Ü @ ({pos.x:.1f}, {pos.y:.1f})",
                5000
            )

    def _open_signal_database(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."""
        QtWidgets.QMessageBox.information(
            self, "–ë–∞–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤",
            "**–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:**\n\n"
            "‚Ä¢ 87.5-108 –ú–ì—Ü - FM Radio\n"
            "‚Ä¢ 118-137 –ú–ì—Ü - Aviation\n"
            "‚Ä¢ 144-148 –ú–ì—Ü - Amateur 2m\n"
            "‚Ä¢ 156-163 –ú–ì—Ü - Marine VHF\n"
            "‚Ä¢ 430-440 –ú–ì—Ü - Amateur 70cm\n"
            "‚Ä¢ 446 –ú–ì—Ü - PMR446\n"
            "‚Ä¢ 433 –ú–ì—Ü - ISM 433\n"
            "‚Ä¢ 868 –ú–ì—Ü - ISM 868\n"
            "‚Ä¢ 900-960 –ú–ì—Ü - GSM\n"
            "‚Ä¢ 2.4 –ì–ì—Ü - WiFi/Bluetooth\n"
            "‚Ä¢ 5.8 –ì–ì—Ü - FPV Video\n"
            "‚Ä¢ 1.5-1.6 –ì–ì—Ü - GPS/GNSS\n"
        )

    # ---------------- –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ ----------------
    def _try_load_default_calibration(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å hackrf_cal.csv –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        default_path = "hackrf_cal.csv"
        if os.path.isfile(default_path):
            self._load_calibration_file(default_path)

    def _load_calibration_csv(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥."""
        path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "–§–∞–π–ª –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ CSV", "",
            "CSV files (*.csv);;All files (*)"
        )
        if not path:
            return
        
        self._load_calibration_file(path)

    def _load_calibration_file(self, path: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏."""
        try:
            self._calibration_profiles = load_calibration_csv(path)
            
            if not self._calibration_profiles:
                self._show_error("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞", "–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                return
            
            # –î–ª—è libhackrf –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä—è–º–æ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
            if self._lib_available and self._lib_source:
                ok = self._lib_source.load_calibration(path)
                if ok:
                    self.act_cal_enable.setChecked(True)
                    self.lbl_calibration.setText("CAL: ‚úì")
                    self.lbl_calibration.setStyleSheet("padding: 0 10px; color: #66ff66;")
                    self.statusBar().showMessage(f"–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {os.path.basename(path)}", 5000)
                else:
                    self._show_error("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ libhackrf")
            else:
                # –î–ª—è hackrf_sweep –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
                self.act_cal_enable.setChecked(True)
                self.lbl_calibration.setText("CAL: ‚úì")
                self.lbl_calibration.setStyleSheet("padding: 0 10px; color: #66ff66;")
                self.statusBar().showMessage(f"–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {os.path.basename(path)}", 5000)
            
            self.log.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {len(self._calibration_profiles)}")
            
        except Exception as e:
            self._show_error("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    def _toggle_calibration(self, on: bool):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏."""
        if self._lib_available and self._lib_source:
            self._lib_source.set_calibration_enabled(on)
        
        if on and self._calibration_profiles:
            self.lbl_calibration.setText("CAL: ‚úì")
            self.lbl_calibration.setStyleSheet("padding: 0 10px; color: #66ff66;")
        else:
            self.lbl_calibration.setText("CAL: ‚úó")
            self.lbl_calibration.setStyleSheet("padding: 0 10px; color: #ff6666;")
        
        self.statusBar().showMessage(f"–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: {'–≤–∫–ª—é—á–µ–Ω–∞' if on else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}", 3000)

    def _clear_calibration(self):
        """–û—á–∏—â–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É."""
        self._calibration_profiles = {}
        self.act_cal_enable.setChecked(False)
        self.lbl_calibration.setText("CAL: ‚úó")
        self.lbl_calibration.setStyleSheet("padding: 0 10px; color: #ff6666;")
        self.statusBar().showMessage("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –æ—á–∏—â–µ–Ω–∞", 3000)

    # ---------------- —ç–∫—Å–ø–æ—Ä—Ç ----------------
    def _export_current_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–≤–∏–ø–∞ –≤ CSV."""
        freqs, row = self.spectrum_tab.get_current_row()
        if freqs is None or row is None:
            QtWidgets.QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV", 
            f"sweep_{time.strftime('%Y%m%d_%H%M%S')}.csv",
            "CSV files (*.csv)"
        )
        if not path:
            return
        
        try:
            write_row_csv(path, freqs, row)
            self.statusBar().showMessage(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {os.path.basename(path)}", 5000)
        except Exception as e:
            self._show_error("–≠–∫—Å–ø–æ—Ä—Ç", f"–û—à–∏–±–∫–∞: {e}")

    def _export_waterfall_png(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤–æ–¥–æ–ø–∞–¥–∞ –≤ PNG."""
        path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG",
            f"waterfall_{time.strftime('%Y%m%d_%H%M%S')}.png",
            "PNG files (*.png)"
        )
        if not path:
            return
        
        try:
            self.spectrum_tab.export_waterfall_png(path)
            self.statusBar().showMessage(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {os.path.basename(path)}", 5000)
        except Exception as e:
            self._show_error("–≠–∫—Å–ø–æ—Ä—Ç", f"–û—à–∏–±–∫–∞: {e}")

    # -------- –æ–∫–Ω–æ/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ --------
    def _restore_window_state(self):
        self.restoreGeometry(self.settings.value("main/geometry", type=QtCore.QByteArray) or QtCore.QByteArray())
        self.restoreState(self.settings.value("main/windowState", type=QtCore.QByteArray) or QtCore.QByteArray())

    def _save_window_state(self):
        self.settings.setValue("main/geometry", self.saveGeometry())
        self.settings.setValue("main/windowState", self.saveState())

    def closeEvent(self, e):
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        try:
            if self._source and self._source.is_running():
                self._source.stop()
        except Exception:
            pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—é
        try:
            if self.trilateration_engine.is_running:
                self.trilateration_engine.stop()
        except Exception:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            if hasattr(self.spectrum_tab, "save_settings"):
                self.spectrum_tab.save_settings(self.settings)
        except Exception:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.device_manager.save_config()
        
        self._save_window_state()
        super().closeEvent(e)


def main():
    _fix_runtime_dir()
    
    QtCore.QCoreApplication.setOrganizationName("panorama")
    QtCore.QCoreApplication.setApplicationName("panorama")
    settings = QSettings(QSettings.IniFormat, QSettings.UserScope, "panorama", "panorama")

    logger = setup_logging("panorama")
    logger.info(f"–ü–ê–ù–û–†–ê–ú–ê Pro –∑–∞–ø—É—â–µ–Ω–∞")

    app = QtWidgets.QApplication(sys.argv)
    app.setStyle("Fusion")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setWindowIcon(QtGui.QIcon.fromTheme("radio"))
    
    win = MainWindow(logger, settings)
    win.show()
    
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()