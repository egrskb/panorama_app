# panorama/main.py
import sys, os, stat, getpass, pathlib, logging, time
from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.QtCore import QSettings
import numpy as np

from panorama.features.spectrum import SpectrumView
from panorama.features.peaks.ui_improved import AdaptivePeaksWidget
from panorama.features.detector.widget import DetectorWidget
from panorama.features.devices.manager import DeviceManager, DeviceConfigDialog
from panorama.features.map3d import MapView
from panorama.features.trilateration.engine import TrilaterationEngine, SignalMeasurement

from panorama.drivers.hackrf_sweep import HackRFSweepSource
from panorama.shared.calibration import load_calibration_csv, get_calibration_lut

try:
    from panorama.drivers.hackrf_lib import HackRFLibSource
    _LIB_AVAILABLE = True
except Exception:
    HackRFLibSource = None
    _LIB_AVAILABLE = False

from panorama.shared import write_row_csv, merged_defaults


APP_TITLE = "–ü–ê–ù–û–†–ê–ú–ê 0.2 Pro"


def _fix_runtime_dir():
    """–ß–∏–Ω–∏–º XDG_RUNTIME_DIR —Å –ø—Ä–∞–≤–∞–º–∏ 0700."""
    path = os.environ.get("XDG_RUNTIME_DIR")
    ok = False
    if path and os.path.isdir(path):
        try:
            ok = (stat.S_IMODE(os.stat(path).st_mode) == 0o700)
        except Exception:
            ok = False
    if not ok:
        new = f"/tmp/xdg-runtime-{getpass.getuser()}"
        pathlib.Path(new).mkdir(parents=True, exist_ok=True)
        os.chmod(new, 0o700)
        os.environ["XDG_RUNTIME_DIR"] = new


class QuietLogger:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    def __init__(self, verbose=False):
        self.verbose = verbose
        self._last_messages = {}
        self._suppressed_prefixes = [
            "First few values:",
            "hq_get_master_spectrum: returned",
            "Spectrum update #",
            "Master: Update #",
            "Active signals:",
            "Signal timeout:",
            "Processing peaks",
        ]
        
    def log(self, message, level="info", dedupe_key=None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π."""
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ª–∏—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not self.verbose:
            for prefix in self._suppressed_prefixes:
                if message.startswith(prefix):
                    return
                    
        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π
        if dedupe_key:
            if dedupe_key in self._last_messages:
                if self._last_messages[dedupe_key] == message:
                    return
            self._last_messages[dedupe_key] = message
            
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if level == "error":
            print(f"[ERROR] {message}")
        elif level == "warning":
            print(f"[WARN] {message}")
        elif self.verbose or level == "important":
            print(f"[INFO] {message}")


class MainWindow(QtWidgets.QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ü–ê–ù–û–†–ê–ú–ê —Å multi-SDR –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
    
    def __init__(self, logger: logging.Logger, settings: QSettings):
        super().__init__()
        self.log = logger
        self.settings = settings
        self._calibration_profiles = {}
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è multi-SDR
        self._multi_sdr_active = False
        self._trilateration_active = False
        self._detector_active = False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç —Å —ç–º–æ–¥–∑–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        self._load_emoji_font()
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.device_manager = DeviceManager()
        
        # –î–≤–∏–∂–æ–∫ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
        self.trilateration_engine = TrilaterationEngine()

        self.setWindowTitle(APP_TITLE)
        self.resize(1600, 950)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ç–µ–º–Ω—É—é —Ç–µ–º—É
        self._apply_dark_theme()

        # --- —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ ---
        self.tabs = QtWidgets.QTabWidget(self)
        self.setCentralWidget(self.tabs)

        # –°–ø–µ–∫—Ç—Ä
        self.spectrum_tab = SpectrumView()

        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
        self._sweep_source = HackRFSweepSource()
        self._lib_source = None
        self._current_source_type = "sweep"
        
        if _LIB_AVAILABLE:
            try:
                self._lib_source = HackRFLibSource()
                self._lib_available = True
                self.log.log("libhackrf_multi —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", level="important")
            except Exception as e:
                self._lib_available = False
                self.log.log(f"libhackrf_multi –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}", level="warning")
        else:
            self._lib_available = False
            self.log.log("libhackrf_multi –Ω–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–∞", level="warning")

        self._source = self._sweep_source
        self.spectrum_tab.set_source(self._source)
        self._wire_source(self._source)

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        self.map_tab = MapView()
        self.peaks_tab = AdaptivePeaksWidget()
        self.detector_tab = DetectorWidget()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tabs.addTab(self.spectrum_tab, "üìä –°–ø–µ–∫—Ç—Ä")
        self.tabs.addTab(self.peaks_tab, "üìç –ü–∏–∫–∏")
        self.tabs.addTab(self.detector_tab, "üéØ –î–µ—Ç–µ–∫—Ç–æ—Ä")
        self.tabs.addTab(self.map_tab, "üó∫Ô∏è –ö–∞—Ä—Ç–∞")
        
        # –ü—Ä–æ–≤—è–∑–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._connect_signals()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤–∫–ª–∞–¥–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ libhackrf, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è hackrf_sweep
        self._update_tabs_availability()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∏–∫–∞–º
        self._on_tab_changed(0)
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Å multi-SDR
        self._connect_detector_to_multisdr()

        # –ú–µ–Ω—é –∏ —Å—Ç–∞—Ç—É—Å–±–∞—Ä
        self._build_menu()
        self._build_shortcuts()
        
        # –°—Ç–∞—Ç—É—Å–±–∞—Ä —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        self._build_statusbar()

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._restore_window_state()
        if hasattr(self.spectrum_tab, "restore_settings"):
            self.spectrum_tab.restore_settings(self.settings, merged_defaults())
        
        # –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        self._try_load_default_calibration()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ multi-SDR
        self._status_timer = QtCore.QTimer()
        self._status_timer.timeout.connect(self._update_multi_sdr_status)
        self._status_timer.setInterval(1000)  # 1 Hz
        
    def _load_emoji_font(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–º–æ–¥–∑–∏."""
        from PyQt5.QtGui import QFontDatabase
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã —Å —ç–º–æ–¥–∑–∏
        emoji_fonts = [
            "/usr/share/fonts/truetype/noto/NotoColorEmoji.ttf",
            "/System/Library/Fonts/Apple Color Emoji.ttc",
            "C:/Windows/Fonts/seguiemj.ttf"
        ]
        
        for font_path in emoji_fonts:
            if os.path.exists(font_path):
                QFontDatabase.addApplicationFont(font_path)
                break

    def _apply_dark_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Ç–µ–º–Ω—É—é —Ç–µ–º—É."""
        dark_stylesheet = """
        /* –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */
        QMainWindow {
            background-color: #2b2b2b;
            color: #e0e0e0;
        }
        
        QWidget {
            background-color: #2b2b2b;
            color: #e0e0e0;
        }
        
        /* –í–∫–ª–∞–¥–∫–∏ */
        QTabWidget::pane {
            background-color: #353535;
            border: 1px solid #555;
        }
        
        QTabBar::tab {
            background-color: #404040;
            color: #e0e0e0;
            padding: 8px 16px;
            margin-right: 2px;
            border: 1px solid #555;
            border-bottom: none;
        }
        
        QTabBar::tab:selected {
            background-color: #4a90e2;
            color: white;
        }
        
        QTabBar::tab:hover {
            background-color: #505050;
        }
        
        QTabBar::tab:disabled {
            background-color: #2b2b2b;
            color: #666;
        }
        
        /* –ì—Ä—É–ø–ø—ã */
        QGroupBox {
            color: #e0e0e0;
            border: 2px solid #555;
            border-radius: 5px;
            margin-top: 10px;
            padding-top: 10px;
            font-weight: bold;
        }
        
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 10px;
            padding: 0 5px 0 5px;
            background-color: #2b2b2b;
        }
        
        /* –ö–Ω–æ–ø–∫–∏ */
        QPushButton {
            background-color: #404040;
            color: #e0e0e0;
            border: 1px solid #555;
            padding: 6px 12px;
            border-radius: 4px;
            font-weight: bold;
        }
        
        QPushButton:hover {
            background-color: #4a90e2;
            border: 1px solid #5aa0f2;
        }
        
        QPushButton:pressed {
            background-color: #3a80d2;
        }
        
        QPushButton:disabled {
            background-color: #2b2b2b;
            color: #666;
            border: 1px solid #444;
        }
        
        /* –¢–∞–±–ª–∏—Ü—ã */
        QTableWidget {
            background-color: #353535;
            color: #e0e0e0;
            gridline-color: #555;
            selection-background-color: #4a90e2;
            border: 1px solid #555;
        }
        
        QTableWidget::item {
            padding: 4px;
            border: none;
        }
        
        QTableWidget::item:selected {
            background-color: #4a90e2;
            color: white;
        }
        
        QHeaderView::section {
            background-color: #404040;
            color: #e0e0e0;
            padding: 6px;
            border: 1px solid #555;
            font-weight: bold;
        }
        
        /* –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ */
        QLineEdit, QTextEdit, QPlainTextEdit {
            background-color: #404040;
            color: #e0e0e0;
            border: 1px solid #555;
            padding: 4px;
            border-radius: 3px;
            selection-background-color: #4a90e2;
        }
        
        QComboBox, QSpinBox, QDoubleSpinBox {
            background-color: #404040;
            color: #e0e0e0;
            border: 1px solid #555;
            padding: 4px;
            border-radius: 3px;
        }
        
        QLabel {
            color: #e0e0e0;
            background-color: transparent;
        }
        
        QCheckBox {
            color: #e0e0e0;
            spacing: 5px;
        }
        
        QMenuBar {
            background-color: #353535;
            color: #e0e0e0;
            border-bottom: 1px solid #555;
        }
        
        QMenu {
            background-color: #404040;
            color: #e0e0e0;
            border: 1px solid #555;
        }
        
        QStatusBar {
            background-color: #353535;
            color: #e0e0e0;
            border-top: 1px solid #555;
        }
        """
        self.setStyleSheet(dark_stylesheet)

    def _connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏."""
        # –°–ø–µ–∫—Ç—Ä ‚Üí –ü–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∫–ª–∞–¥–∫–∏ –ø–∏–∫–æ–≤)
        # –ù–ï –ø–æ–¥–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä—É!
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∏–∫–∞–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        self.tabs.currentChanged.connect(self._on_tab_changed)
        
        # –î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
        self.detector_tab.detectionStarted.connect(self._on_detector_started_manual)
        self.detector_tab.detectionStopped.connect(self._on_detector_stopped_manual)
        
        # –°–ø–µ–∫—Ç—Ä ‚Üí –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.spectrum_tab.configChanged.connect(self.peaks_tab.clear_history)
        
        # –ü–∏–∫–∏ ‚Üí –°–ø–µ–∫—Ç—Ä (–Ω–∞–≤–∏–≥–∞—Ü–∏—è)
        self.peaks_tab.goToFreq.connect(self.spectrum_tab.set_cursor_freq)
        
        # –î–µ—Ç–µ–∫—Ç–æ—Ä ‚Üí –ö–∞—Ä—Ç–∞ –∏ multi-SDR
        self.detector_tab.sendToMap.connect(self._send_detection_to_map)
        self.detector_tab.rangeSelected.connect(self.spectrum_tab.add_roi_region)
        self.detector_tab.signalDetected.connect(self._on_signal_detected)
        
        # –ö–∞—Ä—Ç–∞ ‚Üí –¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è
        self.map_tab.trilaterationStarted.connect(self._start_trilateration)
        self.map_tab.trilaterationStopped.connect(self._stop_trilateration)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
        if self._lib_available:
            self.spectrum_tab.newRowReady.connect(self._process_for_trilateration)
            
    def _on_signal_detected(self, detection):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º –¥–ª—è multi-SDR."""
        if not self._multi_sdr_active:
            return
            
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
        self.log.log(f"Signal detected: {detection.freq_mhz:.3f} MHz, "
                     f"{detection.power_dbm:.1f} dBm, "
                     f"BW: {detection.bandwidth_khz:.1f} kHz", level="important")
        
        # –î–ª—è multi-SDR —Å–∏–≥–Ω–∞–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ watchlist –≤ libhackrf
        self.statusBar().showMessage(
            f"üì° –¶–µ–ª—å {detection.freq_mhz:.1f} –ú–ì—Ü ‚Üí Slave SDR", 
            3000
        )
        
    def _on_tab_changed(self, index):
        """–ü—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏."""
        # –ü–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–µ–π –≤–∫–ª–∞–¥–∫–µ
        if self.tabs.widget(index) == self.peaks_tab:
            self.spectrum_tab.newRowReady.connect(self.peaks_tab.update_from_row)
        else:
            try:
                self.spectrum_tab.newRowReady.disconnect(self.peaks_tab.update_from_row)
            except:
                pass
                
    def _on_detector_started_manual(self):
        """–î–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        # –¢–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä—É
        self.spectrum_tab.newRowReady.connect(self.detector_tab.push_data)
        
        # –ï—Å–ª–∏ multi-SDR –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        if self._multi_sdr_active and self._lib_source:
            threshold_offset = self.detector_tab.threshold_offset.value()
            min_width = self.detector_tab.min_width.value()
            min_sweeps = self.detector_tab.min_sweeps.value()
            timeout = self.detector_tab.signal_timeout.value()
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ C –±–∏–±–ª–∏–æ—Ç–µ–∫—É —á–µ—Ä–µ–∑ FFI
            if hasattr(self._lib_source, '_lib'):
                try:
                    # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ cdef –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
                    self._lib_source._ffi.cdef("""
                        void hq_set_detector_params(float threshold_offset_db, 
                                                   int min_width_bins,
                                                   int min_sweeps, 
                                                   float timeout_sec);
                    """)
                    self._lib_source._lib.hq_set_detector_params(
                        threshold_offset, min_width, min_sweeps, timeout
                    )
                except:
                    pass
        
        self._detector_active = True
        self.statusBar().showMessage("üéØ –î–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω", 5000)
        
    def _on_detector_stopped_manual(self):
        """–î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        try:
            self.spectrum_tab.newRowReady.disconnect(self.detector_tab.push_data)
        except:
            pass
            
        self._detector_active = False
        self.statusBar().showMessage("‚ö™ –î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 5000)
        
    def _connect_detector_to_multisdr(self):
        """–°–≤—è–∑—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Å multi-SDR –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π."""
        def update_detector_params(threshold, min_width, min_sweeps, timeout):
            if self._multi_sdr_active and self._lib_source:
                self._lib_source.set_detector_params(
                    threshold, min_width, min_sweeps, timeout
                )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.detector_tab.parametersChanged.connect(update_detector_params)

    def _build_statusbar(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å–±–∞—Ä —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏."""
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤–æ")
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        self.lbl_source = QtWidgets.QLabel("–ò—Å—Ç–æ—á–Ω–∏–∫: hackrf_sweep")
        self.lbl_source.setStyleSheet("padding: 0 10px; font-weight: bold;")
        self.statusBar().addPermanentWidget(self.lbl_source)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.lbl_devices = QtWidgets.QLabel("SDR: 0")
        self.lbl_devices.setStyleSheet("padding: 0 10px;")
        self.statusBar().addPermanentWidget(self.lbl_devices)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä multi-SDR
        self.lbl_multi_sdr = QtWidgets.QLabel("MULTI: OFF")
        self.lbl_multi_sdr.setStyleSheet("padding: 0 10px;")
        self.statusBar().addPermanentWidget(self.lbl_multi_sdr)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.lbl_calibration = QtWidgets.QLabel("CAL: –ù–ï–¢")
        self.lbl_calibration.setStyleSheet("padding: 0 10px; color: #ff6666;")
        self.statusBar().addPermanentWidget(self.lbl_calibration)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
        self.lbl_trilateration = QtWidgets.QLabel("TRI: –í–´–ö–õ")
        self.lbl_trilateration.setStyleSheet("padding: 0 10px;")
        self.statusBar().addPermanentWidget(self.lbl_trilateration)

    def _update_tabs_availability(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∫–ª–∞–¥–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
        if self._current_source_type == "sweep":
            # –ü—Ä–∏ hackrf_sweep –æ—Ç–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç—É –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –≤ –¥–µ—Ç–µ–∫—Ç–æ—Ä–µ
            self.tabs.setTabEnabled(3, False)  # –ö–∞—Ä—Ç–∞
            self.tabs.setTabToolTip(3, "–¢—Ä–µ–±—É–µ—Ç—Å—è libhackrf –¥–ª—è —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –¥–µ—Ç–µ–∫—Ç–æ—Ä
            if hasattr(self.detector_tab, 'btn_send_to_map'):
                self.detector_tab.btn_send_to_map.setEnabled(False)
                self.detector_tab.btn_send_to_map.setToolTip("–¢—Ä–µ–±—É–µ—Ç—Å—è libhackrf –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–æ–π")
        else:
            # –ü—Ä–∏ libhackrf –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ
            self.tabs.setTabEnabled(3, True)
            self.tabs.setTabToolTip(3, "")
            
            if hasattr(self.detector_tab, 'btn_send_to_map'):
                self.detector_tab.btn_send_to_map.setEnabled(True)
                self.detector_tab.btn_send_to_map.setToolTip("")

    def _wire_source(self, src):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É."""
        for s in [self._sweep_source, self._lib_source]:
            if not s:
                continue
            try:
                s.status.disconnect()
                s.error.disconnect()
                s.started.disconnect()
                s.finished.disconnect()
            except Exception:
                pass

        if not src:
            return
        
        src.status.connect(lambda m: self.statusBar().showMessage(m, 3000))
        src.error.connect(lambda m: self._show_error("–ò—Å—Ç–æ—á–Ω–∏–∫", m))
        src.started.connect(lambda: self._on_source_started())
        src.finished.connect(lambda code: self._on_source_finished(code))

    def _on_source_started(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
        if isinstance(self._source, HackRFSweepSource) and self._calibration_profiles:
            lna = self.spectrum_tab.lna_db.value()
            vga = self.spectrum_tab.vga_db.value()
            amp = 1 if self.spectrum_tab.amp_on.isChecked() else 0
            
            lut = get_calibration_lut(self._calibration_profiles, lna, vga, amp)
            if lut is not None:
                self._source.set_calibration_lut(lut)
                self.statusBar().showMessage(f"–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ (LNA:{lna} VGA:{vga} AMP:{amp})", 5000)

    def _on_source_finished(self, code: int):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
        if code != 0:
            self.statusBar().showMessage(f"–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º {code}", 5000)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º multi-SDR —Ä–µ–∂–∏–º –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        if self._multi_sdr_active:
            self._stop_multi_sdr()

    def _update_multi_sdr_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å multi-SDR —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ —Å–ø–∞–º–∞."""
        if not self._lib_available or not self._lib_source:
            return
        
        try:
            status = self._lib_source.get_status()
            if status:
                # –û–±–Ω–æ–≤–ª—è–µ–º UI –±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
                parts = []
                if status['master_running']:
                    parts.append("M:OK")
                if status['slave1_running']:
                    parts.append("S1:OK")
                if status['slave2_running']:
                    parts.append("S2:OK")
                if status['watch_items'] > 0:
                    parts.append(f"T:{status['watch_items']}")
                
                status_text = f"MULTI: {' '.join(parts)}" if parts else "MULTI: READY"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if self.lbl_multi_sdr.text() != status_text:
                    self.lbl_multi_sdr.setText(status_text)
                    if parts:
                        self.lbl_multi_sdr.setStyleSheet("padding: 0 10px; color: #66ff66;")
                    else:
                        self.lbl_multi_sdr.setStyleSheet("padding: 0 10px; color: #ffff66;")
        except:
            pass  # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏

    def _build_menu(self):
        menubar = self.menuBar()

        # === –§–∞–π–ª ===
        m_file = menubar.addMenu("&–§–∞–π–ª")
        
        act_export_csv = QtWidgets.QAction("–≠–∫—Å–ø–æ—Ä—Ç —Å–≤–∏–ø–∞ CSV...", self)
        act_export_csv.triggered.connect(self._export_current_csv)
        
        act_export_png = QtWidgets.QAction("–≠–∫—Å–ø–æ—Ä—Ç –≤–æ–¥–æ–ø–∞–¥–∞ PNG...", self)
        act_export_png.triggered.connect(self._export_waterfall_png)
        
        m_file.addAction(act_export_csv)
        m_file.addAction(act_export_png)
        m_file.addSeparator()
        
        act_exit = QtWidgets.QAction("–í—ã—Ö–æ–¥", self)
        act_exit.setShortcut("Ctrl+Q")
        act_exit.triggered.connect(self.close)
        m_file.addAction(act_exit)

        # === –ò—Å—Ç–æ—á–Ω–∏–∫ ===
        m_source = menubar.addMenu("&–ò—Å—Ç–æ—á–Ω–∏–∫")
        
        self.src_group = QtWidgets.QActionGroup(self)
        self.src_group.setExclusive(True)
        
        self.act_src_sweep = QtWidgets.QAction("hackrf_sweep", self, checkable=True, checked=True)
        m_source.addAction(self.act_src_sweep)
        self.src_group.addAction(self.act_src_sweep)
        self.act_src_sweep.toggled.connect(lambda on: on and self._switch_source("sweep"))
        
        if self._lib_available:
            self.act_src_lib = QtWidgets.QAction("libhackrf_multi (CFFI)", self, checkable=True, checked=False)
            m_source.addAction(self.act_src_lib)
            self.src_group.addAction(self.act_src_lib)
            self.act_src_lib.toggled.connect(lambda on: on and self._switch_source("lib"))
        
        m_source.addSeparator()
        
        act_devices = QtWidgets.QAction("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤...", self)
        act_devices.triggered.connect(self._configure_devices)
        m_source.addAction(act_devices)
        
        m_source.addSeparator()
        
        # Multi-SDR —Ä–µ–∂–∏–º
        self.act_multi_sdr = QtWidgets.QAction("Multi-SDR —Ä–µ–∂–∏–º (3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)", self, checkable=True)
        self.act_multi_sdr.triggered.connect(self._toggle_multi_sdr)
        m_source.addAction(self.act_multi_sdr)

        # === –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ ===
        m_cal = menubar.addMenu("&–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞")
        
        act_cal_load = QtWidgets.QAction("–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV...", self)
        act_cal_load.triggered.connect(self._load_calibration_csv)
        m_cal.addAction(act_cal_load)
        
        self.act_cal_enable = QtWidgets.QAction("–ü—Ä–∏–º–µ–Ω—è—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É", self, checkable=True, checked=False)
        self.act_cal_enable.toggled.connect(self._toggle_calibration)
        m_cal.addAction(self.act_cal_enable)
        
        m_cal.addSeparator()
        
        act_cal_clear = QtWidgets.QAction("–û—á–∏—Å—Ç–∏—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É", self)
        act_cal_clear.triggered.connect(self._clear_calibration)
        m_cal.addAction(act_cal_clear)

        # === –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ===
        m_tools = menubar.addMenu("&–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        
        act_trilateration = QtWidgets.QAction("–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è (3 SDR)", self)
        act_trilateration.triggered.connect(self._open_trilateration_settings)
        m_tools.addAction(act_trilateration)
        
        act_signal_db = QtWidgets.QAction("–ë–∞–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤", self)
        act_signal_db.triggered.connect(self._open_signal_database)
        m_tools.addAction(act_signal_db)

        # === –°–ø—Ä–∞–≤–∫–∞ ===
        m_help = menubar.addMenu("&–°–ø—Ä–∞–≤–∫–∞")
        
        act_hotkeys = QtWidgets.QAction("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", self)
        act_hotkeys.triggered.connect(self._show_hotkeys)
        m_help.addAction(act_hotkeys)
        
        act_about = QtWidgets.QAction("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self)
        act_about.triggered.connect(self._show_about)
        m_help.addAction(act_about)

    def _toggle_multi_sdr(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç multi-SDR —Ä–µ–∂–∏–º."""
        if not self._lib_available or self._current_source_type != "lib":
            QtWidgets.QMessageBox.warning(
                self, "Multi-SDR",
                "Multi-SDR —Ä–µ–∂–∏–º —Ç—Ä–µ–±—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ libhackrf_multi!\n\n"
                "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ libhackrf_multi –≤ –º–µ–Ω—é –ò—Å—Ç–æ—á–Ω–∏–∫."
            )
            self.act_multi_sdr.setChecked(False)
            return
        
        if self.act_multi_sdr.isChecked():
            self._start_multi_sdr()
        else:
            self._stop_multi_sdr()

    def _start_multi_sdr(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç multi-SDR —Ä–µ–∂–∏–º."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        master, slave1, slave2 = self.device_manager.get_trilateration_devices()
        if not (master and slave1 and slave2):
            QtWidgets.QMessageBox.warning(
                self, "Multi-SDR",
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ 3 SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è multi-SDR —Ä–µ–∂–∏–º–∞!\n"
                "–ò—Å—Ç–æ—á–Ω–∏–∫ ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
            )
            self.act_multi_sdr.setChecked(False)
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if self._lib_source:
            self._lib_source.set_num_devices(3)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å worker, –ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
            if hasattr(self._lib_source, '_multi_worker') and self._lib_source._multi_worker:
                if hasattr(self.detector_tab, 'threshold_offset'):
                    self._lib_source._multi_worker.set_detector_params(
                        self.detector_tab.threshold_offset.value(),
                        self.detector_tab.min_width.value()
                    )
        
        self._multi_sdr_active = True
        self._status_timer.start()
        
        self.lbl_multi_sdr.setText("MULTI: INIT")
        self.lbl_multi_sdr.setStyleSheet("padding: 0 10px; color: #ffff66;")
        
        # –¢–∏—Ö–∏–π –≤—ã–≤–æ–¥ - —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ–µ
        self.log.log("Multi-SDR —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", level="important")

    def _stop_multi_sdr(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç multi-SDR —Ä–µ–∂–∏–º."""
        self._multi_sdr_active = False
        self._status_timer.stop()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        if self._lib_source:
            self._lib_source.set_num_devices(1)
        
        self.lbl_multi_sdr.setText("MULTI: OFF")
        self.lbl_multi_sdr.setStyleSheet("padding: 0 10px;")
        
        self.statusBar().showMessage("Multi-SDR —Ä–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", 5000)
        self.log.log("Multi-SDR mode disabled", level="important")

    def _build_shortcuts(self):
        """–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏."""
        QtWidgets.QShortcut(QtGui.QKeySequence("Space"), self, activated=self._toggle_start_stop)
        QtWidgets.QShortcut(QtGui.QKeySequence("Ctrl+E"), self, activated=self._export_current_csv)
        QtWidgets.QShortcut(QtGui.QKeySequence("R"), self, activated=self.spectrum_tab._on_reset_view)
        QtWidgets.QShortcut(QtGui.QKeySequence("+"), self, activated=lambda: self._zoom_x(0.8))
        QtWidgets.QShortcut(QtGui.QKeySequence("-"), self, activated=lambda: self._zoom_x(1.25))
        QtWidgets.QShortcut(QtGui.QKeySequence("D"), self, activated=lambda: self.tabs.setCurrentWidget(self.detector_tab))
        QtWidgets.QShortcut(QtGui.QKeySequence("S"), self, activated=lambda: self.tabs.setCurrentWidget(self.spectrum_tab))
        QtWidgets.QShortcut(QtGui.QKeySequence("P"), self, activated=lambda: self.tabs.setCurrentWidget(self.peaks_tab))
        QtWidgets.QShortcut(QtGui.QKeySequence("M"), self, activated=lambda: self.tabs.setCurrentWidget(self.map_tab))

    def _zoom_x(self, factor: float):
        """–ó—É–º –ø–æ X –¥–ª—è —Å–ø–µ–∫—Ç—Ä–∞."""
        vb = self.spectrum_tab.plot.getViewBox()
        x0, x1 = vb.viewRange()[0]
        cx = (x0 + x1) / 2
        w = (x1 - x0) * factor
        vb.setXRange(cx - w/2, cx + w/2, padding=0)

    def _show_hotkeys(self):
        QtWidgets.QMessageBox.information(
            self, "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏",
            "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b><br>"
            "Space - –°—Ç–∞—Ä—Ç/–°—Ç–æ–ø<br>"
            "+ - –ü—Ä–∏–±–ª–∏–∑–∏—Ç—å<br>"
            "- - –û—Ç–¥–∞–ª–∏—Ç—å<br>"
            "R - –°–±—Ä–æ—Å –≤–∏–¥–∞<br><br>"
            "<b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b><br>"
            "S - –í–∫–ª–∞–¥–∫–∞ –°–ø–µ–∫—Ç—Ä<br>"
            "P - –í–∫–ª–∞–¥–∫–∞ –ü–∏–∫–∏<br>"
            "D - –í–∫–ª–∞–¥–∫–∞ –î–µ—Ç–µ–∫—Ç–æ—Ä<br>"
            "M - –í–∫–ª–∞–¥–∫–∞ –ö–∞—Ä—Ç–∞<br><br>"
            "<b>–≠–∫—Å–ø–æ—Ä—Ç:</b><br>"
            "Ctrl+E - –≠–∫—Å–ø–æ—Ä—Ç CSV<br>"
            "Ctrl+Q - –í—ã—Ö–æ–¥<br><br>"
            "<b>–ú—ã—à—å:</b><br>"
            "–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –Ω–∞ —Å–ø–µ–∫—Ç—Ä–µ/–≤–æ–¥–æ–ø–∞–¥–µ - –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä<br>"
            "–ö–æ–ª–µ—Å–æ –º—ã—à–∏ - –∑—É–º –ø–æ X"
        )

    def _show_about(self):
        QtWidgets.QMessageBox.information(
            self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            f"<b>{APP_TITLE}</b><br>"
            "Advanced HackRF Multi-SDR Analyzer<br><br>"
            "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b><br>"
            "‚Ä¢ Multi-SDR —Ä–µ–∂–∏–º: Master sweep + Slave tracking<br>"
            "‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å baseline + N –ø–æ—Ä–æ–≥–æ–º<br>"
            "‚Ä¢ –¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è —Ü–µ–ª–µ–π —Å 3 SDR<br>"
            "‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —à–∏—Ä–æ–∫–æ–ø–æ–ª–æ—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤<br>"
            "‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º<br>"
            "‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏<br>"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π<br>"
            "‚Ä¢ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ CSV (SDR Console format)<br>"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç CSV/PNG/JSON<br><br>"
            "<b>–í–µ—Ä—Å–∏—è:</b> 0.2 Pro<br>"
            "<b>–õ–∏—Ü–µ–Ω–∑–∏—è:</b> MIT"
        )

    def _show_error(self, title: str, msg: str):
        QtWidgets.QMessageBox.critical(self, title, msg)

    def _toggle_start_stop(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –ø–æ –ø—Ä–æ–±–µ–ª—É."""
        if self._source and self._source.is_running():
            self._source.stop()
        else:
            self.spectrum_tab.btn_start.click()

    def _switch_source(self, name: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö."""
        if self._source and self._source.is_running():
            self._source.stop()

        # –û—Ç–∫–ª—é—á–∞–µ–º multi-SDR –ø—Ä–∏ —Å–º–µ–Ω–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if self._multi_sdr_active:
            self._stop_multi_sdr()
            self.act_multi_sdr.setChecked(False)

        if name == "lib" and self._lib_available and self._lib_source:
            self._source = self._lib_source
            self._current_source_type = "lib"
            self.lbl_source.setText("–ò—Å—Ç–æ—á–Ω–∏–∫: libhackrf_multi")
            self.statusBar().showMessage("–ò—Å—Ç–æ—á–Ω–∏–∫: libhackrf_multi (CFFI)", 3000)
            
            # –í–∫–ª—é—á–∞–µ–º –æ–ø—Ü–∏—é multi-SDR
            self.act_multi_sdr.setEnabled(True)
        else:
            self._source = self._sweep_source
            self._current_source_type = "sweep"
            self.lbl_source.setText("–ò—Å—Ç–æ—á–Ω–∏–∫: hackrf_sweep")
            self.statusBar().showMessage("–ò—Å—Ç–æ—á–Ω–∏–∫: hackrf_sweep", 3000)
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –æ–ø—Ü–∏—é multi-SDR
            self.act_multi_sdr.setEnabled(False)

        self.spectrum_tab.set_source(self._source)
        self._wire_source(self._source)
        self._update_tabs_availability()

    def _configure_devices(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        serials = []
        if self._lib_available and self._lib_source:
            try:
                serials = self._lib_source.list_serials()
            except Exception as e:
                self.log.log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}", level="warning")
        
        if not serials:
            QtWidgets.QMessageBox.warning(
                self, "SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö HackRF —É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n\n"
                "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        dlg = DeviceConfigDialog(self.device_manager, serials, self)
        dlg.devicesConfigured.connect(self._on_devices_configured)
        
        if dlg.exec_() == QtWidgets.QDialog.Accepted:
            self._update_device_status()

    def _on_devices_configured(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        self._update_device_status()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–≤–∏–∂–æ–∫ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
        master, slave1, slave2 = self.device_manager.get_trilateration_devices()
        
        if master and slave1 and slave2:
            self.trilateration_engine.set_device_positions(
                (master.position_x, master.position_y, master.position_z),
                (slave1.position_x, slave1.position_y, slave1.position_z),
                (slave2.position_x, slave2.position_y, slave2.position_z),
                master.serial, slave1.serial, slave2.serial
            )
            
            # –í–ê–ñ–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –∫–∞—Ä—Ç–æ–π
            self.map_tab.update_devices(master, slave1, slave2)

    def _update_device_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å—Ç–∞—Ç—É—Å–±–∞—Ä–µ."""
        online_count = sum(1 for d in self.device_manager.devices.values() if d.is_online)
        self.lbl_devices.setText(f"SDR: {online_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
        master, slave1, slave2 = self.device_manager.get_trilateration_devices()
        if master and slave1 and slave2:
            self.lbl_trilateration.setText("TRI: –ì–û–¢–û–í")
            self.lbl_trilateration.setStyleSheet("padding: 0 10px; color: #66ff66;")
        else:
            self.lbl_trilateration.setText("TRI: –ù–ï –ì–û–¢–û–í")
            self.lbl_trilateration.setStyleSheet("padding: 0 10px; color: #ff6666;")

    def _open_trilateration_settings(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏."""
        if self._current_source_type == "sweep":
            QtWidgets.QMessageBox.warning(
                self, "–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è",
                "–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç libhackrf_multi!\n\n"
                "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ libhackrf_multi –≤ –º–µ–Ω—é –ò—Å—Ç–æ—á–Ω–∏–∫."
            )
            return
            
        master, slave1, slave2 = self.device_manager.get_trilateration_devices()
        
        if not (master and slave1 and slave2):
            QtWidgets.QMessageBox.warning(
                self, "–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è",
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å 3 SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!\n"
                "–ò—Å—Ç–æ—á–Ω–∏–∫ ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        info_msg = f"<b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:</b><br><br>"
        info_msg += f"Master: {master.nickname} ({master.serial})<br>"
        info_msg += f"–ü–æ–∑–∏—Ü–∏—è: ({master.position_x:.1f}, {master.position_y:.1f}, {master.position_z:.1f})<br><br>"
        info_msg += f"Slave 1: {slave1.nickname} ({slave1.serial})<br>"
        info_msg += f"–ü–æ–∑–∏—Ü–∏—è: ({slave1.position_x:.1f}, {slave1.position_y:.1f}, {slave1.position_z:.1f})<br><br>"
        info_msg += f"Slave 2: {slave2.nickname} ({slave2.serial})<br>"
        info_msg += f"–ü–æ–∑–∏—Ü–∏—è: ({slave2.position_x:.1f}, {slave2.position_y:.1f}, {slave2.position_z:.1f})<br><br>"
        
        if self._multi_sdr_active:
            info_msg += "<b>Multi-SDR —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω!</b><br>"
            info_msg += "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É <b>–ö–∞—Ä—Ç–∞</b> –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏!"
        else:
            info_msg += "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ <b>Multi-SDR —Ä–µ–∂–∏–º</b> –≤ –º–µ–Ω—é –ò—Å—Ç–æ—á–Ω–∏–∫,<br>"
            info_msg += "–∑–∞—Ç–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É <b>–ö–∞—Ä—Ç–∞</b>!"
        
        QtWidgets.QMessageBox.information(self, "–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è", info_msg)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–∞—Ä—Ç—É –µ—Å–ª–∏ multi-SDR –∞–∫—Ç–∏–≤–µ–Ω
        if self._multi_sdr_active:
            self.tabs.setCurrentWidget(self.map_tab)

    def _start_trilateration(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—é."""
        if not self._multi_sdr_active:
            QtWidgets.QMessageBox.warning(
                self, "–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è",
                "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ Multi-SDR —Ä–µ–∂–∏–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏!\n"
                "–ò—Å—Ç–æ—á–Ω–∏–∫ ‚Üí Multi-SDR —Ä–µ–∂–∏–º"
            )
            return
        
        self.trilateration_engine.start()
        self._trilateration_active = True
        self.lbl_trilateration.setText("TRI: –ê–ö–¢–ò–í–ù–ê")
        self.lbl_trilateration.setStyleSheet("padding: 0 10px; color: #ff6666; font-weight: bold;")
        self.statusBar().showMessage("–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞", 3000)

    def _stop_trilateration(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—é."""
        self.trilateration_engine.stop()
        self._trilateration_active = False
        self.lbl_trilateration.setText("TRI: –ì–û–¢–û–í")
        self.lbl_trilateration.setStyleSheet("padding: 0 10px; color: #66ff66;")
        self.statusBar().showMessage("–¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", 3000)

    def _process_for_trilateration(self, freqs_hz, power_dbm):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏."""
        if not self._trilateration_active or not self.trilateration_engine.is_running:
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–µ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        device_serial = self.device_manager.master.serial if self.device_manager.master else "UNKNOWN"
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫–∏ –¥–ª—è —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
        threshold = np.median(power_dbm) + 10
        peaks_mask = power_dbm > threshold
        
        if np.any(peaks_mask):
            peak_idx = np.argmax(power_dbm)
            
            measurement = SignalMeasurement(
                timestamp=time.time(),
                device_serial=device_serial,
                freq_mhz=freqs_hz[peak_idx] / 1e6,
                power_dbm=power_dbm[peak_idx],
                bandwidth_khz=200,
                noise_floor_dbm=np.median(power_dbm)
            )
            
            self.trilateration_engine.add_measurement(measurement)

    def _send_detection_to_map(self, detection):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)."""
        if self._current_source_type == "sweep":
            QtWidgets.QMessageBox.warning(
                self, "–ö–∞—Ä—Ç–∞",
                "–†–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–æ–π —Ç—Ä–µ–±—É–µ—Ç libhackrf_multi!\n\n"
                "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ libhackrf_multi."
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª—å –Ω–∞ –∫–∞—Ä—Ç—É
        target = self.map_tab.add_target_from_detector(detection)
        
        if target:
            self.statusBar().showMessage(
                f"–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç—É: {detection.freq_mhz:.1f} –ú–ì—Ü",
                5000
            )
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∫–∞—Ä—Ç—ã
            self.tabs.setCurrentWidget(self.map_tab)

    def _open_signal_database(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."""
        QtWidgets.QMessageBox.information(
            self, "–ë–∞–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤",
            "<b>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:</b><br><br>"
            "‚Ä¢ 87.5-108 –ú–ì—Ü - FM Radio<br>"
            "‚Ä¢ 118-137 –ú–ì—Ü - Aviation<br>"
            "‚Ä¢ 144-148 –ú–ì—Ü - Amateur 2m<br>"
            "‚Ä¢ 156-163 –ú–ì—Ü - Marine VHF<br>"
            "‚Ä¢ 430-440 –ú–ì—Ü - Amateur 70cm<br>"
            "‚Ä¢ 446 –ú–ì—Ü - PMR446<br>"
            "‚Ä¢ 433 –ú–ì—Ü - ISM 433<br>"
            "‚Ä¢ 868 –ú–ì—Ü - ISM 868<br>"
            "‚Ä¢ 900-960 –ú–ì—Ü - GSM<br>"
            "‚Ä¢ 1090 –ú–ì—Ü - ADS-B<br>"
            "‚Ä¢ 1575 –ú–ì—Ü - GPS L1<br>"
            "‚Ä¢ 2.4 –ì–ì—Ü - WiFi/Bluetooth<br>"
            "‚Ä¢ 5.8 –ì–ì—Ü - FPV Video/WiFi 5G<br><br>"
            "<b>–¢–∏–ø—ã –ø–æ —à–∏—Ä–∏–Ω–µ –ø–æ–ª–æ—Å—ã:</b><br>"
            "‚Ä¢ < 25 –∫–ì—Ü - Narrowband (PMR, –≥–æ–ª–æ—Å)<br>"
            "‚Ä¢ 25-200 –∫–ì—Ü - Voice/Data<br>"
            "‚Ä¢ 200 –∫–ì—Ü-2 –ú–ì—Ü - Wideband<br>"
            "‚Ä¢ 2-10 –ú–ì—Ü - Video/WiFi<br>"
            "‚Ä¢ > 10 –ú–ì—Ü - Ultra-Wide"
        )

    def _try_load_default_calibration(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å hackrf_cal.csv –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        default_path = "hackrf_cal.csv"
        if os.path.isfile(default_path):
            self._load_calibration_file(default_path)

    def _load_calibration_csv(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥."""
        path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "–§–∞–π–ª –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ CSV", "",
            "CSV files (*.csv);;All files (*)"
        )
        if not path:
            return
        
        self._load_calibration_file(path)

    def _load_calibration_file(self, path: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏."""
        try:
            self._calibration_profiles = load_calibration_csv(path)
            
            if not self._calibration_profiles:
                self._show_error("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞", "–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                return
            
            # –î–ª—è libhackrf –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä—è–º–æ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
            if self._lib_available and self._lib_source:
                ok = self._lib_source.load_calibration(path)
                if ok:
                    self.act_cal_enable.setChecked(True)
                    self.lbl_calibration.setText("CAL: –î–ê")
                    self.lbl_calibration.setStyleSheet("padding: 0 10px; color: #66ff66;")
                    self.statusBar().showMessage(f"–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {os.path.basename(path)}", 5000)
                else:
                    self._show_error("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ libhackrf")
            else:
                # –î–ª—è hackrf_sweep –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
                self.act_cal_enable.setChecked(True)
                self.lbl_calibration.setText("CAL: –î–ê")
                self.lbl_calibration.setStyleSheet("padding: 0 10px; color: #66ff66;")
                self.statusBar().showMessage(f"–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {os.path.basename(path)}", 5000)
            
            self.log.log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {len(self._calibration_profiles)}", level="important")
            
        except Exception as e:
            self._show_error("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    def _toggle_calibration(self, on: bool):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏."""
        if self._lib_available and self._lib_source:
            self._lib_source.set_calibration_enabled(on)
        
        if on and self._calibration_profiles:
            self.lbl_calibration.setText("CAL: –î–ê")
            self.lbl_calibration.setStyleSheet("padding: 0 10px; color: #66ff66;")
        else:
            self.lbl_calibration.setText("CAL: –ù–ï–¢")
            self.lbl_calibration.setStyleSheet("padding: 0 10px; color: #ff6666;")
        
        self.statusBar().showMessage(f"–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: {'–≤–∫–ª—é—á–µ–Ω–∞' if on else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}", 3000)

    def _clear_calibration(self):
        """–û—á–∏—â–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É."""
        self._calibration_profiles = {}
        self.act_cal_enable.setChecked(False)
        self.lbl_calibration.setText("CAL: –ù–ï–¢")
        self.lbl_calibration.setStyleSheet("padding: 0 10px; color: #ff6666;")
        self.statusBar().showMessage("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –æ—á–∏—â–µ–Ω–∞", 3000)

    def _export_current_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–≤–∏–ø–∞ –≤ CSV."""
        freqs, row = self.spectrum_tab.get_current_row()
        if freqs is None or row is None:
            QtWidgets.QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV", 
            f"sweep_{time.strftime('%Y%m%d_%H%M%S')}.csv",
            "CSV files (*.csv)"
        )
        if not path:
            return
        
        try:
            write_row_csv(path, freqs, row)
            self.statusBar().showMessage(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {os.path.basename(path)}", 5000)
        except Exception as e:
            self._show_error("–≠–∫—Å–ø–æ—Ä—Ç", f"–û—à–∏–±–∫–∞: {e}")

    def _export_waterfall_png(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤–æ–¥–æ–ø–∞–¥–∞ –≤ PNG."""
        path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG",
            f"waterfall_{time.strftime('%Y%m%d_%H%M%S')}.png",
            "PNG files (*.png)"
        )
        if not path:
            return
        
        try:
            self.spectrum_tab.export_waterfall_png(path)
            self.statusBar().showMessage(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {os.path.basename(path)}", 5000)
        except Exception as e:
            self._show_error("–≠–∫—Å–ø–æ—Ä—Ç", f"–û—à–∏–±–∫–∞: {e}")

    def _restore_window_state(self):
        self.restoreGeometry(self.settings.value("main/geometry", type=QtCore.QByteArray) or QtCore.QByteArray())
        self.restoreState(self.settings.value("main/windowState", type=QtCore.QByteArray) or QtCore.QByteArray())

    def _save_window_state(self):
        self.settings.setValue("main/geometry", self.saveGeometry())
        self.settings.setValue("main/windowState", self.saveState())

    def closeEvent(self, e):
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        try:
            if self._source and self._source.is_running():
                self._source.stop()
        except Exception:
            pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º multi-SDR
        try:
            if self._multi_sdr_active:
                self._stop_multi_sdr()
        except Exception:
            pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—é
        try:
            if self.trilateration_engine.is_running:
                self.trilateration_engine.stop()
        except Exception:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            if hasattr(self.spectrum_tab, "save_settings"):
                self.spectrum_tab.save_settings(self.settings)
        except Exception:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.device_manager.save_config()
        
        self._save_window_state()
        super().closeEvent(e)


# –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã multi-SDR —Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º
class MultiSDRController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è multi-SDR —Ä–µ–∂–∏–º–æ–º."""
    
    def __init__(self, lib_source, detector_widget):
        self.lib_source = lib_source
        self.detector = detector_widget
        self.active = False
        self.targets = {}  # freq -> target_info
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ multi-SDR —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é."""
        if not self.lib_source or self.active:
            return False
            
        # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        self._sync_detector_params()
        
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º master –¥–ª—è sweep
        # Master –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å watchlist
        
        # 3. Slaves –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω—É—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–ª–∏ –∏–∑ watchlist
        
        self.active = True
        return True
        
    def _sync_detector_params(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Å C –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π."""
        if not self.detector:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ UI
        if self.detector.threshold_mode.currentText().startswith("–ê–≤—Ç–æ"):
            threshold = self.detector.threshold_offset.value()
        else:
            # –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –≤—ã—á–∏—Å–ª—è–µ–º offset –æ—Ç baseline
            threshold = self.detector.fixed_threshold.value() + 110
            
        min_width = self.detector.min_width.value()
        min_sweeps = self.detector.min_sweeps.value()
        timeout = self.detector.signal_timeout.value()
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        if self.lib_source:
            self.lib_source.set_detector_params(
                threshold, min_width, min_sweeps, timeout
            )
            
    def process_watchlist(self, watchlist):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç watchlist –æ—Ç C –±–∏–±–ª–∏–æ—Ç–µ–∫–∏."""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        new_targets = {}
        
        for item in watchlist:
            key = f"{item.f_center_hz:.1f}"
            
            if key in self.targets:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ü–µ–ª—å
                target = self.targets[key]
                target['rssi'] = item.rssi_ema
                target['hits'] = item.hit_count
                target['last_seen'] = time.time()
            else:
                # –ù–æ–≤–∞—è —Ü–µ–ª—å
                target = {
                    'freq_hz': item.f_center_hz,
                    'bandwidth_hz': item.bw_hz,
                    'rssi': item.rssi_ema,
                    'hits': item.hit_count,
                    'first_seen': time.time(),
                    'last_seen': time.time()
                }
                
            new_targets[key] = target
            
        # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ü–µ–ª–∏
        timeout = 5.0  # —Å–µ–∫—É–Ω–¥
        current_time = time.time()
        
        for key in list(self.targets.keys()):
            if key not in new_targets:
                if current_time - self.targets[key]['last_seen'] > timeout:
                    del self.targets[key]
                    
        self.targets = new_targets
        
        return self.targets


def main():
    _fix_runtime_dir()
    
    QtCore.QCoreApplication.setOrganizationName("panorama")
    QtCore.QCoreApplication.setApplicationName("panorama")
    settings = QSettings(QSettings.IniFormat, QSettings.UserScope, "panorama", "panorama")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏—Ö–∏–π –ª–æ–≥–≥–µ—Ä
    logger = QuietLogger(verbose=False)  # verbose=True –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle("Fusion")
    
    # –ü–æ–¥–∞–≤–ª—è–µ–º Qt warnings –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
    if not logger.verbose:
        QtCore.qInstallMessageHandler(lambda *args: None)
    
    win = MainWindow(logger, settings)
    win.show()
    
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()