#!/usr/bin/env python3
"""
–¢–µ—Å—Ç C –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ HackRF Master
"""

import ctypes
import os
import sys

def test_c_library():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É C –±–∏–±–ª–∏–æ—Ç–µ–∫–∏."""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        lib_path = "./libhackrf_qsa.so"
        if not os.path.exists(lib_path):
            lib_path = "./build/libhackrf_qsa.so"
        
        if not os.path.exists(lib_path):
            print(f"‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {lib_path}")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: {lib_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        lib = ctypes.CDLL(lib_path)
        print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        try:
            # hq_device_count
            if hasattr(lib, 'hq_device_count'):
                count = lib.hq_device_count()
                print(f"‚úÖ hq_device_count(): {count}")
            else:
                print("‚ùå hq_device_count –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # hq_get_segment_mode
            if hasattr(lib, 'hq_get_segment_mode'):
                mode = lib.hq_get_segment_mode()
                print(f"‚úÖ hq_get_segment_mode(): {mode}")
            else:
                print("‚ùå hq_get_segment_mode –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ C –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ HackRF Master")
    print("=" * 50)
    
    success = test_c_library()
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç C –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç C –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ –ø—Ä–æ—à–µ–ª")
        sys.exit(1)
