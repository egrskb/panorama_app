#!/bin/bash

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Panorama App –¥–ª—è Linux –∏ macOS
# –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å run_linux.sh –∏ run_macos.sh —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π WebGL

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "=== Panorama App - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ==="
echo

# –ü—É—Ç–∏ –∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º
VENV_DIR="$(pwd)/mvenv"
CONDA_PATH="$HOME/miniconda3"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    else
        echo "unknown"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ Linux
detect_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo "$ID"
    elif [ -f /etc/debian_version ]; then
        echo "debian"
    elif [ -f /etc/redhat-release ]; then
        echo "redhat"
    else
        echo "unknown"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Linux
install_system_deps_linux() {
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Linux..."
    
    DISTRO=$(detect_distro)
    
    case "$DISTRO" in
        "ubuntu"|"debian"|"linuxmint")
            echo "–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤: $DISTRO"
            sudo apt-get update
            sudo apt-get install -y libhackrf-dev libfftw3-dev build-essential pkg-config \
                libusb-1.0-0-dev cmake swig python3-dev python3-pip
            ;;
        "fedora"|"rhel"|"centos"|"rocky"|"alma")
            echo "–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤: $DISTRO"
            if command -v dnf >/dev/null 2>&1; then
                sudo dnf install -y hackrf-devel fftw3-devel gcc make pkgconfig \
                    libusb1-devel cmake swig python3-devel python3-pip
            else
                sudo yum install -y hackrf-devel fftw3-devel gcc make pkgconfig \
                    libusb1-devel cmake swig python3-devel python3-pip
            fi
            ;;
        "arch"|"manjaro")
            echo "–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤: $DISTRO"
            sudo pacman -S --noconfirm hackrf fftw gcc make pkg-config \
                libusb cmake swig python python-pip
            ;;
        *)
            echo "‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤: $DISTRO"
            echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: libhackrf-dev, libfftw3-dev, build-essential, pkg-config"
            ;;
    esac
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π macOS
install_system_deps_macos() {
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π macOS..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Homebrew
    if ! command -v brew >/dev/null 2>&1; then
        echo "‚ùå Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ:"
        echo "   /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
        exit 1
    fi
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Homebrew
    brew install hackrf fftw cmake swig pkg-config libusb
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ emoji —à—Ä–∏—Ñ—Ç–æ–≤
install_emoji_fonts() {
    echo "üé® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ emoji —à—Ä–∏—Ñ—Ç–æ–≤..."
    
    OS=$(detect_os)
    
    case "$OS" in
        "linux")
            DISTRO=$(detect_distro)
            case "$DISTRO" in
                "ubuntu"|"debian"|"linuxmint")
                    sudo apt-get update
                    sudo apt-get install -y fonts-noto-color-emoji fonts-joypixels fonts-twemoji
                    ;;
                "fedora"|"rhel"|"centos"|"rocky"|"alma")
                    if command -v dnf >/dev/null 2>&1; then
                        sudo dnf install -y google-noto-emoji-fonts joypixels-fonts
                    else
                        sudo yum install -y google-noto-emoji-fonts joypixels-fonts
                    fi
                    ;;
                "arch"|"manjaro")
                    sudo pacman -S --noconfirm noto-fonts-emoji joypixels-fonts
                    ;;
                *)
                    echo "‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤: $DISTRO"
                    echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: fonts-noto-color-emoji, fonts-joypixels"
                    ;;
            esac
            ;;
        "macos")
            # macOS –æ–±—ã—á–Ω–æ —É–∂–µ –∏–º–µ–µ—Ç emoji —à—Ä–∏—Ñ—Ç—ã
            echo "‚úì Emoji —à—Ä–∏—Ñ—Ç—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ macOS"
            ;;
    esac
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ hackrf_master
build_hackrf_master() {
    echo "üî® –°–±–æ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ hackrf_master..."
    
    if [ ! -f "panorama/drivers/hackrf/hrf_backend.py" ]; then
        echo "‚ùå –§–∞–π–ª hrf_backend.py –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    cd panorama/drivers/hackrf
    python3 hrf_backend.py build
    cd ../../..
    
    if [ -f "panorama/drivers/hackrf/hrf_backend.py" ]; then
        echo "‚úì –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ hackrf_master —Å–æ–±—Ä–∞–Ω–∞"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ hackrf_master"
        exit 1
    fi
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ hackrf_slave
build_hackrf_slave() {
    echo "üî® –°–±–æ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ hackrf_slave..."
    
    if [ ! -f "panorama/drivers/hackrf/hrf_slave_backend.py" ]; then
        echo "‚ùå –§–∞–π–ª hrf_slave_backend.py –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    cd panorama/drivers/hackrf
    python3 hrf_slave_backend.py build
    cd ../../..
    
    if [ -f "panorama/drivers/hackrf/hrf_slave_backend.py" ]; then
        echo "‚úì –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ hackrf_slave —Å–æ–±—Ä–∞–Ω–∞"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ hackrf_slave"
        exit 1
    fi
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ USB (Linux)
setup_usb_permissions() {
    echo "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ USB..."
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è udev
    if [ ! -f "/etc/udev/rules.d/99-hackrf.rules" ]; then
        echo 'SUBSYSTEM=="usb", ATTRS{idVendor}=="1d50", ATTRS{idProduct}=="6089", MODE="0666"' | sudo tee /etc/udev/rules.d/99-hackrf.rules > /dev/null
        sudo udevadm control --reload-rules
        sudo udevadm trigger
        echo "‚úì –ü—Ä–∞–≤–∏–ª–∞ udev —Å–æ–∑–¥–∞–Ω—ã"
    else
        echo "‚úì –ü—Ä–∞–≤–∏–ª–∞ udev —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
    fi
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Linux)
check_venv() {
    if [ ! -d "$VENV_DIR" ]; then
        echo "‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        echo "–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ: python3 -m venv mvenv"
        echo "–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É: ./dev --install"
        exit 1
    fi
    
    if [ ! -f "$VENV_DIR/bin/activate" ]; then
        echo "‚ùå –§–∞–π–ª –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ venv –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    echo "‚úì –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ conda –æ–∫—Ä—É–∂–µ–Ω–∏—è (macOS)
check_conda_env() {
    if ! command -v conda >/dev/null 2>&1; then
        echo "‚ùå Conda –Ω–µ –Ω–∞–π–¥–µ–Ω"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Miniconda: https://docs.conda.io/en/latest/miniconda.html"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if ! conda env list | grep -q "panorama_env"; then
        echo "‚ùå –û–∫—Ä—É–∂–µ–Ω–∏–µ panorama_env –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        echo "–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ: conda create -n panorama_env python=3.9"
        echo "–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É: ./dev --install"
        exit 1
    fi
    
    echo "‚úì Conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ"
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
run_panorama() {
    local webgl_mode="$1"
    local os_type="$2"
    local debug_mode="$3"
    
    echo "üöÄ –ó–∞–ø—É—Å–∫ Panorama App..."
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    case "$os_type" in
        "linux")
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º venv
            # shellcheck disable=SC1090
            source "$VENV_DIR/bin/activate"
            
            # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã
            unset LD_LIBRARY_PATH || true
            unset SOAPY_SDR_PLUGIN_PATH || true
            ;;
        "macos")
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            if command -v conda >/dev/null 2>&1; then
                [ -f "$CONDA_PATH/etc/profile.d/conda.sh" ] && . "$CONDA_PATH/etc/profile.d/conda.sh"
                conda activate panorama_env || {
                    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ panorama_env —á–µ—Ä–µ–∑ conda"
                    exit 1
                }
            else
                if [ -f "$CONDA_PATH/bin/activate" ]; then
                    # shellcheck disable=SC1090
                    . "$CONDA_PATH/bin/activate" panorama_env || {
                        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ panorama_env —á–µ—Ä–µ–∑ $CONDA_PATH/bin/activate"
                        exit 1
                    }
                else
                    echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω conda –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç $CONDA_PATH/bin/activate"
                    exit 1
                fi
            fi
            
            # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            unset DYLD_LIBRARY_PATH
            unset SOAPY_SDR_PLUGIN_PATH
            ;;
    esac
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebGL —Ä–µ–∂–∏–º
    case "$webgl_mode" in
        "webgl")
            export PANORAMA_WEBGL=1
            echo "üåê WebGL –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞"
            ;;
        "webglforce")
            export PANORAMA_WEBGL=1
            export PANORAMA_WEBGL_FORCE=1
            echo "üåê WebGL –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)"
            ;;
        "nowebgl"|"")
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é WebGL –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            unset PANORAMA_WEBGL || true
            unset PANORAMA_WEBGL_FORCE || true
            echo "üîß WebGL –æ—Ç–∫–ª—é—á–µ–Ω (—Ä–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"
            ;;
    esac
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω debug —Ä–µ–∂–∏–º
    if [ "$debug_mode" = "true" ]; then
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        mkdir -p logs
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        local timestamp=$(date '+%Y-%m-%d_%H-%M-%S')
        local log_file="logs/panorama_${timestamp}.log"
        
        echo "üîç Debug —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω"
        echo "üìù –õ–æ–≥ —Ñ–∞–π–ª: $log_file"
        echo "========================================" | tee "$log_file"
        echo "Panorama App Debug Log - $timestamp" | tee -a "$log_file"
        echo "========================================" | tee -a "$log_file"
        echo "" | tee -a "$log_file"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if [ -f "run_rssi_panorama.py" ]; then
            python run_rssi_panorama.py 2>&1 | tee -a "$log_file"
        elif [ -f "panorama/run_rssi_panorama.py" ]; then
            python panorama/run_rssi_panorama.py 2>&1 | tee -a "$log_file"
        else
            echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ run_rssi_panorama.py" | tee -a "$log_file"
            exit 1
        fi
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        local exit_code=$?
        
        echo "" | tee -a "$log_file"
        echo "========================================" | tee -a "$log_file"
        echo "Debug —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞" | tee -a "$log_file"
        echo "–ö–æ–¥ –≤—ã—Ö–æ–¥–∞: $exit_code" | tee -a "$log_file"
        echo "–õ–æ–≥ —Ñ–∞–π–ª: $log_file" | tee -a "$log_file"
        echo "========================================" | tee -a "$log_file"
        
        exit $exit_code
    else
        # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if [ -f "run_rssi_panorama.py" ]; then
            python run_rssi_panorama.py
        elif [ -f "panorama/run_rssi_panorama.py" ]; then
            python panorama/run_rssi_panorama.py
        else
            echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ run_rssi_panorama.py"
            exit 1
        fi
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏] [webgl-—Ä–µ–∂–∏–º] [–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞]"
        echo
        echo "–û–ø—Ü–∏–∏:"
        echo "  --help, -h     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo "  --install      –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Å–æ–±—Ä–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É"
        echo "  --fonts        –¢–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å emoji —à—Ä–∏—Ñ—Ç—ã"
        echo "  --build        –¢–æ–ª—å–∫–æ —Å–æ–±—Ä–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ hackrf_master –∏ hackrf_slave"
        echo "  --usb          –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ USB (Linux)"
        echo "  --run          –¢–æ–ª—å–∫–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        echo "  (–±–µ–∑ –æ–ø—Ü–∏–π)    –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫"
        echo
        echo "WebGL —Ä–µ–∂–∏–º—ã:"
        echo "  -webgl         –í–∫–ª—é—á–∏—Ç—å WebGL –ø–æ–¥–¥–µ—Ä–∂–∫—É"
        echo "  -webglforce    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç—å WebGL (–æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)"
        echo "  -nowebgl       –û—Ç–∫–ª—é—á–∏—Ç—å WebGL (—Ä–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  -debug         –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å—å –≤—ã–≤–æ–¥ –≤ –ª–æ–≥ —Ñ–∞–π–ª"
        echo
        echo "–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:"
        echo "  -linux         –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Linux —Ä–µ–∂–∏–º"
        echo "  -macos         –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å macOS —Ä–µ–∂–∏–º"
        echo "  (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è) –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
        echo
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  $0 --run -webglforce -linux    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º WebGL –Ω–∞ Linux"
        echo "  $0 --run -webgl -macos         –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å WebGL –Ω–∞ macOS"
        echo "  $0 -webglforce                  –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º WebGL"
        echo "  $0 --run -debug -linux         –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ Linux"
        echo
        exit 0
    fi
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    local webgl_mode="nowebgl"
    local main_action=""
    local forced_os=""
    local debug_mode="false"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    for arg in "$@"; do
        case "$arg" in
            "-webgl")
                webgl_mode="webgl"
                ;;
            "-webglforce")
                webgl_mode="webglforce"
                ;;
            "-nowebgl")
                webgl_mode="nowebgl"
                ;;
            "-debug")
                debug_mode="true"
                ;;
            "-linux")
                forced_os="linux"
                ;;
            "-macos")
                forced_os="macos"
                ;;
            "--install"|"--fonts"|"--build"|"--usb"|"--run")
                main_action="$arg"
                ;;
            "")
                # –ü—É—Å—Ç–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫
                ;;
            *)
                echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $arg"
                echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
                exit 1
                ;;
        esac
    done
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    local os_type
    if [ -n "$forced_os" ]; then
        os_type="$forced_os"
        echo "üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: $os_type"
    else
        os_type=$(detect_os)
        echo "üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: $os_type"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    if [ "$os_type" = "unknown" ]; then
        echo "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
        exit 1
    fi
    
    case "$main_action" in
        "--install")
            case "$os_type" in
                "linux")
                    install_system_deps_linux
                    install_emoji_fonts
                    build_hackrf_master
                    build_hackrf_slave
                    setup_usb_permissions
                    check_venv
                    ;;
                "macos")
                    install_system_deps_macos
                    install_emoji_fonts
                    build_hackrf_master
                    build_hackrf_slave
                    check_conda_env
                    ;;
            esac
            echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            ;;
        "--fonts")
            install_emoji_fonts
            ;;
        "--build")
            build_hackrf_master
            build_hackrf_slave
            ;;
        "--usb")
            if [ "$os_type" = "linux" ]; then
                setup_usb_permissions
            else
                echo "‚ùå –û–ø—Ü–∏—è --usb –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Linux"
                exit 1
            fi
            ;;
        "--run")
            case "$os_type" in
                "linux")
                    check_venv
                    ;;
                "macos")
                    check_conda_env
                    ;;
            esac
            run_panorama "$webgl_mode" "$os_type" "$debug_mode"
            ;;
        "")
            # –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫
            case "$os_type" in
                "linux")
                    install_system_deps_linux
                    install_emoji_fonts
                    build_hackrf_master
                    build_hackrf_slave
                    setup_usb_permissions
                    check_venv
                    ;;
                "macos")
                    install_system_deps_macos
                    install_emoji_fonts
                    build_hackrf_master
                    build_hackrf_slave
                    check_conda_env
                    ;;
            esac
            run_panorama "$webgl_mode" "$os_type" "$debug_mode"
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main "$@"
